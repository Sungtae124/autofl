[
    {
        "name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.ClassIntrospector()#48",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.ClassIntrospector()",
        "snippet": "protected ClassIntrospector() { }\n\n/**\n* Method that may be needed when `copy()`ing `ObjectMapper` instances.\n*\n* @since 2.9.6\n*/\npublic abstract ClassIntrospector copy();\n\n/*\n/**********************************************************\n/* Public API: factory methods\n/**********************************************************\n*/\n\n/**\n* Factory method that constructs an introspector that has all\n* information needed for serialization purposes.\n*/\npublic abstract BeanDescription forSerialization(SerializationConfig cfg,\nJavaType type, MixInResolver r);\n\n/**\n* Factory method that constructs an introspector that has all\n* information needed for deserialization purposes.\n*/\npublic abstract BeanDescription forDeserialization(DeserializationConfig cfg,\nJavaType type, MixInResolver r);\n\n/**\n* Factory method that constructs an introspector that has all\n* information needed for constructing deserializers that use\n* intermediate Builder objects.\n*/\npublic abstract BeanDescription forDeserializationWithBuilder(DeserializationConfig cfg,\nJavaType type, MixInResolver r);\n\n/**\n* Factory method that constructs an introspector that has\n* information necessary for creating instances of given\n* class (\"creator\"), as well as class annotations, but\n* no information on member methods\n*/\npublic abstract BeanDescription forCreation(DeserializationConfig cfg, JavaType type,\nMixInResolver r);\n\n/**\n* Factory method that constructs an introspector that only has\n* information regarding annotations class itself (or its supertypes) has,\n* but nothing on methods or constructors.\n*/\npublic abstract BeanDescription forClassAnnotations(MapperConfig<?> cfg, JavaType type,\nMixInResolver r);\n\n/**\n* Factory method that constructs an introspector that only has\n* information regarding annotations class itself has (but NOT including\n* its supertypes), but nothing on methods or constructors.\n*/\npublic abstract BeanDescription forDirectClassAnnotations(MapperConfig<?> cfg, JavaType type,\nMixInResolver r);\n}",
        "begin_line": 48,
        "end_line": 109,
        "comment": "        \n         * Method called to create a new, non-shared copy, to be used by different\n         * <code>ObjectMapper</code> instance, and one that should not be connected\n         * to this instance, if resolver has mutable state.\n         * If resolver is immutable may simply return `this`.\n         * \n         * @since 2.6\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.ArrayIterator.ArrayIterator(T[] a)#16",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ArrayIterator.java",
        "class_name": "com.fasterxml.jackson.databind.util.ArrayIterator",
        "signature": "com.fasterxml.jackson.databind.util.ArrayIterator.ArrayIterator(T[] a)",
        "snippet": "public ArrayIterator(T[] a) {\nint PROBE_START_LINE_17 = 17;\nT[] p_a_5807_line_17 = a;\nint PROBE_END_LINE_17 = 17;\n_a = p_a_5807_line_17;\n_index = 0;\n}",
        "begin_line": 16,
        "end_line": 22,
        "comment": "\n * Iterator implementation used to efficiently expose contents of an\n * Array as read-only iterator.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.version()#158",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.version()",
        "snippet": "public Version version() {\nreturn com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n}",
        "begin_line": 158,
        "end_line": 160,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.readResolve()#162",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.readResolve()",
        "snippet": "protected Object readResolve() {\nif (_annotationsInside == null) {\n_annotationsInside = new LRUMap<Class<?>,Boolean>(48, 48);\n}",
        "begin_line": 162,
        "end_line": 165,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findEnumValues(Class<?> enumType, Enum<?>[] enumValues, String[] names)#283",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findEnumValues(Class<?> enumType, Enum<?>[] enumValues, String[] names)",
        "snippet": "public String[] findEnumValues(Class<?> enumType, Enum<?>[] enumValues, String[] names) {\nHashMap<String,String> expl = null;\nfor (Field f : ClassUtil.getDeclaredFields(enumType)) {\nif (!f.isEnumConstant()) {\ncontinue;\n}",
        "begin_line": 283,
        "end_line": 288,
        "comment": "             17-Sep-2015, tatu: should not really happen. But... can we do anything?",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findFilterId(Annotated a)#396",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findFilterId(Annotated a)",
        "snippet": "public Object findFilterId(Annotated a) {\nJsonFilter ann = _findAnnotation(a, JsonFilter.class);\nif (ann != null) {\nString id = ann.value();\n// Empty String is same as not having annotation, to allow overrides\nif (id.length() > 0) {\nreturn id;\n}",
        "begin_line": 396,
        "end_line": 403,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findClassDescription(AnnotatedClass ac)#433",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findClassDescription(AnnotatedClass ac)",
        "snippet": "public String findClassDescription(AnnotatedClass ac) {\nJsonClassDescription ann = _findAnnotation(ac, JsonClassDescription.class);\nreturn (ann == null) ? null : ann.value();\n}",
        "begin_line": 433,
        "end_line": 436,
        "comment": "             Empty String is same as not having annotation, to allow overrides",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.isCachable()#151",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.isCachable()",
        "snippet": "public boolean isCachable() {\nint PROBE_START_LINE_127 = 130;\nJsonDeserializer<Object> f__value_deserializer_2755_line_127 = _valueDeserializer;\nboolean collection_deserializer1_expr8_line_127 = f__value_deserializer_2755_line_127 == null;\nboolean collection_deserializer1_expr7_line_127 = (collection_deserializer1_expr8_line_127);\nboolean collection_deserializer1_expr6_line_127 = collection_deserializer1_expr7_line_127\n&& (_valueTypeDeserializer == null) && (_delegateDeserializer == null);\nint PROBE_END_LINE_127 = 130;\n// 26-Mar-2015, tatu: As per [databind#735], need to be careful\nreturn collection_deserializer1_expr6_line_127\n;\n}",
        "begin_line": 151,
        "end_line": 162,
        "comment": "     Important: do NOT cache if polymorphic values",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider()#66",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
        "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider()",
        "snippet": "protected DefaultSerializerProvider() { super(); }\n\nprotected DefaultSerializerProvider(SerializerProvider src,\nSerializationConfig config,SerializerFactory f) {\nsuper(src, config, f);\n}",
        "begin_line": 66,
        "end_line": 71,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl()#609",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
        "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl()",
        "snippet": "public Impl() { super(); }\npublic Impl(Impl src) { super(src); }\n\nprotected Impl(SerializerProvider src, SerializationConfig config,\nSerializerFactory f) {\nsuper(src, config, f);\n}",
        "begin_line": 609,
        "end_line": 615,
        "comment": "    \n     * Concrete implementation that defines factory method(s),\n     * defined as final.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.withCache(LRUMap<Object,JavaType> cache)#289",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.withCache(LRUMap<Object,JavaType> cache)",
        "snippet": "public TypeFactory withCache(LRUMap<Object,JavaType> cache)  {\nreturn new TypeFactory(cache, _parser, _modifiers, _classLoader);\n}",
        "begin_line": 289,
        "end_line": 291,
        "comment": "    \n     * Mutant factory method that will construct new {@link TypeFactory} with\n     * identical settings except for different cache; most likely one with\n     * bigger maximum size.\n     *\n     * @since 2.8\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)#1114",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)",
        "snippet": "public MapLikeType constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass) {\nreturn constructMapLikeType(mapClass,\n_fromClass(null, keyClass, EMPTY_BINDINGS),\n_fromClass(null, valueClass, EMPTY_BINDINGS));\n}",
        "begin_line": 1114,
        "end_line": 1118,
        "comment": "    \n     * Method for constructing a {@link MapLikeType} instance\n     *<p>\n     * NOTE: type modifiers are NOT called on constructed type itself; but are called\n     * for contained types.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapLikeType(Class<?> mapClass)#1342",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapLikeType(Class<?> mapClass)",
        "snippet": "public MapLikeType constructRawMapLikeType(Class<?> mapClass) {\nreturn constructMapLikeType(mapClass, unknownType(), unknownType());\n}",
        "begin_line": 1342,
        "end_line": 1344,
        "comment": "    \n     * Method that can be used to construct \"raw\" Map-like type; meaning that its\n     * parameterization is unknown.\n     * This is similar to using <code>Object.class</code> parameterization,\n     * and is equivalent to calling:\n     *<pre>\n     *  typeFactory.constructMapLikeType(collectionClass, typeFactory.unknownType(), typeFactory.unknownType());\n     *</pre>\n     *<p>\n     * This method should only be used if parameterization is completely unavailable.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.jsontype.NamedType.NamedType(Class<?> c)#16",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/NamedType.java",
        "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
        "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.NamedType(Class<?> c)",
        "snippet": "public NamedType(Class<?> c) { this(c, null); }\n\npublic NamedType(Class<?> c, String name) {\nint PROBE_START_LINE_19 = 19;\nClass<?> p_c_4451_line_19 = c;\nint PROBE_END_LINE_19 = 19;\n_class = p_c_4451_line_19;\nint PROBE_START_LINE_20 = 20;\nClass<?> p_c_4451_line_20 = c;\nString named_type1_expr3_line_20 = p_c_4451_line_20.getName();\nint named_type1_expr2_line_20 = named_type1_expr3_line_20.hashCode();\nint PROBE_END_LINE_20 = 20;\n_hashCode = named_type1_expr2_line_20;\nint PROBE_START_LINE_21 = 21;\nString p_name_4452_line_21 = name;\nint PROBE_END_LINE_21 = 21;\nsetName(p_name_4452_line_21);\n}",
        "begin_line": 16,
        "end_line": 33,
        "comment": "\n * Simple container class for types with optional logical name, used\n * as external identifier\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.jsontype.NamedType.NamedType(Class<?> c, String name)#18",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/NamedType.java",
        "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
        "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.NamedType(Class<?> c, String name)",
        "snippet": "public NamedType(Class<?> c, String name) {\nint PROBE_START_LINE_19 = 19;\nClass<?> p_c_4451_line_19 = c;\nint PROBE_END_LINE_19 = 19;\n_class = p_c_4451_line_19;\nint PROBE_START_LINE_20 = 20;\nClass<?> p_c_4451_line_20 = c;\nString named_type1_expr3_line_20 = p_c_4451_line_20.getName();\nint named_type1_expr2_line_20 = named_type1_expr3_line_20.hashCode();\nint PROBE_END_LINE_20 = 20;\n_hashCode = named_type1_expr2_line_20;\nint PROBE_START_LINE_21 = 21;\nString p_name_4452_line_21 = name;\nint PROBE_END_LINE_21 = 21;\nsetName(p_name_4452_line_21);\n}",
        "begin_line": 18,
        "end_line": 33,
        "comment": "\n * Simple container class for types with optional logical name, used\n * as external identifier\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.MapLikeType.withHandlersFrom(JavaType src)#155",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/MapLikeType.java",
        "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
        "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withHandlersFrom(JavaType src)",
        "snippet": "public JavaType withHandlersFrom(JavaType src) {\nint PROBE_START_LINE_150 = 150;\ncom.fasterxml.jackson.databind.JavaType p_src_5401_line_150 = src;\nJavaType map_like_type1_expr4_line_150 = super.withHandlersFrom(p_src_5401_line_150);\nint PROBE_END_LINE_150 = 150;\nJavaType type = map_like_type1_expr4_line_150;\nint PROBE_START_LINE_151 = 151;\ncom.fasterxml.jackson.databind.JavaType p_src_5401_line_151 = src;\nJavaType map_like_type1_expr5_line_151 = p_src_5401_line_151.getKeyType();\nint PROBE_END_LINE_151 = 151;\nJavaType srcKeyType = map_like_type1_expr5_line_151;\nint PROBE_START_LINE_153 = 160;\ncom.fasterxml.jackson.databind.JavaType v_type_5402_line_153 = type;\nboolean map_like_type1_expr6_line_153 = v_type_5402_line_153 instanceof MapLikeType;\nint PROBE_END_LINE_153 = 160;\n// \"withKeyType()\" not part of JavaType, hence must verify:\nif (map_like_type1_expr6_line_153) {\nint PROBE_START_LINE_154 = 159;\ncom.fasterxml.jackson.databind.JavaType v_src_key_type_5403_line_154 = srcKeyType;\nboolean map_like_type1_expr7_line_154 = v_src_key_type_5403_line_154 != null;\nint PROBE_END_LINE_154 = 159;\nif (map_like_type1_expr7_line_154) {\nint PROBE_START_LINE_155 = 155;\ncom.fasterxml.jackson.databind.JavaType f__key_type_5383_line_155 = _keyType;\ncom.fasterxml.jackson.databind.JavaType v_src_key_type_5403_line_155 = srcKeyType;\nJavaType map_like_type1_expr8_line_155 = f__key_type_5383_line_155\n.withHandlersFrom(v_src_key_type_5403_line_155);\nint PROBE_END_LINE_155 = 155;\nJavaType ct = map_like_type1_expr8_line_155;\nint PROBE_START_LINE_156 = 158;\ncom.fasterxml.jackson.databind.JavaType v_ct_5404_line_156 = ct;\ncom.fasterxml.jackson.databind.JavaType f__key_type_5383_line_156 = _keyType;\nboolean map_like_type1_expr9_line_156 = v_ct_5404_line_156 != f__key_type_5383_line_156;\nint PROBE_END_LINE_156 = 158;\nif (map_like_type1_expr9_line_156) {\ntype = ((MapLikeType) type).withKeyType(ct);\n}",
        "begin_line": 155,
        "end_line": 191,
        "comment": "    \n     * @since 2.7\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.MapLikeType.hasHandlers()#300",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/MapLikeType.java",
        "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
        "signature": "com.fasterxml.jackson.databind.type.MapLikeType.hasHandlers()",
        "snippet": "public boolean hasHandlers() {\nint PROBE_START_LINE_240 = 241;\nboolean map_like_type1_expr17_line_240 = super.hasHandlers();\nboolean map_like_type1_expr18_line_240 = false;\nif (!map_like_type1_expr17_line_240) {\ncom.fasterxml.jackson.databind.JavaType f__value_type_5384_line_240 = _valueType;\nmap_like_type1_expr18_line_240 = f__value_type_5384_line_240.hasHandlers();\n}",
        "begin_line": 300,
        "end_line": 307,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBase.getBindings()#113",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBase.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
        "signature": "com.fasterxml.jackson.databind.type.TypeBase.getBindings()",
        "snippet": "public TypeBindings getBindings() {\nint PROBE_START_LINE_87 = 87;\ncom.fasterxml.jackson.databind.type.TypeBindings f__bindings_5363_line_87 = _bindings;\nint PROBE_END_LINE_87 = 87;\nreturn f__bindings_5363_line_87;\n}",
        "begin_line": 113,
        "end_line": 118,
        "comment": "    \n     * Copy-constructor used when refining/upgrading type instances.\n     *\n     * @since 2.7\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.CollectionType._narrow(Class<?> subclass)#73",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/CollectionType.java",
        "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
        "signature": "com.fasterxml.jackson.databind.type.CollectionType._narrow(Class<?> subclass)",
        "snippet": "protected JavaType _narrow(Class<?> subclass) {\nreturn new CollectionType(subclass, _bindings,\n_superClass, _superInterfaces, _elementType, null, null, _asStatic);\n}",
        "begin_line": 73,
        "end_line": 76,
        "comment": "                 !!! TODO: Wrong, does have supertypes, but:",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.CollectionType.withStaticTyping()#134",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/CollectionType.java",
        "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
        "signature": "com.fasterxml.jackson.databind.type.CollectionType.withStaticTyping()",
        "snippet": "public CollectionType withStaticTyping() {\nif (_asStatic) {\nreturn this;\n}",
        "begin_line": 134,
        "end_line": 137,
        "comment": "                 !!! TODO: Wrong, does have supertypes, but:",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getIgnoredPropertyNames()#357",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getIgnoredPropertyNames()",
        "snippet": "public Set<String> getIgnoredPropertyNames() {\nint PROBE_START_LINE_261 = 261;\nHashSet<String> f__ignored_property_names_4114_line_261 = _ignoredPropertyNames;\nint PROBE_END_LINE_261 = 261;\nreturn f__ignored_property_names_4114_line_261;\n}",
        "begin_line": 357,
        "end_line": 362,
        "comment": "    \n     * Accessor for set of properties that are explicitly marked to be ignored\n     * via per-property markers (but NOT class annotations).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.getValueInstantiator()#359",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
        "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.getValueInstantiator()",
        "snippet": "public ValueInstantiator getValueInstantiator() {\nint PROBE_START_LINE_311 = 311;\ncom.fasterxml.jackson.databind.deser.ValueInstantiator f__value_instantiator_2042_line_311 = _valueInstantiator;\nint PROBE_END_LINE_311 = 311;\nreturn f__value_instantiator_2042_line_311;\n}",
        "begin_line": 359,
        "end_line": 364,
        "comment": "    \n     * Method that allows accessing all properties that this\n     * builder currently contains.\n     *<p>\n     * Note that properties are returned in order that properties\n     * are ordered (explictly, or by rule), which is the serialization\n     * order.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.getInjectables()#366",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
        "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.getInjectables()",
        "snippet": "public List<ValueInjector> getInjectables() {\nint PROBE_START_LINE_315 = 315;\nList<com.fasterxml.jackson.databind.deser.impl.ValueInjector> f__injectables_2050_line_315 = _injectables;\nint PROBE_END_LINE_315 = 315;\nreturn f__injectables_2050_line_315;\n}",
        "begin_line": 366,
        "end_line": 371,
        "comment": "    \n     * Method that allows accessing all properties that this\n     * builder currently contains.\n     *<p>\n     * Note that properties are returned in order that properties\n     * are ordered (explictly, or by rule), which is the serialization\n     * order.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.buildAbstract()#485",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
        "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.buildAbstract()",
        "snippet": "public AbstractDeserializer buildAbstract() {\nreturn new AbstractDeserializer(this, _beanDesc, _backRefProperties, _properties);\n}",
        "begin_line": 485,
        "end_line": 487,
        "comment": "    \n     * Alternate build method used when we must be using some form of\n     * abstract resolution, usually by using addition Type Id\n     * (\"polymorphic deserialization\")\n     * \n     * @since 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.TypeResolutionContext.Basic(TypeFactory tf, TypeBindings b)#24",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/TypeResolutionContext.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.TypeResolutionContext",
        "signature": "com.fasterxml.jackson.databind.introspect.TypeResolutionContext.Basic(TypeFactory tf, TypeBindings b)",
        "snippet": "public Basic(TypeFactory tf, TypeBindings b) {\nint PROBE_START_LINE_25 = 25;\ncom.fasterxml.jackson.databind.type.TypeFactory p_tf_4382_line_25 = tf;\nint PROBE_END_LINE_25 = 25;\n_typeFactory = p_tf_4382_line_25;\nint PROBE_START_LINE_26 = 26;\ncom.fasterxml.jackson.databind.type.TypeBindings p_b_4383_line_26 = b;\nint PROBE_END_LINE_26 = 26;\n_bindings = p_b_4383_line_26;\n}",
        "begin_line": 24,
        "end_line": 33,
        "comment": "\n * Interface that defines API used by members (like {@link AnnotatedMethod})\n * to dynamically resolve types they have.\n *\n * @since 2.7\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.setViews(Class<?>[] views)#401",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.setViews(Class<?>[] views)",
        "snippet": "public void setViews(Class<?>[] views) {\nint PROBE_START_LINE_306 = 310;\nClass<?>[] p_views_2416_line_306 = views;\nboolean settable_bean_property1_expr18_line_306 = p_views_2416_line_306 == null;\nint PROBE_END_LINE_306 = 310;\nif (settable_bean_property1_expr18_line_306) {\n_viewMatcher = null;\n} else {",
        "begin_line": 401,
        "end_line": 408,
        "comment": "    \n     * @since 2.9\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.assignIndex(int index)#416",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.assignIndex(int index)",
        "snippet": "public void assignIndex(int index) {\nint PROBE_START_LINE_317 = 319;\nint f__property_index_2380_line_317 = _propertyIndex;\nint settable_bean_property1_expr20_line_317 = -1;\nboolean settable_bean_property1_expr19_line_317 = f__property_index_2380_line_317 != settable_bean_property1_expr20_line_317;\nint PROBE_END_LINE_317 = 319;\nif (settable_bean_property1_expr19_line_317) {\nthrow new IllegalStateException(\"Property '\"+getName()+\"' already had index (\"+_propertyIndex+\"), trying to assign \"+index);\n}",
        "begin_line": 416,
        "end_line": 424,
        "comment": "    \n     * Method used to assign index for property.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotationMap.annotations()#91",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.annotations()",
        "snippet": "public Iterable<Annotation> annotations() {\nif (_annotations == null || _annotations.size() == 0) {\nreturn Collections.emptyList();\n}",
        "begin_line": 91,
        "end_line": 94,
        "comment": "    \n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase.baseTypeName()#157",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase.baseTypeName()",
        "snippet": "public String baseTypeName() { return _baseType.getRawClass().getName(); }\n\n@Override\npublic final String getPropertyName() { return _typePropertyName; }\n\n@Override\npublic TypeIdResolver getTypeIdResolver() { return _idResolver; }\n\n@Override\npublic Class<?> getDefaultImpl() {\nreturn ClassUtil.rawClass(_defaultImpl);\n}",
        "begin_line": 157,
        "end_line": 168,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase.getTypeIdResolver()#163",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase.getTypeIdResolver()",
        "snippet": "public TypeIdResolver getTypeIdResolver() { return _idResolver; }\n\n@Override\npublic Class<?> getDefaultImpl() {\nreturn ClassUtil.rawClass(_defaultImpl);\n}",
        "begin_line": 163,
        "end_line": 168,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.ToStringSerializer()#39",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.ToStringSerializer()",
        "snippet": "public ToStringSerializer() { super(Object.class); }\n\n/**\n* Sometimes it may actually make sense to retain actual handled type, so...\n*\n* @since 2.5\n*/\npublic ToStringSerializer(Class<?> handledType) {\nsuper(handledType, false);\n}",
        "begin_line": 39,
        "end_line": 48,
        "comment": "    \n     *<p>\n     * Note: usually you should NOT create new instances, but instead use\n     * {@link #instance} which is stateless and fully thread-safe. However,\n     * there are cases where constructor is needed; for example,\n     * when using explicit serializer annotations like\n     * {@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeParser.TypeParser(TypeFactory f)#19",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeParser.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
        "signature": "com.fasterxml.jackson.databind.type.TypeParser.TypeParser(TypeFactory f)",
        "snippet": "public TypeParser(TypeFactory f) {\nint PROBE_START_LINE_20 = 20;\ncom.fasterxml.jackson.databind.type.TypeFactory p_f_5795_line_20 = f;\nint PROBE_END_LINE_20 = 20;\n_factory = p_f_5795_line_20;\n}",
        "begin_line": 19,
        "end_line": 24,
        "comment": "\n * Simple recursive-descent parser for parsing canonical {@link JavaType}\n * representations and constructing type instances.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.DefaultDeserializationContext(DeserializerFactory df, DeserializerCache cache)#45",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
        "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
        "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.DefaultDeserializationContext(DeserializerFactory df, DeserializerCache cache)",
        "snippet": "protected DefaultDeserializationContext(DeserializerFactory df, DeserializerCache cache) {\nsuper(df, cache);\n}",
        "begin_line": 45,
        "end_line": 47,
        "comment": "    \n     * Constructor that will pass specified deserializer factory and\n     * cache: cache may be null (in which case default implementation\n     * will be used), factory cannot be null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl(DeserializerFactory df)#323",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
        "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
        "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl(DeserializerFactory df)",
        "snippet": "public Impl(DeserializerFactory df) {\nsuper(df, null);\n}",
        "begin_line": 323,
        "end_line": 325,
        "comment": "        \n         * Default constructor for a blueprint object, which will use the standard\n         * {@link DeserializerCache}, given factory.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.ClassStack.ClassStack(ClassStack parent, Class<?> curr)#24",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/ClassStack.java",
        "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
        "signature": "com.fasterxml.jackson.databind.type.ClassStack.ClassStack(ClassStack parent, Class<?> curr)",
        "snippet": "private ClassStack(ClassStack parent, Class<?> curr) {\nint PROBE_START_LINE_25 = 25;\ncom.fasterxml.jackson.databind.type.ClassStack p_parent_5296_line_25 = parent;\nint PROBE_END_LINE_25 = 25;\n_parent = p_parent_5296_line_25;\nint PROBE_START_LINE_26 = 26;\nClass<?> p_curr_5297_line_26 = curr;\nint PROBE_END_LINE_26 = 26;\n_current = p_curr_5297_line_26;\n}",
        "begin_line": 24,
        "end_line": 33,
        "comment": "\n * Simple helper class used to keep track of 'call stack' for classes being referenced\n * (as well as unbound variables)\n *\n * @since 2.7\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StringSerializer.StringSerializer()#31",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StringSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.StringSerializer.StringSerializer()",
        "snippet": "public StringSerializer() { super(String.class, false); }\n\n@Override\npublic boolean isEmpty(SerializerProvider prov, Object value) {\nString str = (String) value;\nreturn str.length() == 0;\n}",
        "begin_line": 31,
        "end_line": 37,
        "comment": " In 2.9, removed use of intermediate type `NonTypedScalarSerializerBase`",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.CollectionLikeType.withHandlersFrom(JavaType src)#140",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/CollectionLikeType.java",
        "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
        "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.withHandlersFrom(JavaType src)",
        "snippet": "public JavaType withHandlersFrom(JavaType src) {\nint PROBE_START_LINE_138 = 138;\ncom.fasterxml.jackson.databind.JavaType p_src_5332_line_138 = src;\nJavaType collection_like_type1_expr3_line_138 = super.withHandlersFrom(p_src_5332_line_138);\nint PROBE_END_LINE_138 = 138;\nJavaType type = collection_like_type1_expr3_line_138;\nint PROBE_START_LINE_139 = 139;\ncom.fasterxml.jackson.databind.JavaType p_src_5332_line_139 = src;\nJavaType collection_like_type1_expr4_line_139 = p_src_5332_line_139.getContentType();\nint PROBE_END_LINE_139 = 139;\nJavaType srcCt = collection_like_type1_expr4_line_139;\nint PROBE_START_LINE_140 = 145;\ncom.fasterxml.jackson.databind.JavaType v_src_ct_5334_line_140 = srcCt;\nboolean collection_like_type1_expr5_line_140 = v_src_ct_5334_line_140 != null;\nint PROBE_END_LINE_140 = 145;\nif (collection_like_type1_expr5_line_140) {\nint PROBE_START_LINE_141 = 141;\ncom.fasterxml.jackson.databind.JavaType f__element_type_5314_line_141 = _elementType;\ncom.fasterxml.jackson.databind.JavaType v_src_ct_5334_line_141 = srcCt;\nJavaType collection_like_type1_expr6_line_141 = f__element_type_5314_line_141\n.withHandlersFrom(v_src_ct_5334_line_141);\nint PROBE_END_LINE_141 = 141;\nJavaType ct = collection_like_type1_expr6_line_141;\nint PROBE_START_LINE_142 = 144;\ncom.fasterxml.jackson.databind.JavaType v_ct_5335_line_142 = ct;\ncom.fasterxml.jackson.databind.JavaType f__element_type_5314_line_142 = _elementType;\nboolean collection_like_type1_expr7_line_142 = v_ct_5335_line_142 != f__element_type_5314_line_142;\nint PROBE_END_LINE_142 = 144;\nif (collection_like_type1_expr7_line_142) {\nint PROBE_START_LINE_143 = 143;\ncom.fasterxml.jackson.databind.JavaType v_type_5333_line_143 = type;\ncom.fasterxml.jackson.databind.JavaType v_ct_5335_line_143 = ct;\ncom.fasterxml.jackson.databind.JavaType collection_like_type1_expr8_line_143 = v_type_5333_line_143\n.withContentType(v_ct_5335_line_143);\nint PROBE_END_LINE_143 = 143;\ntype = collection_like_type1_expr8_line_143;\n}",
        "begin_line": 140,
        "end_line": 176,
        "comment": "            will cross that bridge if and when need be",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase.TypeIdResolverBase(JavaType baseType, TypeFactory typeFactory)#37",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java",
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase",
        "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase.TypeIdResolverBase(JavaType baseType, TypeFactory typeFactory)",
        "snippet": "protected TypeIdResolverBase(JavaType baseType, TypeFactory typeFactory) {\nint PROBE_START_LINE_38 = 38;\ncom.fasterxml.jackson.databind.JavaType p_base_type_4680_line_38 = baseType;\nint PROBE_END_LINE_38 = 38;\n_baseType = p_base_type_4680_line_38;\nint PROBE_START_LINE_39 = 39;\ncom.fasterxml.jackson.databind.type.TypeFactory p_type_factory_4681_line_39 = typeFactory;\nint PROBE_END_LINE_39 = 39;\n_typeFactory = p_type_factory_4681_line_39;\n}",
        "begin_line": 37,
        "end_line": 46,
        "comment": "    \n     * Common base type for all polymorphic instances handled.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.Annotated.Annotated()#17",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/Annotated.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
        "signature": "com.fasterxml.jackson.databind.introspect.Annotated.Annotated()",
        "snippet": "protected Annotated() { }\n\npublic abstract <A extends Annotation> A getAnnotation(Class<A> acls);\n\npublic abstract boolean hasAnnotation(Class<?> acls);\n\n/**\n* @since 2.7\n*/\npublic abstract boolean hasOneOf(Class<? extends Annotation>[] annoClasses);\n\n/**\n* Method that can be used to find actual JDK element that this instance\n* represents. It is non-null, except for method/constructor parameters\n* which do not have a JDK counterpart.\n*/\npublic abstract AnnotatedElement getAnnotated();\n\nprotected abstract int getModifiers();\n\npublic boolean isPublic() {\nreturn Modifier.isPublic(getModifiers());\n}",
        "begin_line": 17,
        "end_line": 39,
        "comment": "\n * Shared base class used for anything on which annotations (included\n * within a {@link AnnotationMap}).\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.StdValueInstantiator(DeserializationConfig config, JavaType valueType)#89",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.StdValueInstantiator(DeserializationConfig config, JavaType valueType)",
        "snippet": "public StdValueInstantiator(DeserializationConfig config, JavaType valueType) {\nint PROBE_START_LINE_88 = 88;\ncom.fasterxml.jackson.databind.JavaType p_value_type_3149_line_88 = valueType;\nboolean std_value_instantiator1_expr5_line_88 = p_value_type_3149_line_88 == null;\nboolean std_value_instantiator1_expr2_line_88 = (std_value_instantiator1_expr5_line_88);\nString std_value_instantiator1_expr4_line_88 = null;\nif (!std_value_instantiator1_expr2_line_88) {\nstd_value_instantiator1_expr4_line_88 = valueType.toString();\n}",
        "begin_line": 89,
        "end_line": 97,
        "comment": "    \n     * @deprecated Since 2.7 use constructor that takes {@link JavaType} instead\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.configureFromLongCreator(AnnotatedWithParams creator)#215",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.configureFromLongCreator(AnnotatedWithParams creator)",
        "snippet": "public void configureFromLongCreator(AnnotatedWithParams creator) {\nint PROBE_START_LINE_157 = 157;\ncom.fasterxml.jackson.databind.introspect.AnnotatedWithParams p_creator_3175_line_157 = creator;\nint PROBE_END_LINE_157 = 157;\n_fromLongCreator = p_creator_3175_line_157;\n}",
        "begin_line": 215,
        "end_line": 220,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty(Type t, String n)#79",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty(Type t, String n)",
        "snippet": "public ReferenceProperty(Type t, String n) {\nint PROBE_START_LINE_80 = 80;\ncom.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type p_t_1_line_80 = t;\nint PROBE_END_LINE_80 = 80;\n_type = p_t_1_line_80;\nint PROBE_START_LINE_81 = 81;\nString p_n_2_line_81 = n;\nint PROBE_END_LINE_81 = 81;\n_name = p_n_2_line_81;\n}",
        "begin_line": 79,
        "end_line": 88,
        "comment": "            \n             * Reference property that Jackson manages by suppressing it during serialization,\n             * and reconstructing during deserialization.\n             * Usually this can be defined by using\n             * {@link com.fasterxml.jackson.annotation.JsonBackReference}\n             ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NullSerializer.NullSerializer()#26",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/NullSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NullSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.NullSerializer.NullSerializer()",
        "snippet": "private NullSerializer() { super(Object.class); }\n\n@Override\npublic void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\ngen.writeNull();\n}",
        "begin_line": 26,
        "end_line": 31,
        "comment": "\n * This is a simple dummy serializer that will just output literal\n * JSON null value whenever serialization is requested.\n * Used as the default \"null serializer\" (which is used for serializing\n * null object references unless overridden), as well as for some\n * more exotic types (java.lang.Void).\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.DeserializationFeature(boolean defaultState)#489",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.DeserializationFeature(boolean defaultState)",
        "snippet": "private DeserializationFeature(boolean defaultState) {\nint PROBE_START_LINE_490 = 490;\nboolean p_default_state_448_line_490 = defaultState;\nint PROBE_END_LINE_490 = 490;\n_defaultState = p_default_state_448_line_490;\nint PROBE_START_LINE_491 = 491;\nint deserialization_feature1_expr3_line_491 = ordinal();\nint deserialization_feature1_expr2_line_491 = 1 << deserialization_feature1_expr3_line_491;\nint deserialization_feature1_expr1_line_491 = (deserialization_feature1_expr2_line_491);\nint PROBE_END_LINE_491 = 491;\n_mask = deserialization_feature1_expr1_line_491;\n}",
        "begin_line": 489,
        "end_line": 500,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findJsonValueAccessor()#328",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findJsonValueAccessor()",
        "snippet": "public AnnotatedMember findJsonValueAccessor() {\nreturn (_propCollector == null) ? null\n: _propCollector.getJsonValueAccessor();\n}",
        "begin_line": 328,
        "end_line": 331,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.getIgnoredPropertyNames()#334",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.getIgnoredPropertyNames()",
        "snippet": "public Set<String> getIgnoredPropertyNames() {\nint PROBE_START_LINE_257 = 258;\ncom.fasterxml.jackson.databind.introspect.POJOPropertiesCollector f__prop_collector_3728_line_257 = _propCollector;\nboolean basic_bean_description1_expr22_line_257 = f__prop_collector_3728_line_257 == null;\nboolean basic_bean_description1_expr20_line_257 = (basic_bean_description1_expr22_line_257);\nSet<String> basic_bean_description1_expr19_line_257 = basic_bean_description1_expr20_line_257\n? null\n: _propCollector.getIgnoredPropertyNames();\nint PROBE_END_LINE_257 = 258;\nSet<String> ign = basic_bean_description1_expr19_line_257;\nint PROBE_START_LINE_259 = 261;\nSet<String> v_ign_3748_line_259 = ign;\nboolean basic_bean_description1_expr23_line_259 = v_ign_3748_line_259 == null;\nint PROBE_END_LINE_259 = 261;\nif (basic_bean_description1_expr23_line_259) {\nint PROBE_START_LINE_260 = 260;\nSet<String> basic_bean_description1_expr24_line_260 = Collections.emptySet();\nint PROBE_END_LINE_260 = 260;\nreturn basic_bean_description1_expr24_line_260;\n}",
        "begin_line": 334,
        "end_line": 353,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.PropertyMetadata.getDescription()#274",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/PropertyMetadata.java",
        "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
        "signature": "com.fasterxml.jackson.databind.PropertyMetadata.getDescription()",
        "snippet": "public String getDescription() { return _description; }\n\n/**\n* @since 2.5\n*/\npublic String getDefaultValue() { return _defaultValue; }\n\n/**\n* Accessor for determining whether property has declared \"default value\",\n* which may be used by extension modules.\n*\n* @since 2.6\n*/\npublic boolean hasDefaultValue() { return (_defaultValue != null); }\n\npublic boolean isRequired() { return (_required != null) && _required.booleanValue(); }\n\npublic Boolean getRequired() { return _required; }\n\n/**\n* @since 2.4\n*/\npublic Integer getIndex() { return _index; }\n\n/**\n* @since 2.4\n*/\npublic boolean hasIndex() { return _index != null; }\n\n/**\n* @since 2.9\n*/\npublic MergeInfo getMergeInfo() { int PROBE_START_LINE_264 = 264;\ncom.fasterxml.jackson.databind.PropertyMetadata.MergeInfo f__merge_info_986_line_264 = _mergeInfo;\nint PROBE_END_LINE_264 = 264;\nreturn f__merge_info_986_line_264; }\n\n/**\n* @since 2.9\n*/\npublic Nulls getValueNulls() { int PROBE_START_LINE_269 = 269;\ncom.fasterxml.jackson.annotation.Nulls f__value_nulls_987_line_269 = _valueNulls;\nint PROBE_END_LINE_269 = 269;\nreturn f__value_nulls_987_line_269; }\n\n/**\n* @since 2.9\n*/\npublic Nulls getContentNulls() { int PROBE_START_LINE_274 = 274;\ncom.fasterxml.jackson.annotation.Nulls f__content_nulls_988_line_274 = _contentNulls;\nint PROBE_END_LINE_274 = 274;\nreturn f__content_nulls_988_line_274; }\n}",
        "begin_line": 274,
        "end_line": 326,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getName()#176",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getName()",
        "snippet": "public String getName() {\nint PROBE_START_LINE_153 = 153;\ncom.fasterxml.jackson.databind.PropertyName f__name_4229_line_153 = _name;\nboolean pojoproperty_builder1_expr6_line_153 = f__name_4229_line_153 == null;\nboolean pojoproperty_builder1_expr4_line_153 = (pojoproperty_builder1_expr6_line_153);\nString pojoproperty_builder1_expr5_line_153 = null;\nif (!pojoproperty_builder1_expr4_line_153) {\npojoproperty_builder1_expr5_line_153 = _name.getSimpleName();\n}",
        "begin_line": 176,
        "end_line": 184,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.isExplicitlyIncluded()#246",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.isExplicitlyIncluded()",
        "snippet": "public boolean isExplicitlyIncluded() {\nreturn _anyExplicits(_fields)\n|| _anyExplicits(_getters)\n|| _anyExplicits(_setters)\n// 16-Jan-2016, tatu: Creator names are special, in that name should exist too;\n//   reason for this is [databind#1317]. Let's hope this works well, may need\n//   to tweak further if this lowers visibility\n//                || _anyExplicits(_ctorParameters)\n|| _anyExplicitNames(_ctorParameters)\n;\n}",
        "begin_line": 246,
        "end_line": 256,
        "comment": "    \t/*\n        return fromMemberAnnotations(new WithMember<PropertyName>() {\n            @Override\n            public PropertyName withMember(AnnotatedMember member) {\n                return _annotationIntrospector.findWrapperName(member);\n            }\n        });\n        ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getMetadata()#274",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getMetadata()",
        "snippet": "public PropertyMetadata getMetadata() {\nint PROBE_START_LINE_219 = 233;\ncom.fasterxml.jackson.databind.PropertyMetadata f__metadata_4238_line_219 = _metadata;\nboolean pojoproperty_builder1_expr14_line_219 = f__metadata_4238_line_219 == null;\nint PROBE_END_LINE_219 = 233;\nif (pojoproperty_builder1_expr14_line_219) {\nint PROBE_START_LINE_220 = 220;\nBoolean pojoproperty_builder1_expr15_line_220 = _findRequired();\nint PROBE_END_LINE_220 = 220;\nfinal Boolean b = pojoproperty_builder1_expr15_line_220;\nint PROBE_START_LINE_221 = 221;\nString pojoproperty_builder1_expr16_line_221 = _findDescription();\nint PROBE_END_LINE_221 = 221;\nfinal String desc = pojoproperty_builder1_expr16_line_221;\nint PROBE_START_LINE_222 = 222;\nInteger pojoproperty_builder1_expr17_line_222 = _findIndex();\nint PROBE_END_LINE_222 = 222;\nfinal Integer idx = pojoproperty_builder1_expr17_line_222;\nint PROBE_START_LINE_223 = 223;\nString pojoproperty_builder1_expr18_line_223 = _findDefaultValue();\nint PROBE_END_LINE_223 = 223;\nfinal String def = pojoproperty_builder1_expr18_line_223;\nint PROBE_START_LINE_224 = 229;\nBoolean v_b_4239_line_224 = b;\nboolean pojoproperty_builder1_expr21_line_224 = v_b_4239_line_224 == null;\nboolean pojoproperty_builder1_expr22_line_224 = true;\nif (pojoproperty_builder1_expr21_line_224) {\nInteger v_idx_4241_line_224 = idx;\npojoproperty_builder1_expr22_line_224 = v_idx_4241_line_224 == null;\n}",
        "begin_line": 274,
        "end_line": 303,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withMember(AnnotatedMember member)#1150",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withMember(AnnotatedMember member)",
        "snippet": "public ObjectIdInfo withMember(AnnotatedMember member) {\ncom.fasterxml.jackson.databind.AnnotationIntrospector f__annotation_introspector_4227_line_692 = _annotationIntrospector;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMember p_member_4279_line_692 = member;\nObjectIdInfo pojoproperty_builder1_expr122_line_692 = f__annotation_introspector_4227_line_692\n.findObjectIdInfo(p_member_4279_line_692);\nObjectIdInfo info = pojoproperty_builder1_expr122_line_692;\ncom.fasterxml.jackson.databind.introspect.ObjectIdInfo v_info_4280_line_693 = info;\nboolean pojoproperty_builder1_expr123_line_693 = v_info_4280_line_693 != null;\nif (pojoproperty_builder1_expr123_line_693) {\ninfo = _annotationIntrospector.findObjectReferenceInfo(member, info);\n}",
        "begin_line": 1150,
        "end_line": 1160,
        "comment": "           to be accessed multiple times during processing.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.AsPropertyTypeDeserializer(AsPropertyTypeDeserializer src, BeanProperty property)#54",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
        "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.AsPropertyTypeDeserializer(AsPropertyTypeDeserializer src, BeanProperty property)",
        "snippet": "public AsPropertyTypeDeserializer(AsPropertyTypeDeserializer src, BeanProperty property) {\nsuper(src, property);\n_inclusion = src._inclusion;\n}",
        "begin_line": 54,
        "end_line": 57,
        "comment": "    \n     * @since 2.8\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember.annotations()#141",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember.annotations()",
        "snippet": "public Iterable<Annotation> annotations() {\nif (_annotations == null) {\nreturn Collections.emptyList();\n}",
        "begin_line": 141,
        "end_line": 144,
        "comment": "    \n     * Accessor for {@link TypeResolutionContext} that is used for resolving\n     * full generic type of this member.\n     * \n     * @since 2.7\n     *\n     * @deprecated Since 2.9\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.BeanDescription.BeanDescription(JavaType type)#36",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/BeanDescription.java",
        "class_name": "com.fasterxml.jackson.databind.BeanDescription",
        "signature": "com.fasterxml.jackson.databind.BeanDescription.BeanDescription(JavaType type)",
        "snippet": "protected BeanDescription(JavaType type) {\nint PROBE_START_LINE_37 = 37;\ncom.fasterxml.jackson.databind.JavaType p_type_124_line_37 = type;\nint PROBE_END_LINE_37 = 37;\n_type = p_type_124_line_37;\n}",
        "begin_line": 36,
        "end_line": 41,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.JsonDeserializer.isCachable()#224",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonDeserializer.java",
        "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
        "signature": "com.fasterxml.jackson.databind.JsonDeserializer.isCachable()",
        "snippet": "public boolean isCachable() { return false; }\n\n/**\n* Accessor that can be used to determine if this deserializer uses\n* another deserializer for actual deserialization, by delegating\n* calls. If so, will return immediate delegate (which itself may\n* delegate to further deserializers); otherwise will return null.\n*\n* @return Deserializer this deserializer delegates calls to, if null;\n*   null otherwise.\n*\n* @since 2.1\n*/\npublic JsonDeserializer<?> getDelegatee() {\nreturn null;\n}",
        "begin_line": 224,
        "end_line": 239,
        "comment": "    \n     * Method called to see if deserializer instance is cachable and\n     * usable for other properties of same type (type for which instance\n     * was created).\n     *<p>\n     * Note that cached instances are still resolved on per-property basis,\n     * if instance implements {@link com.fasterxml.jackson.databind.deser.ResolvableDeserializer}:\n     * cached instance is just as the base. This means that in most cases it is safe to\n     * cache instances; however, it only makes sense to cache instances\n     * if instantiation is expensive, or if instances are heavy-weight.\n     *<p>\n     * Default implementation returns false, to indicate that no caching\n     * is done.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.JsonDeserializer.getObjectIdReader()#355",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonDeserializer.java",
        "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
        "signature": "com.fasterxml.jackson.databind.JsonDeserializer.getObjectIdReader()",
        "snippet": "public ObjectIdReader getObjectIdReader() { return null; }\n\n/**\n* Method needed by {@link BeanDeserializerFactory} to properly link\n* managed- and back-reference pairs.\n*\n* @since 2.2 (was moved out of <code>BeanDeserializerBase</code>)\n*/\npublic SettableBeanProperty findBackReference(String refName)\n{\nthrow new IllegalArgumentException(\"Cannot handle managed/back reference '\"+refName\n+\"': type: value deserializer of type \"+getClass().getName()+\" does not support them\");\n}",
        "begin_line": 355,
        "end_line": 367,
        "comment": "    \n     * Accessor that can be used to check whether this deserializer\n     * is expecting to possibly get an Object Identifier value instead of full value\n     * serialization, and if so, should be able to resolve it to actual\n     * Object instance to return as deserialized value.\n     *<p>\n     * Default implementation returns null, as support cannot be implemented\n     * generically. Some standard deserializers (most notably\n     * {@link com.fasterxml.jackson.databind.deser.BeanDeserializer})\n     * do implement this feature, and may return reader instance, depending on exact\n     * configuration of instance (which is based on type, and referring property).\n     * \n     * @return ObjectIdReader used for resolving possible Object Identifier\n     *    value, instead of full value serialization, if deserializer can do that;\n     *    null if no Object Id is expected.\n     * \n     * @since 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase.ConcreteBeanPropertyBase(PropertyMetadata md)#45",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
        "signature": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase.ConcreteBeanPropertyBase(PropertyMetadata md)",
        "snippet": "protected ConcreteBeanPropertyBase(PropertyMetadata md) {\nint PROBE_START_LINE_45 = 45;\ncom.fasterxml.jackson.databind.PropertyMetadata p_md_3877_line_45 = md;\nboolean concrete_bean_property_base1_expr3_line_45 = p_md_3877_line_45 == null;\nboolean concrete_bean_property_base1_expr2_line_45 = (concrete_bean_property_base1_expr3_line_45);\ncom.fasterxml.jackson.databind.PropertyMetadata f_std_required_or_optional_969_line_45 = null;\nif (concrete_bean_property_base1_expr2_line_45) {\nf_std_required_or_optional_969_line_45 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;\n}",
        "begin_line": 45,
        "end_line": 53,
        "comment": "    \n     * @since 2.9\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase.isVirtual()#84",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
        "signature": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase.isVirtual()",
        "snippet": "public boolean isVirtual() { return false; }\n\n@Override\n@Deprecated\npublic final JsonFormat.Value findFormatOverrides(AnnotationIntrospector intr) {\nJsonFormat.Value f = null;\nif (intr != null) {\nAnnotatedMember member = getMember();\nif (member != null) {\nf = intr.findFormat(member);\n}",
        "begin_line": 84,
        "end_line": 94,
        "comment": "    \n     * @since 2.9\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider.NullsConstantProvider(Object nvl)#25",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/NullsConstantProvider.java",
        "class_name": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider",
        "signature": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider.NullsConstantProvider(Object nvl)",
        "snippet": "protected NullsConstantProvider(Object nvl) {\nint PROBE_START_LINE_26 = 26;\nObject p_nvl_2720_line_26 = nvl;\nint PROBE_END_LINE_26 = 26;\n_nullValue = p_nvl_2720_line_26;\nint PROBE_START_LINE_27 = 28;\nObject f__null_value_2721_line_27 = _nullValue;\nboolean nulls_constant_provider1_expr5_line_27 = f__null_value_2721_line_27 == null;\nboolean nulls_constant_provider1_expr4_line_27 = (nulls_constant_provider1_expr5_line_27);\ncom.fasterxml.jackson.databind.util.AccessPattern f_always_null_2723_line_27 = null;\nif (nulls_constant_provider1_expr4_line_27) {\nf_always_null_2723_line_27 = AccessPattern.ALWAYS_NULL;\n}",
        "begin_line": 25,
        "end_line": 37,
        "comment": "\n * Simple {@link NullValueProvider} that will always throw a\n * {@link InvalidNullException} when a null is encountered.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty.fixAccess(DeserializationConfig config)#127",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
        "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
        "signature": "com.fasterxml.jackson.databind.deser.impl.MethodProperty.fixAccess(DeserializationConfig config)",
        "snippet": "public void fixAccess(DeserializationConfig config) {\nint PROBE_START_LINE_93 = 94;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMethod f__annotated_2692_line_93 = _annotated;\nint PROBE_END_LINE_93 = 94;\nf__annotated_2692_line_93.fixAccess(\nconfig.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n}",
        "begin_line": 127,
        "end_line": 133,
        "comment": "    \n     * Constructor used for JDK Serialization when reading persisted object\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.SimpleMixInResolver(ClassIntrospector.MixInResolver overrides)#35",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
        "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.SimpleMixInResolver(ClassIntrospector.MixInResolver overrides)",
        "snippet": "public SimpleMixInResolver(ClassIntrospector.MixInResolver overrides) {\nint PROBE_START_LINE_36 = 36;\ncom.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver p_overrides_4370_line_36 = overrides;\nint PROBE_END_LINE_36 = 36;\n_overrides = p_overrides_4370_line_36;\n}",
        "begin_line": 35,
        "end_line": 40,
        "comment": "    \n     * Simple mix-in targets defined locally.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.propertyDef(int i)#101",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
        "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.propertyDef(int i)",
        "snippet": "public BeanPropertyDefinition propertyDef(int i) { int PROBE_START_LINE_42 = 42;\ncom.fasterxml.jackson.databind.deser.impl.CreatorCandidate.Param[] f__params_2587_line_42 = _params;\nint p_i_2599_line_42 = i;\ncom.fasterxml.jackson.databind.deser.impl.CreatorCandidate.Param creator_candidate1_expr14_line_42 = f__params_2587_line_42[p_i_2599_line_42];\ncom.fasterxml.jackson.databind.introspect.BeanPropertyDefinition creator_candidate1_expr13_line_42 = creator_candidate1_expr14_line_42.propDef;\nint PROBE_END_LINE_42 = 42;\nreturn creator_candidate1_expr13_line_42; }\n\npublic PropertyName paramName(int i) {\nBeanPropertyDefinition propDef = _params[i].propDef;\nif (propDef != null) {\nreturn propDef.getFullName();\n}",
        "begin_line": 101,
        "end_line": 113,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.UntypedObjectDeserializer(JavaType listType, JavaType mapType)#87",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
        "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
        "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.UntypedObjectDeserializer(JavaType listType, JavaType mapType)",
        "snippet": "public UntypedObjectDeserializer(JavaType listType, JavaType mapType) {\nsuper(Object.class);\nint PROBE_START_LINE_86 = 86;\ncom.fasterxml.jackson.databind.JavaType p_list_type_3221_line_86 = listType;\nint PROBE_END_LINE_86 = 86;\n_listType = p_list_type_3221_line_86;\nint PROBE_START_LINE_87 = 87;\ncom.fasterxml.jackson.databind.JavaType p_map_type_3222_line_87 = mapType;\nint PROBE_END_LINE_87 = 87;\n_mapType = p_map_type_3222_line_87;\n_nonMerging = false;\n}",
        "begin_line": 87,
        "end_line": 98,
        "comment": "    \n     * @deprecated Since 2.6 use variant takes type arguments\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.SerializerFactoryConfig()#43",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.SerializerFactoryConfig()",
        "snippet": "public SerializerFactoryConfig() {\nthis(null, null, null);\n}",
        "begin_line": 43,
        "end_line": 45,
        "comment": "    \n     * List of modifiers that can change the way {@link BeanSerializer} instances\n     * are configured and constructed.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams.AnnotatedWithParams(AnnotatedWithParams base, AnnotationMap[] paramAnnotations)#41",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams.AnnotatedWithParams(AnnotatedWithParams base, AnnotationMap[] paramAnnotations)",
        "snippet": "protected AnnotatedWithParams(AnnotatedWithParams base, AnnotationMap[] paramAnnotations) {\nsuper(base);\nint PROBE_START_LINE_40 = 40;\ncom.fasterxml.jackson.databind.introspect.AnnotationMap[] p_param_annotations_3652_line_40 = paramAnnotations;\nint PROBE_END_LINE_40 = 40;\n_paramAnnotations = p_param_annotations_3652_line_40;\n}",
        "begin_line": 41,
        "end_line": 47,
        "comment": "    \n     * @since 2.8.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.RootNameLookup.RootNameLookup()#21",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/RootNameLookup.java",
        "class_name": "com.fasterxml.jackson.databind.util.RootNameLookup",
        "signature": "com.fasterxml.jackson.databind.util.RootNameLookup.RootNameLookup()",
        "snippet": "public RootNameLookup() {\n_rootNames = new LRUMap<ClassKey,PropertyName>(20, 200);\n}",
        "begin_line": 21,
        "end_line": 23,
        "comment": "    \n     * For efficient operation, let's try to minimize number of times we\n     * need to introspect root element name to use.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.constructWithoutSuperTypes(Class<?> raw, MapperConfig<?> config)#232",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.constructWithoutSuperTypes(Class<?> raw, MapperConfig<?> config)",
        "snippet": "public static AnnotatedClass constructWithoutSuperTypes(Class<?> raw, MapperConfig<?> config) {\nreturn constructWithoutSuperTypes(raw, config, config);\n}",
        "begin_line": 232,
        "end_line": 234,
        "comment": "    \n     * @deprecated Since 2.9, use methods in {@link AnnotatedClassResolver} instead.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getModifiers()#274",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getModifiers()",
        "snippet": "public int getModifiers() { return _class.getModifiers(); }\n\n@Override\npublic String getName() { return _class.getName(); }\n\n@Override\npublic <A extends Annotation> A getAnnotation(Class<A> acls) {\nint PROBE_START_LINE_232 = 232;\ncom.fasterxml.jackson.databind.util.Annotations f__class_annotations_3347_line_232 = _classAnnotations;\nClass<A> p_acls_3364_line_232 = (Class<A>) (acls);\nA annotated_class1_expr8_line_232 = f__class_annotations_3347_line_232.get(p_acls_3364_line_232);\nint PROBE_END_LINE_232 = 232;\nreturn annotated_class1_expr8_line_232;\n}",
        "begin_line": 274,
        "end_line": 287,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getAnnotations()#330",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getAnnotations()",
        "snippet": "public Annotations getAnnotations() {\nint PROBE_START_LINE_274 = 274;\ncom.fasterxml.jackson.databind.util.Annotations f__class_annotations_3347_line_274 = _classAnnotations;\nint PROBE_END_LINE_274 = 274;\nreturn f__class_annotations_3347_line_274;\n}",
        "begin_line": 330,
        "end_line": 335,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getConstructors()#349",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getConstructors()",
        "snippet": "public List<AnnotatedConstructor> getConstructors() {\nint PROBE_START_LINE_286 = 286;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass.Creators annotated_class1_expr12_line_286 = _creators();\nList<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor> annotated_class1_expr11_line_286 = annotated_class1_expr12_line_286.constructors;\nint PROBE_END_LINE_286 = 286;\nreturn annotated_class1_expr11_line_286;\n}",
        "begin_line": 349,
        "end_line": 355,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getStaticMethods()#372",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getStaticMethods()",
        "snippet": "public List<AnnotatedMethod> getStaticMethods() {\nreturn getFactoryMethods();\n}",
        "begin_line": 372,
        "end_line": 374,
        "comment": "    \n     * @deprecated Since 2.9; use {@link #getFactoryMethods} instead.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.memberMethods()#376",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.memberMethods()",
        "snippet": "public Iterable<AnnotatedMethod> memberMethods() {\nint PROBE_START_LINE_305 = 305;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMethodMap annotated_class1_expr15_line_305 = _methods();\nint PROBE_END_LINE_305 = 305;\nreturn annotated_class1_expr15_line_305;\n}",
        "begin_line": 376,
        "end_line": 381,
        "comment": "    \n     * @deprecated Since 2.9; use {@link #getFactoryMethods} instead.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.noTypeInfoBuilder()#67",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
        "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.noTypeInfoBuilder()",
        "snippet": "public static StdTypeResolverBuilder noTypeInfoBuilder() {\nreturn new StdTypeResolverBuilder().init(JsonTypeInfo.Id.NONE, null);\n}",
        "begin_line": 67,
        "end_line": 69,
        "comment": "    \n     * @since 2.9\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.defineDefaultImpl(DeserializationConfig config, JavaType baseType)#199",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
        "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.defineDefaultImpl(DeserializationConfig config, JavaType baseType)",
        "snippet": "protected JavaType defineDefaultImpl(DeserializationConfig config, JavaType baseType) {\nJavaType defaultImpl;\nint PROBE_START_LINE_146 = 184;\nClass<?> f__default_impl_4627_line_146 = _defaultImpl;\nboolean std_type_resolver_builder1_expr13_line_146 = f__default_impl_4627_line_146 == null;\nint PROBE_END_LINE_146 = 184;\nif (std_type_resolver_builder1_expr13_line_146) {\nint PROBE_START_LINE_148 = 152;\ncom.fasterxml.jackson.databind.DeserializationConfig p_config_4625_line_148 = config;\ncom.fasterxml.jackson.databind.MapperFeature f_use_base_type_as_default_impl_4628_line_148 = MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL;\nboolean std_type_resolver_builder1_expr15_line_148 = p_config_4625_line_148\n.isEnabled(f_use_base_type_as_default_impl_4628_line_148);\nboolean std_type_resolver_builder1_expr16_line_148 = true;\nif (std_type_resolver_builder1_expr15_line_148) {\ncom.fasterxml.jackson.databind.JavaType p_base_type_4626_line_148 = baseType;\nboolean std_type_resolver_builder1_expr17_line_148 = p_base_type_4626_line_148.isAbstract();\nstd_type_resolver_builder1_expr16_line_148 = !std_type_resolver_builder1_expr17_line_148;\n}",
        "begin_line": 199,
        "end_line": 216,
        "comment": "\t\t First, method for converting type info to type id:",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.JsonMappingException.Reference(Object from)#92",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "signature": "com.fasterxml.jackson.databind.JsonMappingException.Reference(Object from)",
        "snippet": "public Reference(Object from) { _from = from; }\n\npublic Reference(Object from, String fieldName) {\nint PROBE_START_LINE_87 = 87;\nObject p_from_507_line_87 = from;\nint PROBE_END_LINE_87 = 87;\n_from = p_from_507_line_87;\nint PROBE_START_LINE_88 = 90;\nString p_field_name_508_line_88 = fieldName;\nboolean json_mapping_exception1_expr2_line_88 = p_field_name_508_line_88 == null;\nint PROBE_END_LINE_88 = 90;\nif (json_mapping_exception1_expr2_line_88) {\nthrow new NullPointerException(\"Cannot pass null fieldName\");\n}",
        "begin_line": 92,
        "end_line": 105,
        "comment": "        \n         * Default constructor for deserialization/sub-classing purposes\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.JsonMappingException.Reference(Object from, String fieldName)#94",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "signature": "com.fasterxml.jackson.databind.JsonMappingException.Reference(Object from, String fieldName)",
        "snippet": "public Reference(Object from, String fieldName) {\nint PROBE_START_LINE_87 = 87;\nObject p_from_507_line_87 = from;\nint PROBE_END_LINE_87 = 87;\n_from = p_from_507_line_87;\nint PROBE_START_LINE_88 = 90;\nString p_field_name_508_line_88 = fieldName;\nboolean json_mapping_exception1_expr2_line_88 = p_field_name_508_line_88 == null;\nint PROBE_END_LINE_88 = 90;\nif (json_mapping_exception1_expr2_line_88) {\nthrow new NullPointerException(\"Cannot pass null fieldName\");\n}",
        "begin_line": 94,
        "end_line": 105,
        "comment": "        \n         * Default constructor for deserialization/sub-classing purposes\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.JsonMappingException.setDescription(String d)#126",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "signature": "com.fasterxml.jackson.databind.JsonMappingException.setDescription(String d)",
        "snippet": "void setDescription(String d) { _desc = d; }\n\n/**\n* Object through which reference was resolved. Can be either\n* actual instance (usually the case for serialization), or\n* Class (usually the case for deserialization).\n*<p>\n* Note that this value must be `transient` to allow serializability (as\n* often such Object is NOT serializable; or, in case of `Class`, may\n* not available at the point of deserialization). As such will return\n* `null` if instance has been passed using JDK serialization.\n*/\n@JsonIgnore\npublic Object getFrom() { return _from; }\n\npublic String getFieldName() { return _fieldName; }\npublic int getIndex() { return _index; }\npublic String getDescription() {\nint PROBE_START_LINE_120 = 160;\nString f__desc_516_line_120 = _desc;\nboolean json_mapping_exception1_expr3_line_120 = f__desc_516_line_120 == null;\nint PROBE_END_LINE_120 = 160;\nif (json_mapping_exception1_expr3_line_120) {\nStringBuilder sb = new StringBuilder();\n\nint PROBE_START_LINE_123 = 147;\nObject f__from_509_line_123 = _from;\nboolean json_mapping_exception1_expr5_line_123 = f__from_509_line_123 == null;\nint PROBE_END_LINE_123 = 147;\nif (json_mapping_exception1_expr5_line_123) { // can this ever occur?\nsb.append(\"UNKNOWN\");\n} else {",
        "begin_line": 126,
        "end_line": 157,
        "comment": "         Setters to let Jackson deserialize instances, but not to be called from outside",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.JsonMappingException.from(JsonGenerator g, String msg, Throwable problem)#396",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "signature": "com.fasterxml.jackson.databind.JsonMappingException.from(JsonGenerator g, String msg, Throwable problem)",
        "snippet": "public static JsonMappingException from(JsonGenerator g, String msg, Throwable problem) {\nreturn new JsonMappingException(g, msg, problem);\n}",
        "begin_line": 396,
        "end_line": 398,
        "comment": "    \n     * @since 2.7\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer.StdScalarDeserializer(Class<?> vc)#18",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java",
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer",
        "signature": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer.StdScalarDeserializer(Class<?> vc)",
        "snippet": "protected StdScalarDeserializer(Class<?> vc) { super(vc); }\nprotected StdScalarDeserializer(JavaType valueType) { super(valueType); }\n\n// since 2.5\nprotected StdScalarDeserializer(StdScalarDeserializer<?> src) { super(src); }\n\n@Override\npublic Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\nreturn typeDeserializer.deserializeTypedFromScalar(p, ctxt);\n}",
        "begin_line": 18,
        "end_line": 27,
        "comment": "\n * Base class for deserializers that handle types that are serialized\n * as JSON scalars (non-structured, i.e. non-Object, non-Array, values).\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.ConfigOverride.empty()#94",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
        "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.empty()",
        "snippet": "public static ConfigOverride empty() {\nint PROBE_START_LINE_94 = 94;\ncom.fasterxml.jackson.databind.cfg.ConfigOverride.Empty f_instance_1252_line_94 = Empty.INSTANCE;\nint PROBE_END_LINE_94 = 94;\nreturn f_instance_1252_line_94;\n}",
        "begin_line": 94,
        "end_line": 99,
        "comment": "    \n     * Accessor for immutable \"empty\" instance that has no configuration overrides defined.\n     *\n     * @since 2.9\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.CreatorCollector(BeanDescription beanDesc, MapperConfig<?> config)#82",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.CreatorCollector(BeanDescription beanDesc, MapperConfig<?> config)",
        "snippet": "public CreatorCollector(BeanDescription beanDesc, MapperConfig<?> config) {\nint PROBE_START_LINE_78 = 78;\ncom.fasterxml.jackson.databind.BeanDescription p_bean_desc_2613_line_78 = beanDesc;\nint PROBE_END_LINE_78 = 78;\n_beanDesc = p_bean_desc_2613_line_78;\nint PROBE_START_LINE_79 = 79;\nMapperConfig<?> p_config_2614_line_79 = config;\nboolean creator_collector1_expr5_line_79 = p_config_2614_line_79.canOverrideAccessModifiers();\nint PROBE_END_LINE_79 = 79;\n_canFixAccess = creator_collector1_expr5_line_79;\nint PROBE_START_LINE_80 = 81;\nMapperConfig<?> p_config_2614_line_80 = config;\nboolean creator_collector1_expr6_line_80 = p_config_2614_line_80\n.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS);\nint PROBE_END_LINE_80 = 81;\n_forceAccess = creator_collector1_expr6_line_80;\n}",
        "begin_line": 82,
        "end_line": 98,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.addAll(Map<String, JsonSerializer<?>> allDeserializers)#27",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.addAll(Map<String, JsonSerializer<?>> allDeserializers)",
        "snippet": "public static void addAll(Map<String, JsonSerializer<?>> allDeserializers) {\nint PROBE_START_LINE_26 = 26;\nMap<String, JsonSerializer<?>> p_all_deserializers_5091_line_26 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nString number_serializers1_expr2_line_26 = Integer.class.getName();\nint PROBE_END_LINE_26 = 26;\np_all_deserializers_5091_line_26.put(number_serializers1_expr2_line_26, new IntegerSerializer(Integer.class));\nint PROBE_START_LINE_27 = 27;\nMap<String, JsonSerializer<?>> p_all_deserializers_5091_line_27 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nClass<Integer> f_type_3781_line_27 = Integer.TYPE;\nString number_serializers1_expr7_line_27 = f_type_3781_line_27.getName();\nint PROBE_END_LINE_27 = 27;\np_all_deserializers_5091_line_27.put(number_serializers1_expr7_line_27, new IntegerSerializer(Integer.TYPE));\nint PROBE_START_LINE_28 = 28;\nMap<String, JsonSerializer<?>> p_all_deserializers_5091_line_28 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nString number_serializers1_expr10_line_28 = Long.class.getName();\nint PROBE_END_LINE_28 = 28;\np_all_deserializers_5091_line_28.put(number_serializers1_expr10_line_28, new LongSerializer(Long.class));\nint PROBE_START_LINE_29 = 29;\nMap<String, JsonSerializer<?>> p_all_deserializers_5091_line_29 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nClass<Long> f_type_3783_line_29 = Long.TYPE;\nString number_serializers1_expr15_line_29 = f_type_3783_line_29.getName();\nint PROBE_END_LINE_29 = 29;\np_all_deserializers_5091_line_29.put(number_serializers1_expr15_line_29, new LongSerializer(Long.TYPE));\n\nint PROBE_START_LINE_31 = 31;\nMap<String, JsonSerializer<?>> p_all_deserializers_5091_line_31 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nString number_serializers1_expr18_line_31 = Byte.class.getName();\ncom.fasterxml.jackson.databind.ser.std.NumberSerializers.IntLikeSerializer f_instance_5092_line_31 = IntLikeSerializer.instance;\nint PROBE_END_LINE_31 = 31;\np_all_deserializers_5091_line_31.put(number_serializers1_expr18_line_31, f_instance_5092_line_31);\nint PROBE_START_LINE_32 = 32;\nMap<String, JsonSerializer<?>> p_all_deserializers_5091_line_32 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nClass<Byte> f_type_5093_line_32 = Byte.TYPE;\nString number_serializers1_expr21_line_32 = f_type_5093_line_32.getName();\ncom.fasterxml.jackson.databind.ser.std.NumberSerializers.IntLikeSerializer f_instance_5092_line_32 = IntLikeSerializer.instance;\nint PROBE_END_LINE_32 = 32;\np_all_deserializers_5091_line_32.put(number_serializers1_expr21_line_32, f_instance_5092_line_32);\nint PROBE_START_LINE_33 = 33;\nMap<String, JsonSerializer<?>> p_all_deserializers_5091_line_33 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nString number_serializers1_expr23_line_33 = Short.class.getName();\ncom.fasterxml.jackson.databind.ser.std.NumberSerializers.ShortSerializer f_instance_5094_line_33 = ShortSerializer.instance;\nint PROBE_END_LINE_33 = 33;\np_all_deserializers_5091_line_33.put(number_serializers1_expr23_line_33, f_instance_5094_line_33);\nint PROBE_START_LINE_34 = 34;\nMap<String, JsonSerializer<?>> p_all_deserializers_5091_line_34 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nClass<Short> f_type_5095_line_34 = Short.TYPE;\nString number_serializers1_expr26_line_34 = f_type_5095_line_34.getName();\ncom.fasterxml.jackson.databind.ser.std.NumberSerializers.ShortSerializer f_instance_5094_line_34 = ShortSerializer.instance;\nint PROBE_END_LINE_34 = 34;\np_all_deserializers_5091_line_34.put(number_serializers1_expr26_line_34, f_instance_5094_line_34);\n\nint PROBE_START_LINE_37 = 37;\nMap<String, JsonSerializer<?>> p_all_deserializers_5091_line_37 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nString number_serializers1_expr28_line_37 = Double.class.getName();\nint PROBE_END_LINE_37 = 37;\n// Numbers, limited length floating point\np_all_deserializers_5091_line_37.put(number_serializers1_expr28_line_37, new DoubleSerializer(Double.class));\nint PROBE_START_LINE_38 = 38;\nMap<String, JsonSerializer<?>> p_all_deserializers_5091_line_38 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nClass<Double> f_type_5096_line_38 = Double.TYPE;\nString number_serializers1_expr33_line_38 = f_type_5096_line_38.getName();\nint PROBE_END_LINE_38 = 38;\np_all_deserializers_5091_line_38.put(number_serializers1_expr33_line_38, new DoubleSerializer(Double.TYPE));\nint PROBE_START_LINE_39 = 39;\nMap<String, JsonSerializer<?>> p_all_deserializers_5091_line_39 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nString number_serializers1_expr36_line_39 = Float.class.getName();\ncom.fasterxml.jackson.databind.ser.std.NumberSerializers.FloatSerializer f_instance_5097_line_39 = FloatSerializer.instance;\nint PROBE_END_LINE_39 = 39;\np_all_deserializers_5091_line_39.put(number_serializers1_expr36_line_39, f_instance_5097_line_39);\nint PROBE_START_LINE_40 = 40;\nMap<String, JsonSerializer<?>> p_all_deserializers_5091_line_40 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nClass<Float> f_type_5098_line_40 = Float.TYPE;\nString number_serializers1_expr39_line_40 = f_type_5098_line_40.getName();\ncom.fasterxml.jackson.databind.ser.std.NumberSerializers.FloatSerializer f_instance_5097_line_40 = FloatSerializer.instance;\nint PROBE_END_LINE_40 = 40;\np_all_deserializers_5091_line_40.put(number_serializers1_expr39_line_40, f_instance_5097_line_40);\n}",
        "begin_line": 27,
        "end_line": 103,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.MapperFeature(boolean defaultState)#498",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.MapperFeature(boolean defaultState)",
        "snippet": "private MapperFeature(boolean defaultState) {\nint PROBE_START_LINE_499 = 499;\nboolean p_default_state_596_line_499 = defaultState;\nint PROBE_END_LINE_499 = 499;\n_defaultState = p_default_state_596_line_499;\nint PROBE_START_LINE_500 = 500;\nint mapper_feature1_expr3_line_500 = ordinal();\nint mapper_feature1_expr2_line_500 = 1 << mapper_feature1_expr3_line_500;\nint mapper_feature1_expr1_line_500 = (mapper_feature1_expr2_line_500);\nint PROBE_END_LINE_500 = 500;\n_mask = mapper_feature1_expr1_line_500;\n}",
        "begin_line": 498,
        "end_line": 509,
        "comment": "    \n     * Setting that determines what happens if an attempt is made to explicitly\n     * \"merge\" value of a property, where value does not support merging; either\n     * merging is skipped and new value is created (<code>true</code>) or\n     * an exception is thrown (false).\n     *<p>\n     * Feature is disabled by default since non-mergeable property types are ignored\n     * even if defaults call for merging, and usually explicit per-type or per-property\n     * settings for such types should result in an exception.\n     *\n     * @since 2.9\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.SerializerCache.SerializerCache()#42",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/SerializerCache.java",
        "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
        "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.SerializerCache()",
        "snippet": "public SerializerCache() { }\n\n/**\n* Method that can be called to get a read-only instance populated from the\n* most recent version of the shared lookup Map.\n*/\npublic ReadOnlyClassToSerializerMap getReadOnlyLookupMap()\n{\nReadOnlyClassToSerializerMap m = _readOnlyMap.get();\nif (m != null) {\nreturn m;\n}",
        "begin_line": 42,
        "end_line": 53,
        "comment": "    \n     * Most recent read-only instance, created from _sharedMap, if any.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings()#123",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "signature": "com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings()",
        "snippet": "public static TypeBindings emptyBindings() {\nint PROBE_START_LINE_68 = 68;\ncom.fasterxml.jackson.databind.type.TypeBindings f_empty_5523_line_68 = EMPTY;\nint PROBE_END_LINE_68 = 68;\nreturn f_empty_5523_line_68;\n}",
        "begin_line": 123,
        "end_line": 128,
        "comment": "    ********************************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.Java7SupportImpl()#22",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
        "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
        "signature": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.Java7SupportImpl()",
        "snippet": "public Java7SupportImpl() {\n// Trigger loading of annotations that only JDK 7 has...\nClass<?> cls = Transient.class;\ncls = ConstructorProperties.class;\nint PROBE_START_LINE_26 = 26;\nClass<?> v_cls_3296_line_26 = cls;\nint PROBE_END_LINE_26 = 26;\n_bogus = v_cls_3296_line_26;\n}",
        "begin_line": 22,
        "end_line": 30,
        "comment": "\n * @since 2.8\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.hasCreatorAnnotation(Annotated a)#75",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
        "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
        "signature": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.hasCreatorAnnotation(Annotated a)",
        "snippet": "public Boolean hasCreatorAnnotation(Annotated a) {\nint PROBE_START_LINE_61 = 61;\ncom.fasterxml.jackson.databind.introspect.Annotated p_a_3302_line_61 = a;\nConstructorProperties java7_support_impl1_expr7_line_61 = p_a_3302_line_61\n.getAnnotation(ConstructorProperties.class);\nint PROBE_END_LINE_61 = 61;\nConstructorProperties props = java7_support_impl1_expr7_line_61;\nint PROBE_START_LINE_64 = 66;\njava.beans.ConstructorProperties v_props_3303_line_64 = props;\nboolean java7_support_impl1_expr9_line_64 = v_props_3303_line_64 != null;\nint PROBE_END_LINE_64 = 66;\n// 08-Nov-2015, tatu: One possible check would be to ensure there is at least\n//    one name iff constructor has arguments. But seems unnecessary for now.\nif (java7_support_impl1_expr9_line_64) {\nreturn Boolean.TRUE;\n}",
        "begin_line": 75,
        "end_line": 90,
        "comment": "         Trigger loading of annotations that only JDK 7 has...",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.AnnotationCollector(Object d)#27",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.AnnotationCollector(Object d)",
        "snippet": "protected AnnotationCollector(Object d) {\nint PROBE_START_LINE_26 = 26;\nObject p_d_3665_line_26 = d;\nint PROBE_END_LINE_26 = 26;\n_data = p_d_3665_line_26;\n}",
        "begin_line": 27,
        "end_line": 32,
        "comment": "    \n     * Optional data to carry along\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.addOrOverride(Annotation ann)#96",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.addOrOverride(Annotation ann)",
        "snippet": "public AnnotationCollector addOrOverride(Annotation ann) {\nint PROBE_START_LINE_83 = 83;\nObject f__data_3666_line_83 = _data;\njava.lang.annotation.Annotation p_ann_3673_line_83 = ann;\nClass<? extends java.lang.annotation.Annotation> annotation_collector1_expr7_line_83 = p_ann_3673_line_83\n.annotationType();\nint PROBE_END_LINE_83 = 83;\nreturn new OneCollector(f__data_3666_line_83, annotation_collector1_expr7_line_83, ann);\n}",
        "begin_line": 96,
        "end_line": 104,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.isPresent(Annotation ann)#136",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.isPresent(Annotation ann)",
        "snippet": "public boolean isPresent(Annotation ann) {\nint PROBE_START_LINE_111 = 111;\njava.lang.annotation.Annotation p_ann_3679_line_111 = ann;\nClass<? extends java.lang.annotation.Annotation> annotation_collector1_expr10_line_111 = p_ann_3679_line_111\n.annotationType();\nClass<?> f__type_3677_line_111 = _type;\nboolean annotation_collector1_expr9_line_111 = annotation_collector1_expr10_line_111 == f__type_3677_line_111;\nint PROBE_END_LINE_111 = 111;\nreturn annotation_collector1_expr9_line_111;\n}",
        "begin_line": 136,
        "end_line": 145,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.has(Class<?> cls)#279",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.has(Class<?> cls)",
        "snippet": "public boolean has(Class<?> cls) {\nreturn false;\n}",
        "begin_line": 279,
        "end_line": 281,
        "comment": "    \n     * Immutable implementation for case where no annotations are associated with\n     * an annotatable entity.\n     *\n     * @since 2.9\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.ClassUtil.nameOf(Named named)#923",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "signature": "com.fasterxml.jackson.databind.util.ClassUtil.nameOf(Named named)",
        "snippet": "public static String nameOf(Named named) {\nif (named == null) {\nreturn \"[null]\";\n}",
        "begin_line": 923,
        "end_line": 926,
        "comment": "    \n     * Returns either backtick-quoted `named.getName()` (if `named` not null),\n     * or \"[null]\" if `named` is null.\n     *\n     * @since 2.9\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.ContextAttributes.getEmpty()#24",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
        "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.getEmpty()",
        "snippet": "public static ContextAttributes getEmpty() {\nint PROBE_START_LINE_24 = 24;\ncom.fasterxml.jackson.databind.cfg.ContextAttributes context_attributes1_expr1_line_24 = Impl.getEmpty();\nint PROBE_END_LINE_24 = 24;\nreturn context_attributes1_expr1_line_24;\n}",
        "begin_line": 24,
        "end_line": 29,
        "comment": "\n * Helper class used for storing and accessing per-call attributes.\n * Storage is two-layered: at higher precedence, we have actual per-call\n * attributes; and at lower precedence, default attributes that may be\n * defined for Object readers and writers.\n *<p>\n * Note that the way mutability is implemented differs between kinds\n * of attributes, to account for thread-safety: per-call attributes\n * are handled assuming that instances are never shared, whereas\n * changes to per-reader/per-writer attributes are made assuming\n * sharing, by creating new copies instead of modifying state.\n * This allows sharing of default values without per-call copying, but\n * requires two-level lookup on access.\n * \n * @since 2.3\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(Class<T> t)#58",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(Class<T> t)",
        "snippet": "protected StdSerializer(Class<T> t) {\nint PROBE_START_LINE_59 = 59;\nClass<T> p_t_5178_line_59 = (Class<T>) (t);\nint PROBE_END_LINE_59 = 59;\n_handledType = p_t_5178_line_59;\n}",
        "begin_line": 58,
        "end_line": 63,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.defaultInstance()#178",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
        "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.defaultInstance()",
        "snippet": "public static Std defaultInstance() { int PROBE_START_LINE_178 = 178;\ncom.fasterxml.jackson.databind.introspect.VisibilityChecker.Std f_default_4407_line_178 = DEFAULT;\nint PROBE_END_LINE_178 = 178;\nreturn f_default_4407_line_178; }\n\n/**\n* Constructor used for building instance that has minumum visibility\n* levels as indicated by given annotation instance\n*\n* @param ann Annotations to use for determining minimum visibility levels\n*/\npublic Std(JsonAutoDetect ann)\n{\n// let's combine checks for enabled/disabled, with minimum level checks:\n_getterMinLevel = ann.getterVisibility();\n_isGetterMinLevel = ann.isGetterVisibility();\n_setterMinLevel = ann.setterVisibility();\n_creatorMinLevel = ann.creatorVisibility();\n_fieldMinLevel = ann.fieldVisibility();\n}",
        "begin_line": 178,
        "end_line": 197,
        "comment": "        \n         * This is the canonical base instance, configured with default\n         * visibility values\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.BaseSettings.with(Locale l)#316",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.with(Locale l)",
        "snippet": "public BaseSettings with(Locale l) {\nif (_locale == l) {\nreturn this;\n}",
        "begin_line": 316,
        "end_line": 319,
        "comment": "           (but only if!) it has been set explicitly.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.setSerializationInclusion(JsonInclude.Include incl)#1491",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.setSerializationInclusion(JsonInclude.Include incl)",
        "snippet": "public ObjectMapper setSerializationInclusion(JsonInclude.Include incl) {\nsetPropertyInclusion(JsonInclude.Value.construct(incl, incl));\nreturn this;\n}",
        "begin_line": 1491,
        "end_line": 1494,
        "comment": "    \n     * Convenience method, equivalent to calling:\n     *<pre>\n     *  setPropertyInclusion(JsonInclude.Value.construct(incl, incl));\n     *</pre>\n     *<p>\n     * NOTE: behavior differs slightly from 2.8, where second argument was\n     * implied to be <code>JsonInclude.Include.ALWAYS</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultSetterInfo(JsonSetter.Value v)#1537",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultSetterInfo(JsonSetter.Value v)",
        "snippet": "public ObjectMapper setDefaultSetterInfo(JsonSetter.Value v) {\n_configOverrides.setDefaultSetterInfo(v);\nreturn this;\n}",
        "begin_line": 1537,
        "end_line": 1540,
        "comment": "    \n     * Method for setting default Setter configuration, regarding things like\n     * merging, null-handling; used for properties for which there are\n     * no per-type or per-property overrides (via annotations or config overrides).\n     *\n     * @since 2.9\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.CalendarSerializer()#23",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.CalendarSerializer()",
        "snippet": "public CalendarSerializer() { this(null, null); }\n\npublic CalendarSerializer(Boolean useTimestamp, DateFormat customFormat) {\nsuper(Calendar.class, useTimestamp, customFormat);\n}",
        "begin_line": 23,
        "end_line": 27,
        "comment": "\n * Standard serializer for {@link java.util.Calendar}.\n * As with other time/date types, is configurable to produce timestamps\n * (standard Java 64-bit timestamp) or textual formats (usually ISO-8601).\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.createPrimordial(Class<?> raw)#160",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.createPrimordial(Class<?> raw)",
        "snippet": "static AnnotatedClass createPrimordial(Class<?> raw) {\nint PROBE_START_LINE_104 = 104;\nClass<?> p_raw_3411_line_104 = raw;\nint PROBE_END_LINE_104 = 104;\nreturn new AnnotatedClass(p_raw_3411_line_104);\n}",
        "begin_line": 160,
        "end_line": 165,
        "comment": "    \n     * Internal helper method used for resolving a small set of \"primordial\" types for which\n     * we do not accept any annotation information or overrides. \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.CollectorBase.CollectorBase(AnnotationIntrospector intr)#18",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/CollectorBase.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.CollectorBase",
        "signature": "com.fasterxml.jackson.databind.introspect.CollectorBase.CollectorBase(AnnotationIntrospector intr)",
        "snippet": "protected CollectorBase(AnnotationIntrospector intr) {\nint PROBE_START_LINE_19 = 19;\ncom.fasterxml.jackson.databind.AnnotationIntrospector p_intr_3860_line_19 = intr;\nint PROBE_END_LINE_19 = 19;\n_intr = p_intr_3860_line_19;\n}",
        "begin_line": 18,
        "end_line": 23,
        "comment": " @since 2.9",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.SerializationFeature(boolean defaultState)#428",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.SerializationFeature(boolean defaultState)",
        "snippet": "private SerializationFeature(boolean defaultState) {\nint PROBE_START_LINE_429 = 429;\nboolean p_default_state_1096_line_429 = defaultState;\nint PROBE_END_LINE_429 = 429;\n_defaultState = p_default_state_1096_line_429;\nint PROBE_START_LINE_430 = 430;\nint serialization_feature1_expr3_line_430 = ordinal();\nint serialization_feature1_expr2_line_430 = 1 << serialization_feature1_expr3_line_430;\nint serialization_feature1_expr1_line_430 = (serialization_feature1_expr2_line_430);\nint PROBE_END_LINE_430 = 430;\n_mask = serialization_feature1_expr1_line_430;\n}",
        "begin_line": 428,
        "end_line": 439,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    }
]