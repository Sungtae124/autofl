[
    {
        "name": "org.apache.commons.csv.CSVFormat.newFormat(final char delimiter)#314",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-11/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.newFormat(final char delimiter)",
        "snippet": "public static CSVFormat newFormat(final char delimiter) {\nreturn new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, false, false);\n}",
        "begin_line": 314,
        "end_line": 316,
        "comment": "    \n     * Creates a new CSV format with the specified delimiter.\n     *\n     * @param delimiter\n     *            the char used for value separation, must not be a line break character\n     * @return a new CSV format.\n     * @throws IllegalArgumentException if the delimiter is a line break character\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.isEscaping()#700",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-11/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.isEscaping()",
        "snippet": "public boolean isEscaping() {\nreturn escape != null;\n}",
        "begin_line": 700,
        "end_line": 702,
        "comment": "    \n     * Returns whether escape are being processed.\n     *\n     * @return {@code true} if escapes are processed\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.toString()#760",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-11/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.toString()",
        "snippet": "public String toString() {\nfinal StringBuilder sb = new StringBuilder();\nsb.append(\"Delimiter=<\").append(delimiter).append('>');\nif (isEscaping()) {\nsb.append(' ');\nsb.append(\"Escape=<\").append(escape).append('>');\n}",
        "begin_line": 760,
        "end_line": 766,
        "comment": "    \n     * Prints to the specified output.\n     *\n     * <p>\n     * See also {@link CSVPrinter}.\n     * </p>\n     *\n     * @param out\n     *        the output\n     * @return a printer to an output\n     * @throws IOException\n     *         thrown if the optional header cannot be printed.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.isClosed()#500",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-11/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.isClosed()",
        "snippet": "public boolean isClosed() {\nreturn this.lexer.isClosed();\n}",
        "begin_line": 500,
        "end_line": 502,
        "comment": "\t\t\t build the name to index mappings",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    }
]