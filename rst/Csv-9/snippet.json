[
    {
        "name": "org.apache.commons.csv.CSVFormat.newFormat(final char delimiter)#313",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-9/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.newFormat(final char delimiter)",
        "snippet": "public static CSVFormat newFormat(final char delimiter) {\nint PROBE_START_LINE_267 = 267;\nchar p_delimiter_15_line_267 = delimiter;\nint PROBE_END_LINE_267 = 267;\nreturn new CSVFormat(p_delimiter_15_line_267, null, null, null, null, false, false, null, null, null, false);\n}",
        "begin_line": 313,
        "end_line": 318,
        "comment": "    \n     * Creates a new CSV format with the specified delimiter.\n     *\n     * @param delimiter\n     *            the char used for value separation, must not be a line break character\n     * @return a new CSV format.\n     * @throws IllegalArgumentException if the delimiter is a line break character\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.toString()#717",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-9/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.toString()",
        "snippet": "public String toString() {\nfinal StringBuilder sb = new StringBuilder();\nsb.append(\"Delimiter=<\").append(delimiter).append('>');\nif (isEscaping()) {\nsb.append(' ');\nsb.append(\"Escape=<\").append(escape).append('>');\n}",
        "begin_line": 717,
        "end_line": 723,
        "comment": "    \n     * Parses the specified content.\n     *\n     * <p>\n     * See also the various static parse methods on {@link CSVParser}.\n     * </p>\n     *\n     * @param in\n     *            the input stream\n     * @return a parser over a stream of {@link CSVRecord}s.\n     * @throws IOException\n     *             If an I/O error occurs\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.iterator()#464",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-9/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.iterator()",
        "snippet": "public Iterator<CSVRecord> iterator() {\nreturn new Iterator<CSVRecord>() {\nprivate CSVRecord current;\n\nprivate CSVRecord getNextRecord() {\ntry {\nint PROBE_START_LINE_409 = 409;\norg.apache.commons.csv.CSVRecord csvparser1_expr35_line_409 = CSVParser.this.nextRecord();\nint PROBE_END_LINE_409 = 409;\nreturn csvparser1_expr35_line_409;\n} catch (final IOException e) {",
        "begin_line": 464,
        "end_line": 474,
        "comment": "    \n     * Returns an iterator on the records.\n     *\n     * <p>IOExceptions occurring during the iteration are wrapped in a\n     * RuntimeException.\n     * If the parser is closed a call to {@code next()} will throw a\n     * NoSuchElementException.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.getNextRecord()#468",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-9/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.getNextRecord()",
        "snippet": "private CSVRecord getNextRecord() {\ntry {\nint PROBE_START_LINE_409 = 409;\norg.apache.commons.csv.CSVRecord csvparser1_expr35_line_409 = CSVParser.this.nextRecord();\nint PROBE_END_LINE_409 = 409;\nreturn csvparser1_expr35_line_409;\n} catch (final IOException e) {",
        "begin_line": 468,
        "end_line": 474,
        "comment": "    \n     * Returns an iterator on the records.\n     *\n     * <p>IOExceptions occurring during the iteration are wrapped in a\n     * RuntimeException.\n     * If the parser is closed a call to {@code next()} will throw a\n     * NoSuchElementException.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.next()#491",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-9/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.next()",
        "snippet": "public CSVRecord next() {\nint PROBE_START_LINE_428 = 430;\nboolean csvparser1_expr37_line_428 = CSVParser.this.isClosed();\nint PROBE_END_LINE_428 = 430;\nif (csvparser1_expr37_line_428) {\nthrow new NoSuchElementException(\"CSVParser has been closed\");\n}",
        "begin_line": 491,
        "end_line": 497,
        "comment": "                     TODO: This is not great, throw an ISE instead?",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    }
]