[
    {
        "name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.ClassIntrospector()#48",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.ClassIntrospector()",
        "snippet": "protected ClassIntrospector() { }\n\n/*\n/**********************************************************\n/* Public API: factory methods\n/**********************************************************\n*/\n\n/**\n* Factory method that constructs an introspector that has all\n* information needed for serialization purposes.\n*/\npublic abstract BeanDescription forSerialization(SerializationConfig cfg,\nJavaType type, MixInResolver r);\n\n/**\n* Factory method that constructs an introspector that has all\n* information needed for deserialization purposes.\n*/\npublic abstract BeanDescription forDeserialization(DeserializationConfig cfg,\nJavaType type, MixInResolver r);\n\n/**\n* Factory method that constructs an introspector that has all\n* information needed for constructing deserializers that use\n* intermediate Builder objects.\n*/\npublic abstract BeanDescription forDeserializationWithBuilder(DeserializationConfig cfg,\nJavaType type, MixInResolver r);\n\n/**\n* Factory method that constructs an introspector that has\n* information necessary for creating instances of given\n* class (\"creator\"), as well as class annotations, but\n* no information on member methods\n*/\npublic abstract BeanDescription forCreation(DeserializationConfig cfg, JavaType type,\nMixInResolver r);\n\n/**\n* Factory method that constructs an introspector that only has\n* information regarding annotations class itself (or its supertypes) has,\n* but nothing on methods or constructors.\n*/\npublic abstract BeanDescription forClassAnnotations(MapperConfig<?> cfg, JavaType type,\nMixInResolver r);\n\n/**\n* Factory method that constructs an introspector that only has\n* information regarding annotations class itself has (but NOT including\n* its supertypes), but nothing on methods or constructors.\n*/\npublic abstract BeanDescription forDirectClassAnnotations(MapperConfig<?> cfg, JavaType type,\nMixInResolver r);\n}",
        "begin_line": 48,
        "end_line": 102,
        "comment": "        \n         * Method called to create a new, non-shared copy, to be used by different\n         * <code>ObjectMapper</code> instance, and one that should not be connected\n         * to this instance, if resolver has mutable state.\n         * If resolver is immutable may simply return `this`.\n         * \n         * @since 2.6\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NullSerializer.NullSerializer()#26",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NullSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NullSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.NullSerializer.NullSerializer()",
        "snippet": "private NullSerializer() { super(Object.class); }\n\n@Override\npublic void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\ngen.writeNull();\n}",
        "begin_line": 26,
        "end_line": 31,
        "comment": "\n * This is a simple dummy serializer that will just output literal\n * JSON null value whenever serialization is requested.\n * Used as the default \"null serializer\" (which is used for serializing\n * null object references unless overridden), as well as for some\n * more exotic types (java.lang.Void).\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.StdSubtypeResolver()#23",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
        "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.StdSubtypeResolver()",
        "snippet": "public StdSubtypeResolver() { }\n\n/*\n/**********************************************************\n/* Subtype registration\n/**********************************************************\n*/\n\n@Override\npublic void registerSubtypes(NamedType... types) {\nif (_registeredSubtypes == null) {\n_registeredSubtypes = new LinkedHashSet<NamedType>();\n}",
        "begin_line": 23,
        "end_line": 35,
        "comment": "\n * Standard {@link SubtypeResolver} implementation.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.DeserializationFeature(boolean defaultState)#412",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.DeserializationFeature(boolean defaultState)",
        "snippet": "private DeserializationFeature(boolean defaultState) {\nint PROBE_START_LINE_413 = 413;\nboolean p_default_state_338_line_413 = defaultState;\nint PROBE_END_LINE_413 = 413;\n_defaultState = p_default_state_338_line_413;\nint PROBE_START_LINE_414 = 414;\nint deserialization_feature1_expr3_line_414 = ordinal();\nint deserialization_feature1_expr2_line_414 = 1 << deserialization_feature1_expr3_line_414;\nint deserialization_feature1_expr1_line_414 = (deserialization_feature1_expr2_line_414);\nint PROBE_END_LINE_414 = 414;\n_mask = deserialization_feature1_expr1_line_414;\n}",
        "begin_line": 412,
        "end_line": 423,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider()#57",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
        "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider()",
        "snippet": "protected DefaultSerializerProvider() { super(); }\n\nprotected DefaultSerializerProvider(SerializerProvider src,\nSerializationConfig config,SerializerFactory f) {\nsuper(src, config, f);\n}",
        "begin_line": 57,
        "end_line": 62,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl()#591",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
        "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl()",
        "snippet": "public Impl() { super(); }\npublic Impl(Impl src) { super(src); }\n\nprotected Impl(SerializerProvider src, SerializationConfig config,SerializerFactory f) {\nsuper(src, config, f);\n}",
        "begin_line": 591,
        "end_line": 596,
        "comment": "    \n     * Concrete implementation that defines factory method(s),\n     * defined as final.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.BeanDescription.BeanDescription(JavaType type)#42",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/BeanDescription.java",
        "class_name": "com.fasterxml.jackson.databind.BeanDescription",
        "signature": "com.fasterxml.jackson.databind.BeanDescription.BeanDescription(JavaType type)",
        "snippet": "protected BeanDescription(JavaType type) {\nint PROBE_START_LINE_43 = 43;\ncom.fasterxml.jackson.databind.JavaType p_type_110_line_43 = type;\nint PROBE_END_LINE_43 = 43;\n_type = p_type_110_line_43;\n}",
        "begin_line": 42,
        "end_line": 47,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.SimpleMixInResolver(ClassIntrospector.MixInResolver overrides)#35",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
        "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.SimpleMixInResolver(ClassIntrospector.MixInResolver overrides)",
        "snippet": "public SimpleMixInResolver(ClassIntrospector.MixInResolver overrides) {\nint PROBE_START_LINE_36 = 36;\ncom.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver p_overrides_1815_line_36 = overrides;\nint PROBE_END_LINE_36 = 36;\n_overrides = p_overrides_1815_line_36;\n}",
        "begin_line": 35,
        "end_line": 40,
        "comment": "    \n     * Simple mix-in targets defined locally.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.SerializerFactoryConfig()#43",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.SerializerFactoryConfig()",
        "snippet": "public SerializerFactoryConfig() {\nthis(null, null, null);\n}",
        "begin_line": 43,
        "end_line": 45,
        "comment": "    \n     * List of modifiers that can change the way {@link BeanSerializer} instances\n     * are configured and constructed.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.RootNameLookup.RootNameLookup()#21",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/RootNameLookup.java",
        "class_name": "com.fasterxml.jackson.databind.util.RootNameLookup",
        "signature": "com.fasterxml.jackson.databind.util.RootNameLookup.RootNameLookup()",
        "snippet": "public RootNameLookup() {\n_rootNames = new LRUMap<ClassKey,PropertyName>(20, 200);\n}",
        "begin_line": 21,
        "end_line": 23,
        "comment": "    \n     * For efficient operation, let's try to minimize number of times we\n     * need to introspect root element name to use.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.ToStringSerializer()#38",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.ToStringSerializer()",
        "snippet": "public ToStringSerializer() { super(Object.class); }\n\n/**\n* Sometimes it may actually make sense to retain actual handled type, so...\n*\n* @since 2.5\n*/\npublic ToStringSerializer(Class<?> handledType) {\nsuper(handledType, false);\n}",
        "begin_line": 38,
        "end_line": 47,
        "comment": "    \n     *<p>\n     * Note: usually you should NOT create new instances, but instead use\n     * {@link #instance} which is stateless and fully thread-safe. However,\n     * there are cases where constructor is needed; for example,\n     * when using explicit serializer annotations like\n     * {@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeParser.TypeParser(TypeFactory f)#18",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeParser.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
        "signature": "com.fasterxml.jackson.databind.type.TypeParser.TypeParser(TypeFactory f)",
        "snippet": "public TypeParser(TypeFactory f) {\nint PROBE_START_LINE_19 = 19;\ncom.fasterxml.jackson.databind.type.TypeFactory p_f_2752_line_19 = f;\nint PROBE_END_LINE_19 = 19;\n_factory = p_f_2752_line_19;\n}",
        "begin_line": 18,
        "end_line": 23,
        "comment": "\n * Simple recursive-descent parser for parsing canonical {@link JavaType}\n * representations and constructing type instances.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.addAll(Map<String, JsonSerializer<?>> allDeserializers)#29",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.addAll(Map<String, JsonSerializer<?>> allDeserializers)",
        "snippet": "public static void addAll(Map<String, JsonSerializer<?>> allDeserializers) {\nfinal JsonSerializer<?> intS = new IntegerSerializer();\nint PROBE_START_LINE_29 = 29;\nMap<String, JsonSerializer<?>> p_all_deserializers_2306_line_29 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nString number_serializers1_expr3_line_29 = Integer.class.getName();\nJsonSerializer<?> v_int_s_2307_line_29 = intS;\nint PROBE_END_LINE_29 = 29;\np_all_deserializers_2306_line_29.put(number_serializers1_expr3_line_29, v_int_s_2307_line_29);\nint PROBE_START_LINE_30 = 30;\nMap<String, JsonSerializer<?>> p_all_deserializers_2306_line_30 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nClass<Integer> f_type_1636_line_30 = Integer.TYPE;\nString number_serializers1_expr6_line_30 = f_type_1636_line_30.getName();\nJsonSerializer<?> v_int_s_2307_line_30 = intS;\nint PROBE_END_LINE_30 = 30;\np_all_deserializers_2306_line_30.put(number_serializers1_expr6_line_30, v_int_s_2307_line_30);\nint PROBE_START_LINE_31 = 31;\nMap<String, JsonSerializer<?>> p_all_deserializers_2306_line_31 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nString number_serializers1_expr8_line_31 = Long.class.getName();\ncom.fasterxml.jackson.databind.ser.std.NumberSerializers.LongSerializer f_instance_2308_line_31 = LongSerializer.instance;\nint PROBE_END_LINE_31 = 31;\np_all_deserializers_2306_line_31.put(number_serializers1_expr8_line_31, f_instance_2308_line_31);\nint PROBE_START_LINE_32 = 32;\nMap<String, JsonSerializer<?>> p_all_deserializers_2306_line_32 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nClass<Long> f_type_1639_line_32 = Long.TYPE;\nString number_serializers1_expr11_line_32 = f_type_1639_line_32.getName();\ncom.fasterxml.jackson.databind.ser.std.NumberSerializers.LongSerializer f_instance_2308_line_32 = LongSerializer.instance;\nint PROBE_END_LINE_32 = 32;\np_all_deserializers_2306_line_32.put(number_serializers1_expr11_line_32, f_instance_2308_line_32);\nint PROBE_START_LINE_33 = 33;\nMap<String, JsonSerializer<?>> p_all_deserializers_2306_line_33 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nString number_serializers1_expr13_line_33 = Byte.class.getName();\ncom.fasterxml.jackson.databind.ser.std.NumberSerializers.IntLikeSerializer f_instance_2309_line_33 = IntLikeSerializer.instance;\nint PROBE_END_LINE_33 = 33;\np_all_deserializers_2306_line_33.put(number_serializers1_expr13_line_33, f_instance_2309_line_33);\nint PROBE_START_LINE_34 = 34;\nMap<String, JsonSerializer<?>> p_all_deserializers_2306_line_34 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nClass<Byte> f_type_2310_line_34 = Byte.TYPE;\nString number_serializers1_expr16_line_34 = f_type_2310_line_34.getName();\ncom.fasterxml.jackson.databind.ser.std.NumberSerializers.IntLikeSerializer f_instance_2309_line_34 = IntLikeSerializer.instance;\nint PROBE_END_LINE_34 = 34;\np_all_deserializers_2306_line_34.put(number_serializers1_expr16_line_34, f_instance_2309_line_34);\nint PROBE_START_LINE_35 = 35;\nMap<String, JsonSerializer<?>> p_all_deserializers_2306_line_35 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nString number_serializers1_expr18_line_35 = Short.class.getName();\ncom.fasterxml.jackson.databind.ser.std.NumberSerializers.ShortSerializer f_instance_2311_line_35 = ShortSerializer.instance;\nint PROBE_END_LINE_35 = 35;\np_all_deserializers_2306_line_35.put(number_serializers1_expr18_line_35, f_instance_2311_line_35);\nint PROBE_START_LINE_36 = 36;\nMap<String, JsonSerializer<?>> p_all_deserializers_2306_line_36 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nClass<Short> f_type_2312_line_36 = Short.TYPE;\nString number_serializers1_expr21_line_36 = f_type_2312_line_36.getName();\ncom.fasterxml.jackson.databind.ser.std.NumberSerializers.ShortSerializer f_instance_2311_line_36 = ShortSerializer.instance;\nint PROBE_END_LINE_36 = 36;\np_all_deserializers_2306_line_36.put(number_serializers1_expr21_line_36, f_instance_2311_line_36);\n\nint PROBE_START_LINE_39 = 39;\nMap<String, JsonSerializer<?>> p_all_deserializers_2306_line_39 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nString number_serializers1_expr23_line_39 = Float.class.getName();\ncom.fasterxml.jackson.databind.ser.std.NumberSerializers.FloatSerializer f_instance_2313_line_39 = FloatSerializer.instance;\nint PROBE_END_LINE_39 = 39;\n// Numbers, limited length floating point\np_all_deserializers_2306_line_39.put(number_serializers1_expr23_line_39, f_instance_2313_line_39);\nint PROBE_START_LINE_40 = 40;\nMap<String, JsonSerializer<?>> p_all_deserializers_2306_line_40 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nClass<Float> f_type_2314_line_40 = Float.TYPE;\nString number_serializers1_expr26_line_40 = f_type_2314_line_40.getName();\ncom.fasterxml.jackson.databind.ser.std.NumberSerializers.FloatSerializer f_instance_2313_line_40 = FloatSerializer.instance;\nint PROBE_END_LINE_40 = 40;\np_all_deserializers_2306_line_40.put(number_serializers1_expr26_line_40, f_instance_2313_line_40);\nint PROBE_START_LINE_41 = 41;\nMap<String, JsonSerializer<?>> p_all_deserializers_2306_line_41 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nString number_serializers1_expr28_line_41 = Double.class.getName();\ncom.fasterxml.jackson.databind.ser.std.NumberSerializers.DoubleSerializer f_instance_2315_line_41 = DoubleSerializer.instance;\nint PROBE_END_LINE_41 = 41;\np_all_deserializers_2306_line_41.put(number_serializers1_expr28_line_41, f_instance_2315_line_41);\nint PROBE_START_LINE_42 = 42;\nMap<String, JsonSerializer<?>> p_all_deserializers_2306_line_42 = (Map<String, JsonSerializer<?>>) (allDeserializers);\nClass<Double> f_type_2316_line_42 = Double.TYPE;\nString number_serializers1_expr31_line_42 = f_type_2316_line_42.getName();\ncom.fasterxml.jackson.databind.ser.std.NumberSerializers.DoubleSerializer f_instance_2315_line_42 = DoubleSerializer.instance;\nint PROBE_END_LINE_42 = 42;\np_all_deserializers_2306_line_42.put(number_serializers1_expr31_line_42, f_instance_2315_line_42);\n}",
        "begin_line": 29,
        "end_line": 111,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.ShortSerializer()#194",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.ShortSerializer()",
        "snippet": "public ShortSerializer() {\nsuper(Short.class, JsonParser.NumberType.INT, \"number\");\n}",
        "begin_line": 194,
        "end_line": 196,
        "comment": "    /*\n     * ******************************************************** /* Concrete\n     * serializers, numerics\n     * ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.MapperFeature(boolean defaultState)#395",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.MapperFeature(boolean defaultState)",
        "snippet": "private MapperFeature(boolean defaultState) {\nint PROBE_START_LINE_396 = 396;\nboolean p_default_state_389_line_396 = defaultState;\nint PROBE_END_LINE_396 = 396;\n_defaultState = p_default_state_389_line_396;\nint PROBE_START_LINE_397 = 397;\nint mapper_feature1_expr3_line_397 = ordinal();\nint mapper_feature1_expr2_line_397 = 1 << mapper_feature1_expr3_line_397;\nint mapper_feature1_expr1_line_397 = (mapper_feature1_expr2_line_397);\nint PROBE_END_LINE_397 = 397;\n_mask = mapper_feature1_expr1_line_397;\n}",
        "begin_line": 395,
        "end_line": 406,
        "comment": "    \n     * Feature that determines whether multiple registrations of same module\n     * should be ignored or not; if enabled, only the first registration call\n     * results in module being called, and possible duplicate calls are silently\n     * ignored; if disabled, no checking is done and all registration calls are\n     * dispatched to module.\n     *<p>\n     * Definition of \"same module\" is based on using {@link Module#getTypeId()};\n     * modules with same non-null <code>type id</code> are considered same for\n     * purposes of duplicate registration. This also avoids having to keep track\n     * of actual module instances; only ids will be kept track of (and only if\n     * this feature is enabled).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.5\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.SerializerCache.SerializerCache()#42",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/SerializerCache.java",
        "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
        "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.SerializerCache()",
        "snippet": "public SerializerCache() { }\n\n/**\n* Method that can be called to get a read-only instance populated from the\n* most recent version of the shared lookup Map.\n*/\npublic ReadOnlyClassToSerializerMap getReadOnlyLookupMap()\n{\nReadOnlyClassToSerializerMap m = _readOnlyMap.get();\nif (m != null) {\nreturn m;\n}",
        "begin_line": 42,
        "end_line": 53,
        "comment": "    \n     * Most recent read-only instance, created from _sharedMap, if any.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StringSerializer.StringSerializer()#29",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StringSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.StringSerializer.StringSerializer()",
        "snippet": "public StringSerializer() { super(String.class, false); }\n\n/**\n* For Strings, both null and Empty String qualify for emptiness.\n*/\n@Override\n@Deprecated\npublic boolean isEmpty(Object value) {\nString str = (String) value;\nreturn (str == null) || (str.length() == 0);\n}",
        "begin_line": 29,
        "end_line": 39,
        "comment": "   use of bridge methods",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.ContextAttributes.getEmpty()#24",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
        "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.getEmpty()",
        "snippet": "public static ContextAttributes getEmpty() {\nint PROBE_START_LINE_24 = 24;\ncom.fasterxml.jackson.databind.cfg.ContextAttributes context_attributes1_expr1_line_24 = Impl.getEmpty();\nint PROBE_END_LINE_24 = 24;\nreturn context_attributes1_expr1_line_24;\n}",
        "begin_line": 24,
        "end_line": 29,
        "comment": "\n * Helper class used for storing and accessing per-call attributes.\n * Storage is two-layered: at higher precedence, we have actual per-call\n * attributes; and at lower precedence, default attributes that may be\n * defined for Object readers and writers.\n *<p>\n * Note that the way mutability is implemented differs between kinds\n * of attributes, to account for thread-safety: per-call attributes\n * are handled assuming that instances are never shared, whereas\n * changes to per-reader/per-writer attributes are made assuming\n * sharing, by creating new copies instead of modifying state.\n * This allows sharing of default values without per-call copying, but\n * requires two-level lookup on access.\n * \n * @since 2.3\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(Class<T> t)#58",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(Class<T> t)",
        "snippet": "protected StdSerializer(Class<T> t) {\nint PROBE_START_LINE_59 = 59;\nClass<T> p_t_2395_line_59 = (Class<T>) (t);\nint PROBE_END_LINE_59 = 59;\n_handledType = p_t_2395_line_59;\n}",
        "begin_line": 58,
        "end_line": 63,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.CalendarSerializer()#23",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.CalendarSerializer()",
        "snippet": "public CalendarSerializer() { this(null, null); }\n\npublic CalendarSerializer(Boolean useTimestamp, DateFormat customFormat) {\nsuper(Calendar.class, useTimestamp, customFormat);\n}",
        "begin_line": 23,
        "end_line": 27,
        "comment": "\n * Standard serializer for {@link java.util.Calendar}.\n * As with other time/date types, is configurable to produce timestamps\n * (standard Java 64-bit timestamp) or textual formats (usually ISO-8601).\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.DeserializerCache.DeserializerCache()#59",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.DeserializerCache()",
        "snippet": "public DeserializerCache() { }\n\n/*\n/**********************************************************\n/* JDK serialization handling\n/**********************************************************\n*/\n\nObject writeReplace() {\n// instead of making this transient, just clear it:\n_incompleteDeserializers.clear();\n// TODO: clear out \"cheap\" cached deserializers?\nreturn this;\n}",
        "begin_line": 59,
        "end_line": 72,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.Annotated.Annotated()#17",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/Annotated.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
        "signature": "com.fasterxml.jackson.databind.introspect.Annotated.Annotated()",
        "snippet": "protected Annotated() { }\n\npublic abstract <A extends Annotation> A getAnnotation(Class<A> acls);\n\npublic abstract boolean hasAnnotation(Class<?> acls);\n\n/**\n* @since 2.7\n*/\npublic abstract boolean hasOneOf(Class<? extends Annotation>[] annoClasses);\n\n/**\n* Fluent factory method that will construct a new instance that uses specified\n* instance annotations instead of currently configured ones.\n*/\npublic abstract Annotated withAnnotations(AnnotationMap fallback);\n\n/**\n* Fluent factory method that will construct a new instance that uses\n* annotations from specified {@link Annotated} as fallback annotations\n*/\npublic final Annotated withFallBackAnnotationsFrom(Annotated annotated) {\nreturn withAnnotations(AnnotationMap.merge(getAllAnnotations(), annotated.getAllAnnotations()));\n}",
        "begin_line": 17,
        "end_line": 40,
        "comment": "\n * Shared base class used for anything on which annotations (included\n * within a {@link AnnotationMap}).\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.SerializationFeature(boolean defaultState)#411",
        "is_bug": false,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.SerializationFeature(boolean defaultState)",
        "snippet": "private SerializationFeature(boolean defaultState) {\nint PROBE_START_LINE_412 = 412;\nboolean p_default_state_833_line_412 = defaultState;\nint PROBE_END_LINE_412 = 412;\n_defaultState = p_default_state_833_line_412;\nint PROBE_START_LINE_413 = 413;\nint serialization_feature1_expr3_line_413 = ordinal();\nint serialization_feature1_expr2_line_413 = 1 << serialization_feature1_expr3_line_413;\nint serialization_feature1_expr1_line_413 = (serialization_feature1_expr2_line_413);\nint PROBE_END_LINE_413 = 413;\n_mask = serialization_feature1_expr1_line_413;\n}",
        "begin_line": 411,
        "end_line": 422,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    }
]