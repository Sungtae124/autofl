[
    {
        "name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.unknown#48",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.unknown(...)",
        "snippet": "protected ClassIntrospector() { }",
        "begin_line": 48,
        "end_line": 48,
        "comment": "        \n         * Method called to create a new, non-shared copy, to be used by different\n         * <code>ObjectMapper</code> instance, and one that should not be connected\n         * to this instance, if resolver has mutable state.\n         * If resolver is immutable may simply return `this`.\n         * \n         * @since 2.6\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown#36",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown(...)",
        "snippet": "private final static Class<? extends Annotation>[] ANNOTATIONS_TO_INFER_SER = (Class<? extends Annotation>[])",
        "begin_line": 36,
        "end_line": 36,
        "comment": "\n * {@link AnnotationIntrospector} implementation that handles standard\n * Jackson annotations.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown#48",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown(...)",
        "snippet": "private final static Class<? extends Annotation>[] ANNOTATIONS_TO_INFER_DESER = (Class<? extends Annotation>[])",
        "begin_line": 48,
        "end_line": 48,
        "comment": "\n * {@link AnnotationIntrospector} implementation that handles standard\n * Jackson annotations.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown#60",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown(...)",
        "snippet": "Java7Support x = null;",
        "begin_line": 60,
        "end_line": 60,
        "comment": "\n * {@link AnnotationIntrospector} implementation that handles standard\n * Jackson annotations.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown#62",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown(...)",
        "snippet": "int PROBE_START_LINE_62 = 62;",
        "begin_line": 62,
        "end_line": 62,
        "comment": "\n * {@link AnnotationIntrospector} implementation that handles standard\n * Jackson annotations.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown#67",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown(...)",
        "snippet": "} catch (Throwable t) {",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n * {@link AnnotationIntrospector} implementation that handles standard\n * Jackson annotations.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown#68",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown(...)",
        "snippet": "// 24-Nov-2015, tatu: Should we log or not?",
        "begin_line": 68,
        "end_line": 68,
        "comment": "             24-Nov-2015, tatu: Should we log or not?",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown#69",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown(...)",
        "snippet": "java.util.logging.Logger.getLogger(JacksonAnnotationIntrospector.class.getName())",
        "begin_line": 69,
        "end_line": 69,
        "comment": "             24-Nov-2015, tatu: Should we log or not?",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown#80",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown(...)",
        "snippet": "* use cases (rare, but do exist), let's try a simple cache to reduce",
        "begin_line": 80,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown#82",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown(...)",
        "snippet": "*<p>",
        "begin_line": 82,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown#1228",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown(...)",
        "snippet": "*/",
        "begin_line": 1228,
        "end_line": 1228,
        "comment": "    \n     * To support Java7-incomplete platforms, we will offer support for JDK 7\n     * annotations through this class, loaded dynamically; if loading fails,\n     * support will be missing.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown#1230",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown(...)",
        "snippet": "{",
        "begin_line": 1230,
        "end_line": 1230,
        "comment": "    \n     * To support Java7-incomplete platforms, we will offer support for JDK 7\n     * annotations through this class, loaded dynamically; if loading fails,\n     * support will be missing.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown#1231",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown(...)",
        "snippet": "@SuppressWarnings(\"unused\") // compiler warns, just needed side-effects",
        "begin_line": 1231,
        "end_line": 1231,
        "comment": "    \n     * To support Java7-incomplete platforms, we will offer support for JDK 7\n     * annotations through this class, loaded dynamically; if loading fails,\n     * support will be missing.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown#1232",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown(...)",
        "snippet": "private final Class<?> _bogus;",
        "begin_line": 1232,
        "end_line": 1232,
        "comment": "    \n     * To support Java7-incomplete platforms, we will offer support for JDK 7\n     * annotations through this class, loaded dynamically; if loading fails,\n     * support will be missing.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown#1233",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.unknown(...)",
        "snippet": "",
        "begin_line": 1233,
        "end_line": 1233,
        "comment": "    \n     * To support Java7-incomplete platforms, we will offer support for JDK 7\n     * annotations through this class, loaded dynamically; if loading fails,\n     * support will be missing.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.DateSerializer.unknown#24",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/DateSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.DateSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.DateSerializer.unknown(...)",
        "snippet": "public static final DateSerializer instance = new DateSerializer();",
        "begin_line": 24,
        "end_line": 24,
        "comment": "    \n     * Default instance that is used when no contextual configuration\n     * is needed.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.DateSerializer.unknown#27",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/DateSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.DateSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.DateSerializer.unknown(...)",
        "snippet": "this(null, null);",
        "begin_line": 27,
        "end_line": 27,
        "comment": "    \n     * Default instance that is used when no contextual configuration\n     * is needed.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.DateSerializer.unknown#28",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/DateSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.DateSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.DateSerializer.unknown(...)",
        "snippet": "}",
        "begin_line": 28,
        "end_line": 28,
        "comment": "    \n     * Default instance that is used when no contextual configuration\n     * is needed.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.DateSerializer.unknown#31",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/DateSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.DateSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.DateSerializer.unknown(...)",
        "snippet": "super(Date.class, useTimestamp, customFormat);",
        "begin_line": 31,
        "end_line": 31,
        "comment": "    \n     * Default instance that is used when no contextual configuration\n     * is needed.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.DateSerializer.unknown#32",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/DateSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.DateSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.DateSerializer.unknown(...)",
        "snippet": "}",
        "begin_line": 32,
        "end_line": 32,
        "comment": "    \n     * Default instance that is used when no contextual configuration\n     * is needed.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.AnnotationIntrospector.unknown#45",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.unknown(...)",
        "snippet": "public abstract class AnnotationIntrospector",
        "begin_line": 45,
        "end_line": 45,
        "comment": "\n * Abstract class that defines API used for introspecting annotation-based\n * configuration for serialization and deserialization. Separated\n * so that different sets of annotations can be supported, and support\n * plugged-in dynamically.\n *<p>\n * Although default implementations are based on using annotations as the only\n * (or at least main) information source, custom implementations are not limited\n * in such a way, and in fact there is no expectation they should be. So the name\n * is bit of misnomer; this is a general configuration introspection facility.\n *<p>\n * NOTE: due to rapid addition of new methods (and changes to existing methods),\n * it is <b>strongly</b> recommended that custom implementations should not directly\n * extend this class, but rather extend {@link NopAnnotationIntrospector}.\n * This way added methods will not break backwards compatibility of custom annotation\n * introspectors.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.AnnotationIntrospector.unknown#58",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
        "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.unknown(...)",
        "snippet": "public static class ReferenceProperty",
        "begin_line": 58,
        "end_line": 58,
        "comment": "    \n     * Value type used with managed and back references; contains type and\n     * logic name, used to link related references\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NullSerializer.unknown#24",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NullSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NullSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.NullSerializer.unknown(...)",
        "snippet": "public final static NullSerializer instance = new NullSerializer();",
        "begin_line": 24,
        "end_line": 24,
        "comment": "\n * This is a simple dummy serializer that will just output literal\n * JSON null value whenever serialization is requested.\n * Used as the default \"null serializer\" (which is used for serializing\n * null object references unless overridden), as well as for some\n * more exotic types (java.lang.Void).\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NullSerializer.unknown#26",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NullSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NullSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.NullSerializer.unknown(...)",
        "snippet": "private NullSerializer() { super(Object.class); }",
        "begin_line": 26,
        "end_line": 26,
        "comment": "\n * This is a simple dummy serializer that will just output literal\n * JSON null value whenever serialization is requested.\n * Used as the default \"null serializer\" (which is used for serializing\n * null object references unless overridden), as well as for some\n * more exotic types (java.lang.Void).\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationConfig.unknown#44",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "signature": "com.fasterxml.jackson.databind.SerializationConfig.unknown(...)",
        "snippet": "",
        "begin_line": 44,
        "end_line": 44,
        "comment": "     since 2.5",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationConfig.unknown#48",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "signature": "com.fasterxml.jackson.databind.SerializationConfig.unknown(...)",
        "snippet": "int PROBE_START_LINE_48 = 48;",
        "begin_line": 48,
        "end_line": 48,
        "comment": "     since 2.6",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationConfig.unknown#139",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "signature": "com.fasterxml.jackson.databind.SerializationConfig.unknown(...)",
        "snippet": "*/",
        "begin_line": 139,
        "end_line": 139,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationConfig.unknown#140",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "signature": "com.fasterxml.jackson.databind.SerializationConfig.unknown(...)",
        "snippet": "",
        "begin_line": 140,
        "end_line": 140,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationConfig.unknown#141",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "signature": "com.fasterxml.jackson.databind.SerializationConfig.unknown(...)",
        "snippet": "/**",
        "begin_line": 141,
        "end_line": 141,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationConfig.unknown#142",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "signature": "com.fasterxml.jackson.databind.SerializationConfig.unknown(...)",
        "snippet": "* Constructor used by ObjectMapper to create default configuration object instance.",
        "begin_line": 142,
        "end_line": 142,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationConfig.unknown#143",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "signature": "com.fasterxml.jackson.databind.SerializationConfig.unknown(...)",
        "snippet": "*/",
        "begin_line": 143,
        "end_line": 143,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationConfig.unknown#144",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "signature": "com.fasterxml.jackson.databind.SerializationConfig.unknown(...)",
        "snippet": "public SerializationConfig(BaseSettings base,",
        "begin_line": 144,
        "end_line": 144,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationConfig.unknown#145",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "signature": "com.fasterxml.jackson.databind.SerializationConfig.unknown(...)",
        "snippet": "SubtypeResolver str, SimpleMixInResolver mixins,",
        "begin_line": 145,
        "end_line": 145,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationConfig.unknown#146",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "signature": "com.fasterxml.jackson.databind.SerializationConfig.unknown(...)",
        "snippet": "RootNameLookup rootNames)",
        "begin_line": 146,
        "end_line": 146,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationConfig.unknown#147",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "signature": "com.fasterxml.jackson.databind.SerializationConfig.unknown(...)",
        "snippet": "{",
        "begin_line": 147,
        "end_line": 147,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationConfig.unknown#148",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "signature": "com.fasterxml.jackson.databind.SerializationConfig.unknown(...)",
        "snippet": "super(base, str, mixins, rootNames);",
        "begin_line": 148,
        "end_line": 148,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.unknown#23",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
        "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.unknown(...)",
        "snippet": "public StdSubtypeResolver() { }",
        "begin_line": 23,
        "end_line": 23,
        "comment": "\n * Standard {@link SubtypeResolver} implementation.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#20",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "public enum DeserializationFeature implements ConfigFeature",
        "begin_line": 20,
        "end_line": 20,
        "comment": "\n * Enumeration that defines simple on/off features that affect\n * the way Java objects are deserialized from JSON\n *<p>\n * Note that features can be set both through\n * {@link ObjectMapper} (as sort of defaults) and through\n * {@link ObjectReader}.\n * In first case these defaults must follow \"config-then-use\" patterns\n * (i.e. defined once, not changed afterwards); all per-call\n * changes must be done using {@link ObjectReader}.\n *<p>\n * Note that features that do not indicate version of inclusion\n * were available in Jackson 2.0 (or earlier); only later additions\n * indicate version of inclusion.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#42",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "USE_BIG_DECIMAL_FOR_FLOATS(false),",
        "begin_line": 42,
        "end_line": 42,
        "comment": "    \n     * Feature that determines whether JSON floating point numbers\n     * are to be deserialized into {@link java.math.BigDecimal}s\n     * if only generic type description (either {@link Object} or\n     * {@link Number}, or within untyped {@link java.util.Map}\n     * or {@link java.util.Collection} context) is available.\n     * If enabled such values will be deserialized as {@link java.math.BigDecimal}s;\n     * if disabled, will be deserialized as {@link Double}s.\n     * <p>\n     * Feature is disabled by default, meaning that \"untyped\" floating\n     * point numbers will by default be deserialized as {@link Double}s\n     * (choice is for performance reason -- BigDecimals are slower than\n     * Doubles).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#60",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "USE_BIG_INTEGER_FOR_INTS(false),",
        "begin_line": 60,
        "end_line": 60,
        "comment": "    \n     * Feature that determines whether JSON integral (non-floating-point)\n     * numbers are to be deserialized into {@link java.math.BigInteger}s\n     * if only generic type description (either {@link Object} or\n     * {@link Number}, or within untyped {@link java.util.Map}\n     * or {@link java.util.Collection} context) is available.\n     * If enabled such values will be deserialized as\n     * {@link java.math.BigInteger}s;\n     * if disabled, will be deserialized as \"smallest\" available type,\n     * which is either {@link Integer}, {@link Long} or\n     * {@link java.math.BigInteger}, depending on number of digits.\n     * <p>\n     * Feature is disabled by default, meaning that \"untyped\" integral\n     * numbers will by default be deserialized using whatever\n     * is the most compact integral type, to optimize efficiency.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#83",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "USE_LONG_FOR_INTS(false),",
        "begin_line": 83,
        "end_line": 83,
        "comment": "    \n     * Feature that determines how \"small\" JSON integral (non-floating-point)\n     * numbers -- ones that fit in 32-bit signed integer (`int`) -- are bound\n     * when target type is loosely typed as {@link Object} or {@link Number}\n     * (or within untyped {@link java.util.Map} or {@link java.util.Collection} context).\n     * If enabled, such values will be deserialized as {@link java.lang.Long};\n     * if disabled, they will be deserialized as \"smallest\" available type,\n     * {@link Integer}.\n     * In addition, if enabled, trying to bind values that do not fit in {@link java.lang.Long}\n     * will throw a {@link com.fasterxml.jackson.core.JsonProcessingException}.\n     *<p>\n     * Note: if {@link #USE_BIG_INTEGER_FOR_INTS} is enabled, it has precedence\n     * over this setting, forcing use of {@link java.math.BigInteger} for all\n     * integral values.\n     *<p>\n     * Feature is disabled by default, meaning that \"untyped\" integral\n     * numbers will by default be deserialized using {@link java.lang.Integer}\n     * if value fits.\n     * \n     * @since 2.6\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#94",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "USE_JAVA_ARRAY_FOR_JSON_ARRAY(false),",
        "begin_line": 94,
        "end_line": 94,
        "comment": "    \n     * Feature that determines whether JSON Array is mapped to\n     * <code>Object[]</code> or <code>List&lt;Object></code> when binding\n     * \"untyped\" objects (ones with nominal type of <code>java.lang.Object</code>).\n     * If true, binds as <code>Object[]</code>; if false, as <code>List&lt;Object></code>.\n     *<p>\n     * Feature is disabled by default, meaning that JSON arrays are bound as\n     * {@link java.util.List}s.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#107",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "READ_ENUMS_USING_TO_STRING(false),",
        "begin_line": 107,
        "end_line": 107,
        "comment": "    \n     * Feature that determines standard deserialization mechanism used for\n     * Enum values: if enabled, Enums are assumed to have been serialized  using\n     * return value of <code>Enum.toString()</code>;\n     * if disabled, return value of <code>Enum.name()</code> is assumed to have been used.\n     *<p>\n     * Note: this feature should usually have same value\n     * as {@link SerializationFeature#WRITE_ENUMS_USING_TO_STRING}.\n     *<p>\n     * Feature is disabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#129",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "FAIL_ON_UNKNOWN_PROPERTIES(true),",
        "begin_line": 129,
        "end_line": 129,
        "comment": "    \n     * Feature that determines whether encountering of unknown\n     * properties (ones that do not map to a property, and there is\n     * no \"any setter\" or handler that can handle it)\n     * should result in a failure (by throwing a\n     * {@link JsonMappingException}) or not.\n     * This setting only takes effect after all other handling\n     * methods for unknown properties have been tried, and\n     * property remains unhandled.\n     *<p>\n     * Feature is enabled by default (meaning that a\n     * {@link JsonMappingException} will be thrown if an unknown property\n     * is encountered).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#140",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "FAIL_ON_NULL_FOR_PRIMITIVES(false),",
        "begin_line": 140,
        "end_line": 140,
        "comment": "    \n     * Feature that determines whether encountering of JSON null\n     * is an error when deserializing into Java primitive types\n     * (like 'int' or 'double'). If it is, a JsonProcessingException\n     * is thrown to indicate this; if not, default value is used\n     * (0 for 'int', 0.0 for double, same defaulting as what JVM uses).\n     *<p>\n     * Feature is disabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#154",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "FAIL_ON_NUMBERS_FOR_ENUMS(false),",
        "begin_line": 154,
        "end_line": 154,
        "comment": "    \n     * Feature that determines whether JSON integer numbers are valid\n     * values to be used for deserializing Java enum values.\n     * If set to 'false' numbers are acceptable and are used to map to\n     * ordinal() of matching enumeration value; if 'true', numbers are\n     * not allowed and a {@link JsonMappingException} will be thrown.\n     * Latter behavior makes sense if there is concern that accidental\n     * mapping from integer values to enums might happen (and when enums\n     * are always serialized as JSON Strings)\n     *<p>\n     * Feature is disabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#167",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "FAIL_ON_INVALID_SUBTYPE(true),",
        "begin_line": 167,
        "end_line": 167,
        "comment": "    \n     * Feature that determines what happens when type of a polymorphic\n     * value (indicated for example by {@link com.fasterxml.jackson.annotation.JsonTypeInfo})\n     * can not be found (missing) or resolved (invalid class name, unmappable id);\n     * if enabled, an exception ir thrown; if false, null value is used instead.\n     *<p>\n     * Feature is enabled by default so that exception is thrown for missing or invalid\n     * type information.\n     * \n     * @since 2.2\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#184",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "FAIL_ON_READING_DUP_TREE_KEY(false),",
        "begin_line": 184,
        "end_line": 184,
        "comment": "    \n     * Feature that determines what happens when reading JSON content into tree\n     * ({@link com.fasterxml.jackson.core.TreeNode}) and a duplicate key\n     * is encountered (property name that was already seen for the JSON Object).\n     * If enabled, {@link JsonMappingException} will be thrown; if disabled, no exception\n     * is thrown and the new (later) value overwrites the earlier value.\n     *<p>\n     * Note that this property does NOT affect other aspects of data-binding; that is,\n     * no detection is done with respect to POJO properties or {@link java.util.Map}\n     * keys. New features may be added to control additional cases.\n     *<p>\n     * Feature is disabled by default so that no exception is thrown.\n     * \n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#195",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "FAIL_ON_IGNORED_PROPERTIES(false),",
        "begin_line": 195,
        "end_line": 195,
        "comment": "    \n     * Feature that determines what happens when a property that has been explicitly\n     * marked as ignorable is encountered in input: if feature is enabled,\n     * {@link JsonMappingException} is thrown; if false, property is quietly skipped.\n     *<p>\n     * Feature is disabled by default so that no exception is thrown.\n     *\n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#211",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "FAIL_ON_UNRESOLVED_OBJECT_IDS(true),",
        "begin_line": 211,
        "end_line": 211,
        "comment": "    \n     * Feature that determines what happens if an Object Id reference is encountered\n     * that does not refer to an actual Object with that id (\"unresolved Object Id\"):\n     * either an exception is thrown (<code>true</code>), or a null object is used\n     * instead (<code>false</code>).\n     * Note that if this is set to <code>false</code>, no further processing is done;\n     * specifically, if reference is defined via setter method, that method will NOT\n     * be called.\n     *<p>\n     * Feature is enabled by default, so that unknown Object Ids will result in an\n     * exception being thrown, at the end of deserialization.\n     * \n     * @since 2.5\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#232",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "FAIL_ON_MISSING_CREATOR_PROPERTIES(false),",
        "begin_line": 232,
        "end_line": 232,
        "comment": "    \n     * Feature that determines what happens if one or more Creator properties (properties\n     * bound to parameters of Creator method (constructor or static factory method))\n     * are missing value to bind to from content.\n     * If enabled, such missing values result in a {@link JsonMappingException} being\n     * thrown with information on the first one (by index) of missing properties.\n     * If disabled, and if property is NOT marked as required,\n     * missing Creator properties are filled\n     * with <code>null values</code> provided by deserializer for the type of parameter\n     * (usually null for Object types, and default value for primitives; but redefinable\n     * via custom deserializers).\n     *<p>\n     * Note that having an injectable value counts as \"not missing\".\n     *<p>\n     * Feature is disabled by default, so that no exception is thrown for missing creator\n     * property values, unless they are explicitly marked as `required`.\n     * \n     * @since 2.6\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#249",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "WRAP_EXCEPTIONS(true),",
        "begin_line": 249,
        "end_line": 249,
        "comment": "    \n     * Feature that determines whether Jackson code should catch\n     * and wrap {@link Exception}s (but never {@link Error}s!)\n     * to add additional information about\n     * location (within input) of problem or not. If enabled,\n     * most exceptions will be caught and re-thrown (exception\n     * specifically being that {@link java.io.IOException}s may be passed\n     * as is, since they are declared as throwable); this can be\n     * convenient both in that all exceptions will be checked and\n     * declared, and so there is more contextual information.\n     * However, sometimes calling application may just want \"raw\"\n     * unchecked exceptions passed as is.\n     *<p>\n     * Feature is enabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#268",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "ACCEPT_SINGLE_VALUE_AS_ARRAY(false),",
        "begin_line": 268,
        "end_line": 268,
        "comment": "    \n     * Feature that determines whether it is acceptable to coerce non-array\n     * (in JSON) values to work with Java collection (arrays, java.util.Collection)\n     * types. If enabled, collection deserializers will try to handle non-array\n     * values as if they had \"implicit\" surrounding JSON array.\n     * This feature is meant to be used for compatibility/interoperability reasons,\n     * to work with packages (such as XML-to-JSON converters) that leave out JSON\n     * array in cases where there is just a single element in array.\n     *<p>\n     * Feature is disabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#279",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "UNWRAP_SINGLE_VALUE_ARRAYS(false),",
        "begin_line": 279,
        "end_line": 279,
        "comment": "    \n     * Feature that determines whether it is acceptable to coerce single value array (in JSON)\n     * values to the corresponding value type.  This is basically the opposite of the {@link #ACCEPT_SINGLE_VALUE_AS_ARRAY}\n     * feature.  If more than one value is found in the array, a JsonMappingException is thrown.\n     * <p>\n     * \n     * Feature is disabled by default\n     * @since 2.4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#291",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "UNWRAP_ROOT_VALUE(false),",
        "begin_line": 291,
        "end_line": 291,
        "comment": "    \n     * Feature to allow \"unwrapping\" root-level JSON value, to match setting of\n     * {@link SerializationFeature#WRAP_ROOT_VALUE} used for serialization.\n     * Will verify that the root JSON value is a JSON Object, and that it has\n     * a single property with expected root name. If not, a\n     * {@link JsonMappingException} is thrown; otherwise value of the wrapped property\n     * will be deserialized as if it was the root value.\n     *<p>\n     * Feature is disabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#310",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "ACCEPT_EMPTY_STRING_AS_NULL_OBJECT(false),",
        "begin_line": 310,
        "end_line": 310,
        "comment": "    \n     * Feature that can be enabled to allow JSON empty String\n     * value (\"\") to be bound to POJOs as null.\n     * If disabled, standard POJOs can only be bound from JSON null or\n     * JSON Object (standard meaning that no custom deserializers or\n     * constructors are defined; both of which can add support for other\n     * kinds of JSON values); if enabled, empty JSON String can be taken\n     * to be equivalent of JSON null.\n     *<p>\n     * Feature is disabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#325",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT(false),",
        "begin_line": 325,
        "end_line": 325,
        "comment": "    \n     * Feature that can be enabled to allow empty JSON Array\n     * value (that is, <code>[ ]</code>) to be bound to POJOs as null.\n     * If disabled, standard POJOs can only be bound from JSON null or\n     * JSON Object (standard meaning that no custom deserializers or\n     * constructors are defined; both of which can add support for other\n     * kinds of JSON values); if enabled, empty JSON Array will be taken\n     * to be equivalent of JSON null.\n     *<p>\n     * Feature is disabled by default.\n     * \n     * @since 2.5\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#339",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "ACCEPT_FLOAT_AS_INT(true),",
        "begin_line": 339,
        "end_line": 339,
        "comment": "    \n     * Feature that determines whether coercion from JSON floating point\n     * number (anything with command (`.`) or exponent portion (`e` / `E'))\n     * to an expected integral number (`int`, `long`, `java.lang.Integer`, `java.lang.Long`,\n     * `java.math.BigDecimal`) is allowed or not.\n     * If enabled, coercion truncates value; if disabled, a {@link JsonMappingException}\n     * will be thrown.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.6\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#354",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "READ_UNKNOWN_ENUM_VALUES_AS_NULL(false),",
        "begin_line": 354,
        "end_line": 354,
        "comment": "    \n     * Feature that allows unknown Enum values to be parsed as null values. \n     * If disabled, unknown Enum values will throw exceptions.\n     *<p>\n     * Note that in some cases this will basically ignore unknown Enum values;\n     * this is the keys for keys of {@link java.util.EnumMap} and values\n     * of {@link java.util.EnumSet} (because nulls are not accepted in these\n     * cases).\n     *<p>\n     * Feature is disabled by default.\n     * \n     * @since 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#371",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "READ_DATE_TIMESTAMPS_AS_NANOSECONDS(true),",
        "begin_line": 371,
        "end_line": 371,
        "comment": "    \n     * Feature that controls whether numeric timestamp values are expected\n     * to be written using nanosecond timestamps (enabled) or not (disabled),\n     * <b>if and only if</b> datatype supports such resolution.\n     * Only newer datatypes (such as Java8 Date/Time) support such resolution --\n     * older types (pre-Java8 <b>java.util.Date</b> etc) and Joda do not --\n     * and this setting <b>has no effect</b> on such types.\n     *<p>\n     * If disabled, standard millisecond timestamps are assumed.\n     * This is the counterpart to {@link SerializationFeature#WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS}.\n     *<p>\n     * Feature is enabled by default, to support most accurate time values possible.\n     * \n     * @since 2.2\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#383",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "ADJUST_DATES_TO_CONTEXT_TIME_ZONE(true),",
        "begin_line": 383,
        "end_line": 383,
        "comment": "    \n     * Feature that specifies whether context provided {@link java.util.TimeZone}\n     * ({@link DeserializationContext#getTimeZone()} should be used to adjust Date/Time\n     * values on deserialization, even if value itself contains timezone information.\n     * If enabled, contextual <code>TimeZone</code> will essentially override any other\n     * TimeZone information; if disabled, it will only be used if value itself does not\n     * contain any TimeZone information.\n     * \n     * @since 2.2\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#405",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "EAGER_DESERIALIZER_FETCH(true)",
        "begin_line": 405,
        "end_line": 405,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#412",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "private DeserializationFeature(boolean defaultState) {",
        "begin_line": 412,
        "end_line": 412,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#413",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "int PROBE_START_LINE_413 = 413;",
        "begin_line": 413,
        "end_line": 413,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#414",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "boolean p_default_state_338_line_413 = defaultState;",
        "begin_line": 414,
        "end_line": 414,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#415",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "int PROBE_END_LINE_413 = 413;",
        "begin_line": 415,
        "end_line": 415,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#418",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "int deserialization_feature1_expr3_line_414 = ordinal();",
        "begin_line": 418,
        "end_line": 418,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationFeature.unknown#421",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "signature": "com.fasterxml.jackson.databind.DeserializationFeature.unknown(...)",
        "snippet": "int PROBE_END_LINE_414 = 414;",
        "begin_line": 421,
        "end_line": 421,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.unknown#57",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
        "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.unknown(...)",
        "snippet": "protected DefaultSerializerProvider() { super(); }",
        "begin_line": 57,
        "end_line": 57,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.unknown#591",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
        "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.unknown(...)",
        "snippet": "public Impl() { super(); }",
        "begin_line": 591,
        "end_line": 591,
        "comment": "    \n     * Concrete implementation that defines factory method(s),\n     * defined as final.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.unknown#98",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.unknown(...)",
        "snippet": "protected BasicBeanDescription(MapperConfig<?> config,",
        "begin_line": 98,
        "end_line": 98,
        "comment": "    \n     * Alternate constructor used in cases where property information is not needed,\n     * only class info.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.unknown#99",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.unknown(...)",
        "snippet": "JavaType type, AnnotatedClass classDef, List<BeanPropertyDefinition> props)",
        "begin_line": 99,
        "end_line": 99,
        "comment": "    \n     * Alternate constructor used in cases where property information is not needed,\n     * only class info.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.unknown#100",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.unknown(...)",
        "snippet": "{",
        "begin_line": 100,
        "end_line": 100,
        "comment": "    \n     * Alternate constructor used in cases where property information is not needed,\n     * only class info.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.unknown#101",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.unknown(...)",
        "snippet": "super(type);",
        "begin_line": 101,
        "end_line": 101,
        "comment": "    \n     * Alternate constructor used in cases where property information is not needed,\n     * only class info.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.unknown#102",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.unknown(...)",
        "snippet": "_propCollector = null;",
        "begin_line": 102,
        "end_line": 102,
        "comment": "    \n     * Alternate constructor used in cases where property information is not needed,\n     * only class info.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.unknown#103",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.unknown(...)",
        "snippet": "int PROBE_START_LINE_100 = 100;",
        "begin_line": 103,
        "end_line": 103,
        "comment": "    \n     * Alternate constructor used in cases where property information is not needed,\n     * only class info.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.unknown#104",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.unknown(...)",
        "snippet": "MapperConfig<?> p_config_1598_line_100 = config;",
        "begin_line": 104,
        "end_line": 104,
        "comment": "    \n     * Alternate constructor used in cases where property information is not needed,\n     * only class info.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.unknown#136",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.unknown(...)",
        "snippet": "/**",
        "begin_line": 136,
        "end_line": 136,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#39",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "private final static JavaType[] NO_TYPES = new JavaType[0];",
        "begin_line": 39,
        "end_line": 39,
        "comment": "\n * Class used for creating concrete {@link JavaType} instances,\n * given various inputs.\n *<p>\n * Instances of this class are accessible using {@link com.fasterxml.jackson.databind.ObjectMapper}\n * as well as many objects it constructs (like\n* {@link com.fasterxml.jackson.databind.DeserializationConfig} and\n * {@link com.fasterxml.jackson.databind.SerializationConfig})),\n * but usually those objects also \n * expose convenience methods (<code>constructType</code>).\n * So, you can do for example:\n *<pre>\n *   JavaType stringType = mapper.constructType(String.class);\n *</pre>\n * However, more advanced methods are only exposed by factory so that you\n * may need to use:\n *<pre>\n *   JavaType stringCollection = mapper.getTypeFactory().constructCollectionType(List.class, String.class);\n *</pre>\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#46",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "protected final static TypeFactory instance = new TypeFactory();",
        "begin_line": 46,
        "end_line": 46,
        "comment": "    \n     * Globally shared singleton. Not accessed directly; non-core\n     * code should use per-ObjectMapper instance (via configuration objects).\n     * Core Jackson code uses {@link #defaultInstance} for accessing it.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#48",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "int PROBE_START_LINE_48 = 48;",
        "begin_line": 48,
        "end_line": 48,
        "comment": "    \n     * Globally shared singleton. Not accessed directly; non-core\n     * code should use per-ObjectMapper instance (via configuration objects).\n     * Core Jackson code uses {@link #defaultInstance} for accessing it.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#60",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "/**********************************************************",
        "begin_line": 60,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#61",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "*/",
        "begin_line": 61,
        "end_line": 61,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#63",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "// // // Let's assume that a small set of core primitive/basic types",
        "begin_line": 63,
        "end_line": 63,
        "comment": "       Let's assume that a small set of core primitive/basic types",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#64",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "// // // will not be modified, and can be freely shared to streamline",
        "begin_line": 64,
        "end_line": 64,
        "comment": "       will not be modified, and can be freely shared to streamline",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#65",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "// // // parts of processing",
        "begin_line": 65,
        "end_line": 65,
        "comment": "       parts of processing",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#67",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "private final static Class<?> CLS_STRING = String.class;",
        "begin_line": 67,
        "end_line": 67,
        "comment": "       parts of processing",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#68",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "private final static Class<?> CLS_OBJECT = Object.class;",
        "begin_line": 68,
        "end_line": 68,
        "comment": "       parts of processing",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#69",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "",
        "begin_line": 69,
        "end_line": 69,
        "comment": "       parts of processing",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#78",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "int PROBE_END_LINE_67 = 67;",
        "begin_line": 78,
        "end_line": 78,
        "comment": "       parts of processing",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#79",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "",
        "begin_line": 79,
        "end_line": 79,
        "comment": "       parts of processing",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#80",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "private final static Class<?> CLS_BOOL = f_type_1633_line_67;",
        "begin_line": 80,
        "end_line": 80,
        "comment": "       parts of processing",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#83",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "private static final Class<Integer> f_type_1636_line_68 = Integer.TYPE;",
        "begin_line": 83,
        "end_line": 83,
        "comment": "       parts of processing",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#86",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "",
        "begin_line": 86,
        "end_line": 86,
        "comment": "       parts of processing",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#94",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "private final static Class<?> CLS_LONG = f_type_1639_line_69;",
        "begin_line": 94,
        "end_line": 94,
        "comment": "       parts of processing",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#102",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "int PROBE_START_LINE_78 = 78;",
        "begin_line": 102,
        "end_line": 102,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#110",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "int PROBE_START_LINE_79 = 79;",
        "begin_line": 110,
        "end_line": 110,
        "comment": "\t note: these are primitive, hence no super types",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#117",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "int PROBE_START_LINE_80 = 80;",
        "begin_line": 117,
        "end_line": 117,
        "comment": "\t note: these are primitive, hence no super types",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#144",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "",
        "begin_line": 144,
        "end_line": 144,
        "comment": "\t @since 2.7",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#145",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "protected static final Class<?> f_cls_comparable_2603_line_94 = CLS_COMPARABLE;",
        "begin_line": 145,
        "end_line": 145,
        "comment": "\t @since 2.7",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#146",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "",
        "begin_line": 146,
        "end_line": 146,
        "comment": "\t @since 2.7",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#147",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "int PROBE_END_LINE_88 = 94;",
        "begin_line": 147,
        "end_line": 147,
        "comment": "\t @since 2.7",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#148",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "",
        "begin_line": 148,
        "end_line": 148,
        "comment": "\t @since 2.7",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeFactory.unknown#181",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknown(...)",
        "snippet": "* @since 2.7",
        "begin_line": 181,
        "end_line": 181,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown#31",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown(...)",
        "snippet": "int PROBE_START_LINE_31 = 31;",
        "begin_line": 31,
        "end_line": 31,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown#95",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown(...)",
        "snippet": "* that of creating fluent copies)",
        "begin_line": 95,
        "end_line": 95,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown#96",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown(...)",
        "snippet": "*/",
        "begin_line": 96,
        "end_line": 96,
        "comment": "    \n     * Constructor used when creating a new instance (compared to\n     * that of creating fluent copies)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown#97",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown(...)",
        "snippet": "protected MapperConfigBase(BaseSettings base,",
        "begin_line": 97,
        "end_line": 97,
        "comment": "    \n     * Constructor used when creating a new instance (compared to\n     * that of creating fluent copies)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown#98",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown(...)",
        "snippet": "SubtypeResolver str, SimpleMixInResolver mixins,",
        "begin_line": 98,
        "end_line": 98,
        "comment": "    \n     * Constructor used when creating a new instance (compared to\n     * that of creating fluent copies)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown#99",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown(...)",
        "snippet": "RootNameLookup rootNames)",
        "begin_line": 99,
        "end_line": 99,
        "comment": "    \n     * Constructor used when creating a new instance (compared to\n     * that of creating fluent copies)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown#100",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown(...)",
        "snippet": "{",
        "begin_line": 100,
        "end_line": 100,
        "comment": "    \n     * Constructor used when creating a new instance (compared to\n     * that of creating fluent copies)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown#102",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown(...)",
        "snippet": "int PROBE_START_LINE_96 = 96;",
        "begin_line": 102,
        "end_line": 102,
        "comment": "    \n     * Constructor used when creating a new instance (compared to\n     * that of creating fluent copies)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown#103",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver p_mixins_1048_line_96 = mixins;",
        "begin_line": 103,
        "end_line": 103,
        "comment": "    \n     * Constructor used when creating a new instance (compared to\n     * that of creating fluent copies)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.LRUMap.unknown#33",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "signature": "com.fasterxml.jackson.databind.util.LRUMap.unknown(...)",
        "snippet": "{",
        "begin_line": 33,
        "end_line": 33,
        "comment": "\n * Helper for simple bounded maps used for reusing lookup values.\n *<p>\n * Note that serialization behavior is such that contents are NOT serialized,\n * on assumption that all use cases are for caching where persistence\n * does not make sense. The only thing serialized is the cache size of Map.\n *<p>\n * NOTE: since version 2.4.2, this is <b>NOT</b> an LRU-based at all; reason\n * being that it is not possible to use JDK components that do LRU _AND_ perform\n * well wrt synchronization on multi-core systems. So we choose efficient synchronization\n * over potentially more efficient handling of entries.\n *<p>\n * And yes, there are efficient LRU implementations such as\n * <a href=\"https:code.google.com/p/concurrentlinkedhashmap/\">concurrentlinkedhashmap</a>;\n * but at this point we really try to keep external deps to minimum. But perhaps\n * a shaded variant may be used one day.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.LRUMap.unknown#35",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "signature": "com.fasterxml.jackson.databind.util.LRUMap.unknown(...)",
        "snippet": "int p_initial_entries_2764_line_35 = initialEntries;",
        "begin_line": 35,
        "end_line": 35,
        "comment": "\n * Helper for simple bounded maps used for reusing lookup values.\n *<p>\n * Note that serialization behavior is such that contents are NOT serialized,\n * on assumption that all use cases are for caching where persistence\n * does not make sense. The only thing serialized is the cache size of Map.\n *<p>\n * NOTE: since version 2.4.2, this is <b>NOT</b> an LRU-based at all; reason\n * being that it is not possible to use JDK components that do LRU _AND_ perform\n * well wrt synchronization on multi-core systems. So we choose efficient synchronization\n * over potentially more efficient handling of entries.\n *<p>\n * And yes, there are efficient LRU implementations such as\n * <a href=\"https:code.google.com/p/concurrentlinkedhashmap/\">concurrentlinkedhashmap</a>;\n * but at this point we really try to keep external deps to minimum. But perhaps\n * a shaded variant may be used one day.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.LRUMap.unknown#36",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "signature": "com.fasterxml.jackson.databind.util.LRUMap.unknown(...)",
        "snippet": "int PROBE_END_LINE_35 = 35;",
        "begin_line": 36,
        "end_line": 36,
        "comment": "\n * Helper for simple bounded maps used for reusing lookup values.\n *<p>\n * Note that serialization behavior is such that contents are NOT serialized,\n * on assumption that all use cases are for caching where persistence\n * does not make sense. The only thing serialized is the cache size of Map.\n *<p>\n * NOTE: since version 2.4.2, this is <b>NOT</b> an LRU-based at all; reason\n * being that it is not possible to use JDK components that do LRU _AND_ perform\n * well wrt synchronization on multi-core systems. So we choose efficient synchronization\n * over potentially more efficient handling of entries.\n *<p>\n * And yes, there are efficient LRU implementations such as\n * <a href=\"https:code.google.com/p/concurrentlinkedhashmap/\">concurrentlinkedhashmap</a>;\n * but at this point we really try to keep external deps to minimum. But perhaps\n * a shaded variant may be used one day.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.LRUMap.unknown#37",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "signature": "com.fasterxml.jackson.databind.util.LRUMap.unknown(...)",
        "snippet": "// We'll use concurrency level of 4, seems reasonable",
        "begin_line": 37,
        "end_line": 37,
        "comment": "\t\t We'll use concurrency level of 4, seems reasonable",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers.unknown#28",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java",
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers",
        "signature": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers.unknown(...)",
        "snippet": "public class StdKeyDeserializers",
        "begin_line": 28,
        "end_line": 28,
        "comment": "\n * Helper class used to contain simple/well-known key deserializers.\n * Following kinds of Objects can be handled currently:\n *<ul>\n * <li>Primitive wrappers (Boolean, Byte, Char, Short, Integer, Float, Long, Double)</li>\n * <li>Enums (usually not needed, since EnumMap doesn't call us)</li>\n * <li>{@link java.util.Date}</li>\n * <li>{@link java.util.Calendar}</li>\n * <li>{@link java.util.UUID}</li>\n * <li>{@link java.util.Locale}</li>\n * <li>Anything with constructor that takes a single String arg\n *   (if not explicitly @JsonIgnore'd)</li>\n * <li>Anything with {@code static T valueOf(String)} factory method\n *   (if not explicitly @JsonIgnore'd)</li>\n *</ul>\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.JsonSerializer.unknown#53",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/JsonSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
        "signature": "com.fasterxml.jackson.databind.JsonSerializer.unknown(...)",
        "snippet": "public abstract class JsonSerializer<T>",
        "begin_line": 53,
        "end_line": 53,
        "comment": "\n * Abstract class that defines API used by {@link ObjectMapper} (and\n * other chained {@link JsonSerializer}s too) to serialize Objects of\n * arbitrary types into JSON, using provided {@link JsonGenerator}.\n * {@link com.fasterxml.jackson.databind.ser.std.StdSerializer} instead\n * of this class, since it will implement many of optional\n * methods of this class.\n *<p>\n * NOTE: various <code>serialize</code> methods are never (to be) called\n * with null values -- caller <b>must</b> handle null values, usually\n * by calling {@link SerializerProvider#findNullValueSerializer} to obtain\n * serializer to use.\n * This also means that custom serializers can not be directly used to change\n * the output to produce when serializing null values.\n *<p>\n * If serializer is an aggregate one -- meaning it delegates handling of some\n * of its contents by using other serializer(s) -- it typically also needs\n * to implement {@link com.fasterxml.jackson.databind.ser.ResolvableSerializer},\n * which can locate secondary serializers needed. This is important to allow dynamic\n * overrides of serializers; separate call interface is needed to separate\n * resolution of secondary serializers (which may have cyclic link back\n * to serializer itself, directly or indirectly).\n *<p>\n * In addition, to support per-property annotations (to configure aspects\n * of serialization on per-property basis), serializers may want\n * to implement \n * {@link com.fasterxml.jackson.databind.ser.ContextualSerializer},\n * which allows specialization of serializers: call to\n * {@link com.fasterxml.jackson.databind.ser.ContextualSerializer#createContextual}\n * is passed information on property, and can create a newly configured\n * serializer for handling that particular property.\n *<p>\n * If both\n * {@link com.fasterxml.jackson.databind.ser.ResolvableSerializer} and\n * {@link com.fasterxml.jackson.databind.ser.ContextualSerializer}\n * are implemented, resolution of serializers occurs before\n * contextualization.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.JsonSerializer.unknown#293",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/JsonSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
        "signature": "com.fasterxml.jackson.databind.JsonSerializer.unknown(...)",
        "snippet": "public abstract static class None",
        "begin_line": 293,
        "end_line": 293,
        "comment": "    \n     * This marker class is only to be used with annotations, to\n     * indicate that <b>no serializer is configured</b>.\n     *<p>\n     * Specifically, this class is to be used as the marker for\n     * annotation {@link com.fasterxml.jackson.databind.annotation.JsonSerialize}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.unknown#17",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.unknown(...)",
        "snippet": "super(Object.class);",
        "begin_line": 17,
        "end_line": 17,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.unknown#18",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.unknown(...)",
        "snippet": "}",
        "begin_line": 18,
        "end_line": 18,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown#17",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown(...)",
        "snippet": "implements java.io.Serializable // since 2.1",
        "begin_line": 17,
        "end_line": 17,
        "comment": "\n * Configuration settings container class for {@link DeserializerFactory}.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown#18",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown(...)",
        "snippet": "{",
        "begin_line": 18,
        "end_line": 18,
        "comment": "\n * Configuration settings container class for {@link DeserializerFactory}.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown#19",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown(...)",
        "snippet": "private static final long serialVersionUID = 1L; // since 2.5",
        "begin_line": 19,
        "end_line": 19,
        "comment": "\n * Configuration settings container class for {@link DeserializerFactory}.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown#20",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown(...)",
        "snippet": "",
        "begin_line": 20,
        "end_line": 20,
        "comment": "\n * Configuration settings container class for {@link DeserializerFactory}.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown#28",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown(...)",
        "snippet": "* of key deserializers.",
        "begin_line": 28,
        "end_line": 28,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown#71",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown(...)",
        "snippet": "* Constructor for creating basic configuration with no additional",
        "begin_line": 71,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown#72",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown(...)",
        "snippet": "* handlers.",
        "begin_line": 72,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown#83",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown(...)",
        "snippet": "KeyDeserializers[] allAdditionalKeyDeserializers,",
        "begin_line": 83,
        "end_line": 83,
        "comment": "    \n     * Copy-constructor that will create an instance that contains defined\n     * set of additional deserializer providers.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown#84",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown(...)",
        "snippet": "BeanDeserializerModifier[] modifiers,",
        "begin_line": 84,
        "end_line": 84,
        "comment": "    \n     * Copy-constructor that will create an instance that contains defined\n     * set of additional deserializer providers.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown#86",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown(...)",
        "snippet": "ValueInstantiators[] vi)",
        "begin_line": 86,
        "end_line": 86,
        "comment": "    \n     * Copy-constructor that will create an instance that contains defined\n     * set of additional deserializer providers.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown#88",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown(...)",
        "snippet": "int PROBE_START_LINE_84 = 85;",
        "begin_line": 88,
        "end_line": 88,
        "comment": "    \n     * Copy-constructor that will create an instance that contains defined\n     * set of additional deserializer providers.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown#89",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.deser.Deserializers[] p_all_additional_deserializers_992_line_84 = allAdditionalDeserializers;",
        "begin_line": 89,
        "end_line": 89,
        "comment": "    \n     * Copy-constructor that will create an instance that contains defined\n     * set of additional deserializer providers.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown#90",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown(...)",
        "snippet": "boolean deserializer_factory_config1_expr9_line_84 = p_all_additional_deserializers_992_line_84 == null;",
        "begin_line": 90,
        "end_line": 90,
        "comment": "    \n     * Copy-constructor that will create an instance that contains defined\n     * set of additional deserializer providers.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown#91",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.unknown(...)",
        "snippet": "boolean deserializer_factory_config1_expr8_line_84 = (deserializer_factory_config1_expr9_line_84);",
        "begin_line": 91,
        "end_line": 91,
        "comment": "    \n     * Copy-constructor that will create an instance that contains defined\n     * set of additional deserializer providers.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.BeanDescription.unknown#42",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/BeanDescription.java",
        "class_name": "com.fasterxml.jackson.databind.BeanDescription",
        "signature": "com.fasterxml.jackson.databind.BeanDescription.unknown(...)",
        "snippet": "protected BeanDescription(JavaType type) {",
        "begin_line": 42,
        "end_line": 42,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.BeanDescription.unknown#43",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/BeanDescription.java",
        "class_name": "com.fasterxml.jackson.databind.BeanDescription",
        "signature": "com.fasterxml.jackson.databind.BeanDescription.unknown(...)",
        "snippet": "int PROBE_START_LINE_43 = 43;",
        "begin_line": 43,
        "end_line": 43,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.BeanDescription.unknown#44",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/BeanDescription.java",
        "class_name": "com.fasterxml.jackson.databind.BeanDescription",
        "signature": "com.fasterxml.jackson.databind.BeanDescription.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.JavaType p_type_110_line_43 = type;",
        "begin_line": 44,
        "end_line": 44,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer.unknown#21",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer.unknown(...)",
        "snippet": "int PROBE_START_LINE_21 = 21;",
        "begin_line": 21,
        "end_line": 21,
        "comment": "\n * Specialized {@link JsonSerializer} to output {@link java.util.UUID}s.\n * Beyond optimized access and writing of textual representation (which\n * is the default handling in most cases), it will alternatively\n * allow serialization using raw binary output (as 16-byte block)\n * if underlying data format has efficient means to access that.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer.unknown#23",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer.unknown(...)",
        "snippet": "static final char[] uuidserializer1_expr1_line_21 = \"0123456789abcdef\".toCharArray();",
        "begin_line": 23,
        "end_line": 23,
        "comment": "\n * Specialized {@link JsonSerializer} to output {@link java.util.UUID}s.\n * Beyond optimized access and writing of textual representation (which\n * is the default handling in most cases), it will alternatively\n * allow serialization using raw binary output (as 16-byte block)\n * if underlying data format has efficient means to access that.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.PropertyName.unknown#28",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "signature": "com.fasterxml.jackson.databind.PropertyName.unknown(...)",
        "snippet": "/**",
        "begin_line": 28,
        "end_line": 28,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.PropertyName.unknown#35",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "signature": "com.fasterxml.jackson.databind.PropertyName.unknown(...)",
        "snippet": "",
        "begin_line": 35,
        "end_line": 35,
        "comment": "\t\n     * Special placeholder value that indicates that name to use should be\n     * based on the standard heuristics. This can be different from returning\n     * null, as null means \"no information available, whereas this value\n     * indicates explicit defaulting.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.PropertyName.unknown#60",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "signature": "com.fasterxml.jackson.databind.PropertyName.unknown(...)",
        "snippet": "/**",
        "begin_line": 60,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.PropertyName.unknown#61",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "signature": "com.fasterxml.jackson.databind.PropertyName.unknown(...)",
        "snippet": "* Lazily-constructed efficient representation of the simple name.",
        "begin_line": 61,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.PropertyName.unknown#64",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "signature": "com.fasterxml.jackson.databind.PropertyName.unknown(...)",
        "snippet": "* concurrent access in multi-core environments; due to statelessness",
        "begin_line": 64,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.PropertyName.unknown#65",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "signature": "com.fasterxml.jackson.databind.PropertyName.unknown(...)",
        "snippet": "* of {@link SerializedString} at most leads to multiple instantiations.",
        "begin_line": 65,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.PropertyName.unknown#66",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "signature": "com.fasterxml.jackson.databind.PropertyName.unknown(...)",
        "snippet": "*",
        "begin_line": 66,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.PropertyName.unknown#67",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "signature": "com.fasterxml.jackson.databind.PropertyName.unknown(...)",
        "snippet": "* @since 2.4",
        "begin_line": 67,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.unknown#35",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
        "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.unknown(...)",
        "snippet": "public SimpleMixInResolver(ClassIntrospector.MixInResolver overrides) {",
        "begin_line": 35,
        "end_line": 35,
        "comment": "    \n     * Simple mix-in targets defined locally.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.unknown#36",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
        "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.unknown(...)",
        "snippet": "int PROBE_START_LINE_36 = 36;",
        "begin_line": 36,
        "end_line": 36,
        "comment": "    \n     * Simple mix-in targets defined locally.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.unknown#37",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
        "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver p_overrides_1815_line_36 = overrides;",
        "begin_line": 37,
        "end_line": 37,
        "comment": "    \n     * Simple mix-in targets defined locally.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.unknown#19",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.unknown(...)",
        "snippet": "super(t);",
        "begin_line": 19,
        "end_line": 19,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.unknown#20",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.unknown(...)",
        "snippet": "}",
        "begin_line": 20,
        "end_line": 20,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.unknown#28",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.unknown(...)",
        "snippet": "super((Class<T>) t);",
        "begin_line": 28,
        "end_line": 28,
        "comment": "    \n     * Alternate constructor that is (alas!) needed to work\n     * around kinks of generic type handling\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.unknown#29",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.unknown(...)",
        "snippet": "}",
        "begin_line": 29,
        "end_line": 29,
        "comment": "    \n     * Alternate constructor that is (alas!) needed to work\n     * around kinks of generic type handling\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBase.unknown#18",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBase.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
        "signature": "com.fasterxml.jackson.databind.type.TypeBase.unknown(...)",
        "snippet": "",
        "begin_line": 18,
        "end_line": 18,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBase.unknown#19",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBase.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
        "signature": "com.fasterxml.jackson.databind.type.TypeBase.unknown(...)",
        "snippet": "int PROBE_START_LINE_18 = 18;",
        "begin_line": 19,
        "end_line": 19,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBase.unknown#46",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBase.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
        "signature": "com.fasterxml.jackson.databind.type.TypeBase.unknown(...)",
        "snippet": "",
        "begin_line": 46,
        "end_line": 46,
        "comment": "    \n     * Lazily initialized external representation of the type\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBase.unknown#47",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBase.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
        "signature": "com.fasterxml.jackson.databind.type.TypeBase.unknown(...)",
        "snippet": "/**",
        "begin_line": 47,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBase.unknown#48",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBase.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
        "signature": "com.fasterxml.jackson.databind.type.TypeBase.unknown(...)",
        "snippet": "* Main constructor to use by extending classes.",
        "begin_line": 48,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBase.unknown#49",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBase.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
        "signature": "com.fasterxml.jackson.databind.type.TypeBase.unknown(...)",
        "snippet": "*/",
        "begin_line": 49,
        "end_line": 49,
        "comment": "    \n     * Main constructor to use by extending classes.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBase.unknown#50",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBase.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
        "signature": "com.fasterxml.jackson.databind.type.TypeBase.unknown(...)",
        "snippet": "protected TypeBase(Class<?> raw, TypeBindings bindings, JavaType superClass, JavaType[] superInts,",
        "begin_line": 50,
        "end_line": 50,
        "comment": "    \n     * Main constructor to use by extending classes.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown#27",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown(...)",
        "snippet": "*/",
        "begin_line": 27,
        "end_line": 27,
        "comment": "    \n     * Method called by {@link BasicSerializerFactory} to access\n     * all serializers this class provides.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown#30",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown(...)",
        "snippet": "HashMap<Class<?>,Object> sers = new HashMap<Class<?>,Object>();",
        "begin_line": 30,
        "end_line": 30,
        "comment": "    \n     * Method called by {@link BasicSerializerFactory} to access\n     * all serializers this class provides.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown#32",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown(...)",
        "snippet": "int PROBE_START_LINE_30 = 30;",
        "begin_line": 32,
        "end_line": 32,
        "comment": "    \n     * Method called by {@link BasicSerializerFactory} to access\n     * all serializers this class provides.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown#33",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown(...)",
        "snippet": "ToStringSerializer f_instance_1956_line_30 = ToStringSerializer.instance;",
        "begin_line": 33,
        "end_line": 33,
        "comment": "    \n     * Method called by {@link BasicSerializerFactory} to access\n     * all serializers this class provides.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown#35",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown(...)",
        "snippet": "// First things that 'toString()' can handle",
        "begin_line": 35,
        "end_line": 35,
        "comment": "\t\t First things that 'toString()' can handle",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown#36",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown(...)",
        "snippet": "final ToStringSerializer sls = f_instance_1956_line_30;",
        "begin_line": 36,
        "end_line": 36,
        "comment": "\t\t First things that 'toString()' can handle",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown#37",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown(...)",
        "snippet": "",
        "begin_line": 37,
        "end_line": 37,
        "comment": "\t\t First things that 'toString()' can handle",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown#38",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown(...)",
        "snippet": "int PROBE_START_LINE_32 = 32;",
        "begin_line": 38,
        "end_line": 38,
        "comment": "\t\t First things that 'toString()' can handle",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown#41",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown(...)",
        "snippet": "int PROBE_END_LINE_32 = 32;",
        "begin_line": 41,
        "end_line": 41,
        "comment": "\t\t First things that 'toString()' can handle",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown#42",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown(...)",
        "snippet": "v_sers_2359_line_32.put(java.net.URL.class, v_sls_2360_line_32);",
        "begin_line": 42,
        "end_line": 42,
        "comment": "\t\t First things that 'toString()' can handle",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown#43",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown(...)",
        "snippet": "int PROBE_START_LINE_33 = 33;",
        "begin_line": 43,
        "end_line": 43,
        "comment": "\t\t First things that 'toString()' can handle",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown#46",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown(...)",
        "snippet": "int PROBE_END_LINE_33 = 33;",
        "begin_line": 46,
        "end_line": 46,
        "comment": "\t\t First things that 'toString()' can handle",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown#47",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown(...)",
        "snippet": "v_sers_2359_line_33.put(java.net.URI.class, v_sls_2360_line_33);",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\t\t First things that 'toString()' can handle",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown#50",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown(...)",
        "snippet": "HashMap<Class<?>, Object> v_sers_2359_line_35 = (HashMap<Class<?>, Object>) (sers);",
        "begin_line": 50,
        "end_line": 50,
        "comment": "\t\t First things that 'toString()' can handle",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown#51",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer v_sls_2360_line_35 = sls;",
        "begin_line": 51,
        "end_line": 51,
        "comment": "\t\t First things that 'toString()' can handle",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown#53",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.unknown(...)",
        "snippet": "v_sers_2359_line_35.put(Currency.class, v_sls_2360_line_35);",
        "begin_line": 53,
        "end_line": 53,
        "comment": "\t\t First things that 'toString()' can handle",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown#19",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown(...)",
        "snippet": "* is stateless and reusable)",
        "begin_line": 19,
        "end_line": 19,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown#21",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown(...)",
        "snippet": "protected final static Serializers[] NO_SERIALIZERS = new Serializers[0];",
        "begin_line": 21,
        "end_line": 21,
        "comment": "    \n     * Constant for empty <code>Serializers</code> array (which by definition\n     * is stateless and reusable)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown#42",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown(...)",
        "snippet": "",
        "begin_line": 42,
        "end_line": 42,
        "comment": "    \n     * List of modifiers that can change the way {@link BeanSerializer} instances\n     * are configured and constructed.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown#43",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown(...)",
        "snippet": "public SerializerFactoryConfig() {",
        "begin_line": 43,
        "end_line": 43,
        "comment": "    \n     * List of modifiers that can change the way {@link BeanSerializer} instances\n     * are configured and constructed.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown#48",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown(...)",
        "snippet": "Serializers[] allAdditionalKeySerializers,",
        "begin_line": 48,
        "end_line": 48,
        "comment": "    \n     * List of modifiers that can change the way {@link BeanSerializer} instances\n     * are configured and constructed.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown#49",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown(...)",
        "snippet": "BeanSerializerModifier[] modifiers)",
        "begin_line": 49,
        "end_line": 49,
        "comment": "    \n     * List of modifiers that can change the way {@link BeanSerializer} instances\n     * are configured and constructed.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown#51",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown(...)",
        "snippet": "int PROBE_START_LINE_49 = 50;",
        "begin_line": 51,
        "end_line": 51,
        "comment": "    \n     * List of modifiers that can change the way {@link BeanSerializer} instances\n     * are configured and constructed.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown#53",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown(...)",
        "snippet": "boolean serializer_factory_config1_expr6_line_49 = p_all_additional_serializers_1104_line_49 == null;",
        "begin_line": 53,
        "end_line": 53,
        "comment": "    \n     * List of modifiers that can change the way {@link BeanSerializer} instances\n     * are configured and constructed.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown#54",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.unknown(...)",
        "snippet": "boolean serializer_factory_config1_expr5_line_49 = (serializer_factory_config1_expr6_line_49);",
        "begin_line": 54,
        "end_line": 54,
        "comment": "    \n     * List of modifiers that can change the way {@link BeanSerializer} instances\n     * are configured and constructed.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.DeserializerFactory.unknown#41",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.unknown(...)",
        "snippet": "public abstract class DeserializerFactory",
        "begin_line": 41,
        "end_line": 41,
        "comment": "\n * Abstract class that defines API used by {@link DeserializationContext}\n * to construct actual\n * {@link JsonDeserializer} instances (which are then cached by\n * context and/or dedicated cache).\n *<p>\n * Since there are multiple broad categories of deserializers, there are \n * multiple factory methods:\n *<ul>\n * <li>For JSON \"Array\" type, we need 2 methods: one to deal with expected\n *   Java arrays ({@link #createArrayDeserializer})\n *   and the other for other Java containers like {@link java.util.List}s\n *   and {@link java.util.Set}s ({@link #createCollectionDeserializer}).\n *   Actually there is also a third method for \"Collection-like\" types;\n *   things like Scala collections that act like JDK collections but do not\n *   implement same interfaces.\n *  </li>\n * <li>For JSON \"Object\" type, we need 2 methods: one to deal with\n *   expected Java {@link java.util.Map}s\n *   ({@link #createMapDeserializer}), and another for POJOs\n *   ({@link #createBeanDeserializer}.\n *   As an additional twist there is also a callback for \"Map-like\" types,\n *   mostly to make it possible to support Scala Maps (which are NOT JDK\n *   Map compatible).\n *  </li>\n * <li>For Tree Model ({@link com.fasterxml.jackson.databind.JsonNode}) properties there is\n *    {@link #createTreeDeserializer}\n * <li>For enumerated types ({@link java.lang.Enum}) there is\n *    {@link #createEnumDeserializer}\n *  </li>\n * <li>For all other types, {@link #createBeanDeserializer} is used.\n * </ul>\n *<p>\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.DeserializerFactory.unknown#43",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.unknown(...)",
        "snippet": "protected final static Deserializers[] NO_DESERIALIZERS = new Deserializers[0];",
        "begin_line": 43,
        "end_line": 43,
        "comment": "\n * Abstract class that defines API used by {@link DeserializationContext}\n * to construct actual\n * {@link JsonDeserializer} instances (which are then cached by\n * context and/or dedicated cache).\n *<p>\n * Since there are multiple broad categories of deserializers, there are \n * multiple factory methods:\n *<ul>\n * <li>For JSON \"Array\" type, we need 2 methods: one to deal with expected\n *   Java arrays ({@link #createArrayDeserializer})\n *   and the other for other Java containers like {@link java.util.List}s\n *   and {@link java.util.Set}s ({@link #createCollectionDeserializer}).\n *   Actually there is also a third method for \"Collection-like\" types;\n *   things like Scala collections that act like JDK collections but do not\n *   implement same interfaces.\n *  </li>\n * <li>For JSON \"Object\" type, we need 2 methods: one to deal with\n *   expected Java {@link java.util.Map}s\n *   ({@link #createMapDeserializer}), and another for POJOs\n *   ({@link #createBeanDeserializer}.\n *   As an additional twist there is also a callback for \"Map-like\" types,\n *   mostly to make it possible to support Scala Maps (which are NOT JDK\n *   Map compatible).\n *  </li>\n * <li>For Tree Model ({@link com.fasterxml.jackson.databind.JsonNode}) properties there is\n *    {@link #createTreeDeserializer}\n * <li>For enumerated types ({@link java.lang.Enum}) there is\n *    {@link #createEnumDeserializer}\n *  </li>\n * <li>For all other types, {@link #createBeanDeserializer} is used.\n * </ul>\n *<p>\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.RootNameLookup.unknown#21",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/RootNameLookup.java",
        "class_name": "com.fasterxml.jackson.databind.util.RootNameLookup",
        "signature": "com.fasterxml.jackson.databind.util.RootNameLookup.unknown(...)",
        "snippet": "public RootNameLookup() {",
        "begin_line": 21,
        "end_line": 21,
        "comment": "    \n     * For efficient operation, let's try to minimize number of times we\n     * need to introspect root element name to use.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.RootNameLookup.unknown#22",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/RootNameLookup.java",
        "class_name": "com.fasterxml.jackson.databind.util.RootNameLookup",
        "signature": "com.fasterxml.jackson.databind.util.RootNameLookup.unknown(...)",
        "snippet": "_rootNames = new LRUMap<ClassKey,PropertyName>(20, 200);",
        "begin_line": 22,
        "end_line": 22,
        "comment": "    \n     * For efficient operation, let's try to minimize number of times we\n     * need to introspect root element name to use.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.RootNameLookup.unknown#23",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/RootNameLookup.java",
        "class_name": "com.fasterxml.jackson.databind.util.RootNameLookup",
        "signature": "com.fasterxml.jackson.databind.util.RootNameLookup.unknown(...)",
        "snippet": "}",
        "begin_line": 23,
        "end_line": 23,
        "comment": "    \n     * For efficient operation, let's try to minimize number of times we\n     * need to introspect root element name to use.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#38",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "extends DeserializerFactory",
        "begin_line": 38,
        "end_line": 38,
        "comment": "\n * Abstract factory base class that can provide deserializers for standard\n * JDK classes, including collection classes and simple heuristics for\n * \"upcasting\" common collection interface types\n * (such as {@link java.util.Collection}).\n *<p>\n * Since all simple deserializers are eagerly instantiated, and there is\n * no additional introspection or customizability of these types,\n * this factory is stateless.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#39",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "implements java.io.Serializable",
        "begin_line": 39,
        "end_line": 39,
        "comment": "\n * Abstract factory base class that can provide deserializers for standard\n * JDK classes, including collection classes and simple heuristics for\n * \"upcasting\" common collection interface types\n * (such as {@link java.util.Collection}).\n *<p>\n * Since all simple deserializers are eagerly instantiated, and there is\n * no additional introspection or customizability of these types,\n * this factory is stateless.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#40",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "{",
        "begin_line": 40,
        "end_line": 40,
        "comment": "\n * Abstract factory base class that can provide deserializers for standard\n * JDK classes, including collection classes and simple heuristics for\n * \"upcasting\" common collection interface types\n * (such as {@link java.util.Collection}).\n *<p>\n * Since all simple deserializers are eagerly instantiated, and there is\n * no additional introspection or customizability of these types,\n * this factory is stateless.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#41",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "private final static Class<?> CLASS_OBJECT = Object.class;",
        "begin_line": 41,
        "end_line": 41,
        "comment": "\n * Abstract factory base class that can provide deserializers for standard\n * JDK classes, including collection classes and simple heuristics for\n * \"upcasting\" common collection interface types\n * (such as {@link java.util.Collection}).\n *<p>\n * Since all simple deserializers are eagerly instantiated, and there is\n * no additional introspection or customizability of these types,\n * this factory is stateless.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#42",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "private final static Class<?> CLASS_STRING = String.class;",
        "begin_line": 42,
        "end_line": 42,
        "comment": "\n * Abstract factory base class that can provide deserializers for standard\n * JDK classes, including collection classes and simple heuristics for\n * \"upcasting\" common collection interface types\n * (such as {@link java.util.Collection}).\n *<p>\n * Since all simple deserializers are eagerly instantiated, and there is\n * no additional introspection or customizability of these types,\n * this factory is stateless.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#48",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "* We need a placeholder for creator properties that don't have name",
        "begin_line": 48,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#55",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "* cases where the most common concrete Maps will do.",
        "begin_line": 55,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#58",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "final static HashMap<String, Class<? extends Map>> _mapFallbacks =",
        "begin_line": 58,
        "end_line": 58,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#59",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "new HashMap<String, Class<? extends Map>>();",
        "begin_line": 59,
        "end_line": 59,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#60",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "static {",
        "begin_line": 60,
        "end_line": 60,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#62",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "HashMap<String, Class<? extends java.util.Map>> f__map_fallbacks_1119_line_58 = (HashMap<String, Class<? extends java.util.Map>>) (_mapFallbacks);",
        "begin_line": 62,
        "end_line": 62,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#63",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "String basic_deserializer_factory1_expr10_line_58 = Map.class.getName();",
        "begin_line": 63,
        "end_line": 63,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#72",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "HashMap<String, Class<? extends java.util.Map>> f__map_fallbacks_1119_line_60 = (HashMap<String, Class<? extends java.util.Map>>) (_mapFallbacks);",
        "begin_line": 72,
        "end_line": 72,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#75",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "f__map_fallbacks_1119_line_60.put(basic_deserializer_factory1_expr18_line_60, TreeMap.class);",
        "begin_line": 75,
        "end_line": 75,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#76",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "",
        "begin_line": 76,
        "end_line": 76,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#77",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "int PROBE_START_LINE_62 = 62;",
        "begin_line": 77,
        "end_line": 77,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#78",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "HashMap<String, Class<? extends java.util.Map>> f__map_fallbacks_1119_line_62 = (HashMap<String, Class<? extends java.util.Map>>) (_mapFallbacks);",
        "begin_line": 78,
        "end_line": 78,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#79",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "String basic_deserializer_factory1_expr22_line_62 = java.util.NavigableMap.class.getName();",
        "begin_line": 79,
        "end_line": 79,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#86",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "f__map_fallbacks_1119_line_63.put(basic_deserializer_factory1_expr26_line_63,",
        "begin_line": 86,
        "end_line": 86,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#87",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "java.util.concurrent.ConcurrentSkipListMap.class);",
        "begin_line": 87,
        "end_line": 87,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#88",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "}",
        "begin_line": 88,
        "end_line": 88,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#108",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "int PROBE_START_LINE_77 = 77;",
        "begin_line": 108,
        "end_line": 108,
        "comment": "    /* We do some defaulting for abstract Collection classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Collection will do.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#109",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "HashMap<String, Class<? extends java.util.Collection>> f__collection_fallbacks_1120_line_77 = (HashMap<String, Class<? extends java.util.Collection>>) (_collectionFallbacks);",
        "begin_line": 109,
        "end_line": 109,
        "comment": "    /* We do some defaulting for abstract Collection classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Collection will do.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown#110",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.unknown(...)",
        "snippet": "String basic_deserializer_factory1_expr39_line_77 = Set.class.getName();",
        "begin_line": 110,
        "end_line": 110,
        "comment": "    /* We do some defaulting for abstract Collection classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Collection will do.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown#22",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown(...)",
        "snippet": "{",
        "begin_line": 22,
        "end_line": 22,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown#97",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown(...)",
        "snippet": "*/",
        "begin_line": 97,
        "end_line": 97,
        "comment": "    \n     * Flag to indicate whether creator information has been resolved\n     * or not.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown#141",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown(...)",
        "snippet": "AnnotationMap classAnnotations)",
        "begin_line": 141,
        "end_line": 141,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown#142",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown(...)",
        "snippet": "{",
        "begin_line": 142,
        "end_line": 142,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown#143",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown(...)",
        "snippet": "int PROBE_START_LINE_142 = 142;",
        "begin_line": 143,
        "end_line": 143,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown#144",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.JavaType p_type_1502_line_142 = type;",
        "begin_line": 144,
        "end_line": 144,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown#145",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown(...)",
        "snippet": "int PROBE_END_LINE_142 = 142;",
        "begin_line": 145,
        "end_line": 145,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown#146",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown(...)",
        "snippet": "_type = p_type_1502_line_142;",
        "begin_line": 146,
        "end_line": 146,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown#147",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown(...)",
        "snippet": "int PROBE_START_LINE_143 = 143;",
        "begin_line": 147,
        "end_line": 147,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown#148",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown(...)",
        "snippet": "Class<?> p_raw_type_1503_line_143 = rawType;",
        "begin_line": 148,
        "end_line": 148,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown#149",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown(...)",
        "snippet": "int PROBE_END_LINE_143 = 143;",
        "begin_line": 149,
        "end_line": 149,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown#151",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown(...)",
        "snippet": "int PROBE_START_LINE_144 = 144;",
        "begin_line": 151,
        "end_line": 151,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown#152",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.type.TypeBindings p_bindings_1504_line_144 = bindings;",
        "begin_line": 152,
        "end_line": 152,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown#197",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown(...)",
        "snippet": "* @since 2.7",
        "begin_line": 197,
        "end_line": 197,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown#198",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.unknown(...)",
        "snippet": "*/",
        "begin_line": 198,
        "end_line": 198,
        "comment": "    \n     * Factory method that instantiates an instance. Returned instance\n     * will only be initialized with class annotations, but not with\n     * any method information.\n     * \n     * @since 2.7\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.unknown#42",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
        "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.unknown(...)",
        "snippet": "super(type);",
        "begin_line": 42,
        "end_line": 42,
        "comment": "    \n     * Specific format to use, if not default format: non null value\n     * also indicates that serialization is to be done as JSON String,\n     * not numeric timestamp, unless {@link #_useTimestamp} is true.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.unknown#43",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
        "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.unknown(...)",
        "snippet": "int PROBE_START_LINE_43 = 43;",
        "begin_line": 43,
        "end_line": 43,
        "comment": "    \n     * Specific format to use, if not default format: non null value\n     * also indicates that serialization is to be done as JSON String,\n     * not numeric timestamp, unless {@link #_useTimestamp} is true.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.unknown#44",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
        "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.unknown(...)",
        "snippet": "Boolean p_use_timestamp_2255_line_43 = useTimestamp;",
        "begin_line": 44,
        "end_line": 44,
        "comment": "    \n     * Specific format to use, if not default format: non null value\n     * also indicates that serialization is to be done as JSON String,\n     * not numeric timestamp, unless {@link #_useTimestamp} is true.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.unknown#45",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
        "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.unknown(...)",
        "snippet": "int PROBE_END_LINE_43 = 43;",
        "begin_line": 45,
        "end_line": 45,
        "comment": "    \n     * Specific format to use, if not default format: non null value\n     * also indicates that serialization is to be done as JSON String,\n     * not numeric timestamp, unless {@link #_useTimestamp} is true.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.node.JsonNodeFactory.unknown#24",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
        "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.unknown(...)",
        "snippet": "private static final JsonNodeFactory decimalsNormalized",
        "begin_line": 24,
        "end_line": 24,
        "comment": "     with 2.2",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.node.JsonNodeFactory.unknown#26",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
        "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.unknown(...)",
        "snippet": "private static final JsonNodeFactory decimalsAsIs",
        "begin_line": 26,
        "end_line": 26,
        "comment": "     with 2.2",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.node.JsonNodeFactory.unknown#34",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
        "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.unknown(...)",
        "snippet": "",
        "begin_line": 34,
        "end_line": 34,
        "comment": "     with 2.2",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.node.JsonNodeFactory.unknown#62",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
        "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.unknown(...)",
        "snippet": "*",
        "begin_line": 62,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.node.JsonNodeFactory.unknown#63",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
        "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.unknown(...)",
        "snippet": "* @param bigDecimalExact see description",
        "begin_line": 63,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.node.JsonNodeFactory.unknown#64",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
        "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
        "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.unknown(...)",
        "snippet": "*",
        "begin_line": 64,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#61",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "*/",
        "begin_line": 61,
        "end_line": 61,
        "comment": "    \n     * Actually it may not make much sense to eagerly instantiate all\n     * kinds of serializers: so this Map actually contains class references,\n     * not instances\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#63",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "",
        "begin_line": 63,
        "end_line": 63,
        "comment": "    \n     * Actually it may not make much sense to eagerly instantiate all\n     * kinds of serializers: so this Map actually contains class references,\n     * not instances\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#70",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "",
        "begin_line": 70,
        "end_line": 70,
        "comment": "    \n     * Actually it may not make much sense to eagerly instantiate all\n     * kinds of serializers: so this Map actually contains class references,\n     * not instances\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#71",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "int PROBE_START_LINE_70 = 70;",
        "begin_line": 71,
        "end_line": 71,
        "comment": "    \n     * Actually it may not make much sense to eagerly instantiate all\n     * kinds of serializers: so this Map actually contains class references,\n     * not instances\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#72",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "HashMap<String, JsonSerializer<?>> v_concrete_1954_line_70 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 72,
        "end_line": 72,
        "comment": "    \n     * Actually it may not make much sense to eagerly instantiate all\n     * kinds of serializers: so this Map actually contains class references,\n     * not instances\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#73",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "String basic_serializer_factory1_expr4_line_70 = String.class.getName();",
        "begin_line": 73,
        "end_line": 73,
        "comment": "    \n     * Actually it may not make much sense to eagerly instantiate all\n     * kinds of serializers: so this Map actually contains class references,\n     * not instances\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#74",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "int PROBE_END_LINE_70 = 70;",
        "begin_line": 74,
        "end_line": 74,
        "comment": "    \n     * Actually it may not make much sense to eagerly instantiate all\n     * kinds of serializers: so this Map actually contains class references,\n     * not instances\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#75",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "/* String and string-like types (note: date types explicitly",
        "begin_line": 75,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#78",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "v_concrete_1954_line_70.put(basic_serializer_factory1_expr4_line_70, new StringSerializer());",
        "begin_line": 78,
        "end_line": 78,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#79",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "int PROBE_START_LINE_71 = 71;",
        "begin_line": 79,
        "end_line": 79,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#80",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "ToStringSerializer f_instance_1956_line_71 = ToStringSerializer.instance;",
        "begin_line": 80,
        "end_line": 80,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#83",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "int PROBE_START_LINE_72 = 72;",
        "begin_line": 83,
        "end_line": 83,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#84",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "HashMap<String, JsonSerializer<?>> v_concrete_1954_line_72 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 84,
        "end_line": 84,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#88",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "v_concrete_1954_line_72.put(basic_serializer_factory1_expr8_line_72, v_sls_1955_line_72);",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#89",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "int PROBE_START_LINE_73 = 73;",
        "begin_line": 89,
        "end_line": 89,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#90",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "HashMap<String, JsonSerializer<?>> v_concrete_1954_line_73 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 90,
        "end_line": 90,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#92",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer v_sls_1955_line_73 = sls;",
        "begin_line": 92,
        "end_line": 92,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#95",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "int PROBE_START_LINE_74 = 74;",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#96",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "HashMap<String, JsonSerializer<?>> v_concrete_1954_line_74 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 96,
        "end_line": 96,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#99",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "int PROBE_END_LINE_74 = 74;",
        "begin_line": 99,
        "end_line": 99,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#100",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "v_concrete_1954_line_74.put(basic_serializer_factory1_expr14_line_74, v_sls_1955_line_74);",
        "begin_line": 100,
        "end_line": 100,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#101",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "int PROBE_START_LINE_75 = 75;",
        "begin_line": 101,
        "end_line": 101,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#102",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "HashMap<String, JsonSerializer<?>> v_concrete_1954_line_75 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 102,
        "end_line": 102,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#103",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "Class<Character> f_type_1957_line_75 = Character.TYPE;",
        "begin_line": 103,
        "end_line": 103,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#105",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer v_sls_1955_line_75 = sls;",
        "begin_line": 105,
        "end_line": 105,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#106",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "int PROBE_END_LINE_75 = 75;",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#107",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "v_concrete_1954_line_75.put(basic_serializer_factory1_expr17_line_75, v_sls_1955_line_75);",
        "begin_line": 107,
        "end_line": 107,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#110",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "HashMap<String, JsonSerializer<?>> v_concrete_1954_line_78 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 110,
        "end_line": 110,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#114",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "int PROBE_START_LINE_79 = 79;",
        "begin_line": 114,
        "end_line": 114,
        "comment": "\t\t Primitives/wrappers for primitives (primitives needed for Beans)",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#116",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "Class<Boolean> f_type_1633_line_79 = Boolean.TYPE;",
        "begin_line": 116,
        "end_line": 116,
        "comment": "\t\t Primitives/wrappers for primitives (primitives needed for Beans)",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#117",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "String basic_serializer_factory1_expr20_line_79 = f_type_1633_line_79.getName();",
        "begin_line": 117,
        "end_line": 117,
        "comment": "\t\t Primitives/wrappers for primitives (primitives needed for Beans)",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#118",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "int PROBE_END_LINE_79 = 79;",
        "begin_line": 118,
        "end_line": 118,
        "comment": "\t\t Primitives/wrappers for primitives (primitives needed for Beans)",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#143",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "// Other discrete non-container types:",
        "begin_line": 143,
        "end_line": 143,
        "comment": "\t\t Other discrete non-container types:",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#144",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "// First, Date/Time zoo:",
        "begin_line": 144,
        "end_line": 144,
        "comment": "         First, Date/Time zoo:",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown#145",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.unknown(...)",
        "snippet": "v_concrete_1954_line_88.put(basic_serializer_factory1_expr39_line_88, f_instance_1958_line_88);",
        "begin_line": 145,
        "end_line": 145,
        "comment": "         First, Date/Time zoo:",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer.unknown#28",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer.unknown(...)",
        "snippet": "super(Object.class);",
        "begin_line": 28,
        "end_line": 28,
        "comment": "\n * Special bogus \"serializer\" that will throw\n * {@link JsonGenerationException} if its {@link #serialize}\n * gets invoked. Most commonly registered as handler for unknown types,\n * as well as for catching unintended usage (like trying to use null\n * as Map/Object key).\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer.unknown#29",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer.unknown(...)",
        "snippet": "int PROBE_START_LINE_29 = 29;",
        "begin_line": 29,
        "end_line": 29,
        "comment": "\n * Special bogus \"serializer\" that will throw\n * {@link JsonGenerationException} if its {@link #serialize}\n * gets invoked. Most commonly registered as handler for unknown types,\n * as well as for catching unintended usage (like trying to use null\n * as Map/Object key).\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer.unknown#30",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer.unknown(...)",
        "snippet": "String p_msg_2204_line_29 = msg;",
        "begin_line": 30,
        "end_line": 30,
        "comment": "\n * Special bogus \"serializer\" that will throw\n * {@link JsonGenerationException} if its {@link #serialize}\n * gets invoked. Most commonly registered as handler for unknown types,\n * as well as for catching unintended usage (like trying to use null\n * as Map/Object key).\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown#45",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown(...)",
        "snippet": "",
        "begin_line": 45,
        "end_line": 45,
        "comment": "\n * Interface that defines functionality accessible through both\n * serialization and deserialization configuration objects;\n * accessors to mode-independent configuration settings\n * and such.\n * In addition, shared features are defined\n * in {@link MapperFeature}.\n *<p>\n * Small part of implementation is included here by aggregating\n * {@link BaseSettings} instance that contains configuration\n * that is shared between different types of instances.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown#50",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown(...)",
        "snippet": "",
        "begin_line": 50,
        "end_line": 50,
        "comment": "\n * Interface that defines functionality accessible through both\n * serialization and deserialization configuration objects;\n * accessors to mode-independent configuration settings\n * and such.\n * In addition, shared features are defined\n * in {@link MapperFeature}.\n *<p>\n * Small part of implementation is included here by aggregating\n * {@link BaseSettings} instance that contains configuration\n * that is shared between different types of instances.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown#69",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown(...)",
        "snippet": "* Set of shared mapper features enabled.",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown#70",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown(...)",
        "snippet": "*/",
        "begin_line": 70,
        "end_line": 70,
        "comment": "    \n     * Set of shared mapper features enabled.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown#71",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown(...)",
        "snippet": "protected final int _mapperFeatures;",
        "begin_line": 71,
        "end_line": 71,
        "comment": "    \n     * Set of shared mapper features enabled.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown#72",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown(...)",
        "snippet": "",
        "begin_line": 72,
        "end_line": 72,
        "comment": "    \n     * Set of shared mapper features enabled.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown#98",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown(...)",
        "snippet": "_base = src._base;",
        "begin_line": 98,
        "end_line": 98,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown#99",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown(...)",
        "snippet": "_mapperFeatures = mapperFeatures;",
        "begin_line": 99,
        "end_line": 99,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown#100",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown(...)",
        "snippet": "}",
        "begin_line": 100,
        "end_line": 100,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown#101",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown(...)",
        "snippet": "",
        "begin_line": 101,
        "end_line": 101,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown#104",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown(...)",
        "snippet": "_base = base;",
        "begin_line": 104,
        "end_line": 104,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown#141",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.unknown(...)",
        "snippet": "return v_flags_1019_line_104;",
        "begin_line": 141,
        "end_line": 141,
        "comment": "    \n     * Method that calculates bit set (flags) of all features that\n     * are enabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase.unknown#21",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NonTypedScalarSerializerBase.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase",
        "signature": "com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase.unknown(...)",
        "snippet": "super(t);",
        "begin_line": 21,
        "end_line": 21,
        "comment": "\n * Intermediate base class for limited number of scalar types\n * that should never include type information. These are \"native\"\n * types that are default mappings for corresponding JSON scalar\n * types: {@link java.lang.String}, {@link java.lang.Integer},\n * {@link java.lang.Double} and {@link java.lang.Boolean}.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase.unknown#22",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NonTypedScalarSerializerBase.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase",
        "signature": "com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase.unknown(...)",
        "snippet": "}",
        "begin_line": 22,
        "end_line": 22,
        "comment": "\n * Intermediate base class for limited number of scalar types\n * that should never include type information. These are \"native\"\n * types that are default mappings for corresponding JSON scalar\n * types: {@link java.lang.String}, {@link java.lang.Integer},\n * {@link java.lang.Double} and {@link java.lang.Boolean}.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase.unknown#25",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NonTypedScalarSerializerBase.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase",
        "signature": "com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase.unknown(...)",
        "snippet": "super(t, bogus);",
        "begin_line": 25,
        "end_line": 25,
        "comment": "\n * Intermediate base class for limited number of scalar types\n * that should never include type information. These are \"native\"\n * types that are default mappings for corresponding JSON scalar\n * types: {@link java.lang.String}, {@link java.lang.Integer},\n * {@link java.lang.Double} and {@link java.lang.Boolean}.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase.unknown#26",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NonTypedScalarSerializerBase.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase",
        "signature": "com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase.unknown(...)",
        "snippet": "}",
        "begin_line": 26,
        "end_line": 26,
        "comment": "\n * Intermediate base class for limited number of scalar types\n * that should never include type information. These are \"native\"\n * types that are default mappings for corresponding JSON scalar\n * types: {@link java.lang.String}, {@link java.lang.Integer},\n * {@link java.lang.Double} and {@link java.lang.Boolean}.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.SerializerFactory.unknown#11",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/SerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.SerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.SerializerFactory.unknown(...)",
        "snippet": "public abstract class SerializerFactory",
        "begin_line": 11,
        "end_line": 11,
        "comment": "\n * Abstract class that defines API used by {@link SerializerProvider}\n * to obtain actual\n * {@link JsonSerializer} instances from multiple distinct factories.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MappingJsonFactory.unknown#30",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MappingJsonFactory.java",
        "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
        "signature": "com.fasterxml.jackson.databind.MappingJsonFactory.unknown(...)",
        "snippet": "super(mapper);",
        "begin_line": 30,
        "end_line": 30,
        "comment": "     generated for Jackson 2.1.0",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MappingJsonFactory.unknown#31",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MappingJsonFactory.java",
        "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
        "signature": "com.fasterxml.jackson.databind.MappingJsonFactory.unknown(...)",
        "snippet": "int PROBE_START_LINE_31 = 33;",
        "begin_line": 31,
        "end_line": 31,
        "comment": "     generated for Jackson 2.1.0",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MappingJsonFactory.unknown#34",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MappingJsonFactory.java",
        "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
        "signature": "com.fasterxml.jackson.databind.MappingJsonFactory.unknown(...)",
        "snippet": "int PROBE_END_LINE_31 = 33;",
        "begin_line": 34,
        "end_line": 34,
        "comment": "     generated for Jackson 2.1.0",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.unknown#28",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.unknown(...)",
        "snippet": "public final static ToStringSerializer instance = new ToStringSerializer();",
        "begin_line": 28,
        "end_line": 28,
        "comment": "    \n     * Singleton instance to use.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.unknown#38",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.unknown(...)",
        "snippet": "public ToStringSerializer() { super(Object.class); }",
        "begin_line": 38,
        "end_line": 38,
        "comment": "    \n     *<p>\n     * Note: usually you should NOT create new instances, but instead use\n     * {@link #instance} which is stateless and fully thread-safe. However,\n     * there are cases where constructor is needed; for example,\n     * when using explicit serializer annotations like\n     * {@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeParser.unknown#18",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeParser.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
        "signature": "com.fasterxml.jackson.databind.type.TypeParser.unknown(...)",
        "snippet": "public TypeParser(TypeFactory f) {",
        "begin_line": 18,
        "end_line": 18,
        "comment": "\n * Simple recursive-descent parser for parsing canonical {@link JavaType}\n * representations and constructing type instances.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeParser.unknown#19",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeParser.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
        "signature": "com.fasterxml.jackson.databind.type.TypeParser.unknown(...)",
        "snippet": "int PROBE_START_LINE_19 = 19;",
        "begin_line": 19,
        "end_line": 19,
        "comment": "\n * Simple recursive-descent parser for parsing canonical {@link JavaType}\n * representations and constructing type instances.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeParser.unknown#20",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeParser.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
        "signature": "com.fasterxml.jackson.databind.type.TypeParser.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.type.TypeFactory p_f_2752_line_19 = f;",
        "begin_line": 20,
        "end_line": 20,
        "comment": "\n * Simple recursive-descent parser for parsing canonical {@link JavaType}\n * representations and constructing type instances.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.unknown#43",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
        "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
        "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.unknown(...)",
        "snippet": "super(df, cache);",
        "begin_line": 43,
        "end_line": 43,
        "comment": "    \n     * Constructor that will pass specified deserializer factory and\n     * cache: cache may be null (in which case default implementation\n     * will be used), factory can not be null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.unknown#44",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
        "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
        "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.unknown(...)",
        "snippet": "}",
        "begin_line": 44,
        "end_line": 44,
        "comment": "    \n     * Constructor that will pass specified deserializer factory and\n     * cache: cache may be null (in which case default implementation\n     * will be used), factory can not be null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.unknown#323",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
        "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
        "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.unknown(...)",
        "snippet": "super(df, null);",
        "begin_line": 323,
        "end_line": 323,
        "comment": "        \n         * Default constructor for a blueprint object, which will use the standard\n         * {@link DeserializerCache}, given factory.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.unknown#324",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
        "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
        "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.unknown(...)",
        "snippet": "}",
        "begin_line": 324,
        "end_line": 324,
        "comment": "        \n         * Default constructor for a blueprint object, which will use the standard\n         * {@link DeserializerCache}, given factory.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.unknown#15",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
        "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
        "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.unknown(...)",
        "snippet": "public abstract class SubtypeResolver",
        "begin_line": 15,
        "end_line": 15,
        "comment": "\n * Helper object used for handling registration on resolving of super-types\n * to sub-types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.SimpleType.unknown#25",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "signature": "com.fasterxml.jackson.databind.type.SimpleType.unknown(...)",
        "snippet": "this(cls, TypeBindings.emptyBindings(), null, null);",
        "begin_line": 25,
        "end_line": 25,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.SimpleType.unknown#26",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "signature": "com.fasterxml.jackson.databind.type.SimpleType.unknown(...)",
        "snippet": "}",
        "begin_line": 26,
        "end_line": 26,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.SimpleType.unknown#30",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "signature": "com.fasterxml.jackson.databind.type.SimpleType.unknown(...)",
        "snippet": "this(cls, bindings, superClass, superInts, null, null, false);",
        "begin_line": 30,
        "end_line": 30,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.SimpleType.unknown#31",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "signature": "com.fasterxml.jackson.databind.type.SimpleType.unknown(...)",
        "snippet": "}",
        "begin_line": 31,
        "end_line": 31,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.SimpleType.unknown#47",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "signature": "com.fasterxml.jackson.databind.type.SimpleType.unknown(...)",
        "snippet": "super(cls, bindings, superClass, superInts,",
        "begin_line": 47,
        "end_line": 47,
        "comment": "    \n     * Simple copy-constructor, usually used when upgrading/refining a simple type\n     * into more specialized type.\n     *\n     * @since 2.7\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.SimpleType.unknown#49",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "signature": "com.fasterxml.jackson.databind.type.SimpleType.unknown(...)",
        "snippet": "}",
        "begin_line": 49,
        "end_line": 49,
        "comment": "    \n     * Simple copy-constructor, usually used when upgrading/refining a simple type\n     * into more specialized type.\n     *\n     * @since 2.7\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.SimpleType.unknown#71",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "signature": "com.fasterxml.jackson.databind.type.SimpleType.unknown(...)",
        "snippet": "int PROBE_START_LINE_71 = 73;",
        "begin_line": 71,
        "end_line": 71,
        "comment": "    \n     * Method used by core Jackson classes: NOT to be used by application code.\n     *<p>\n     * NOTE: public only because it is called by <code>ObjectMapper</code> which is\n     * not in same package\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DatabindContext.unknown#27",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DatabindContext.java",
        "class_name": "com.fasterxml.jackson.databind.DatabindContext",
        "signature": "com.fasterxml.jackson.databind.DatabindContext.unknown(...)",
        "snippet": "public abstract class DatabindContext",
        "begin_line": 27,
        "end_line": 27,
        "comment": "\n * Shared base class for {@link DeserializationContext} and\n * {@link SerializerProvider}, context objects passed through data-binding\n * process. Designed so that some of implementations can rely on shared\n * aspects like access to secondary contextual objects like type factories\n * or handler instantiators.\n * \n * @since 2.2\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#28",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "",
        "begin_line": 28,
        "end_line": 28,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#29",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "public static void addAll(Map<String, JsonSerializer<?>> allDeserializers) {",
        "begin_line": 29,
        "end_line": 29,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#30",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "final JsonSerializer<?> intS = new IntegerSerializer();",
        "begin_line": 30,
        "end_line": 30,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#31",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "int PROBE_START_LINE_29 = 29;",
        "begin_line": 31,
        "end_line": 31,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#32",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "Map<String, JsonSerializer<?>> p_all_deserializers_2306_line_29 = (Map<String, JsonSerializer<?>>) (allDeserializers);",
        "begin_line": 32,
        "end_line": 32,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#33",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "String number_serializers1_expr3_line_29 = Integer.class.getName();",
        "begin_line": 33,
        "end_line": 33,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#34",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "JsonSerializer<?> v_int_s_2307_line_29 = intS;",
        "begin_line": 34,
        "end_line": 34,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#35",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "int PROBE_END_LINE_29 = 29;",
        "begin_line": 35,
        "end_line": 35,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#36",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "p_all_deserializers_2306_line_29.put(number_serializers1_expr3_line_29, v_int_s_2307_line_29);",
        "begin_line": 36,
        "end_line": 36,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#39",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "Class<Integer> f_type_1636_line_30 = Integer.TYPE;",
        "begin_line": 39,
        "end_line": 39,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#40",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "String number_serializers1_expr6_line_30 = f_type_1636_line_30.getName();",
        "begin_line": 40,
        "end_line": 40,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#41",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "JsonSerializer<?> v_int_s_2307_line_30 = intS;",
        "begin_line": 41,
        "end_line": 41,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#42",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "int PROBE_END_LINE_30 = 30;",
        "begin_line": 42,
        "end_line": 42,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#43",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "p_all_deserializers_2306_line_30.put(number_serializers1_expr6_line_30, v_int_s_2307_line_30);",
        "begin_line": 43,
        "end_line": 43,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#59",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "String number_serializers1_expr13_line_33 = Byte.class.getName();",
        "begin_line": 59,
        "end_line": 59,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#60",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.IntLikeSerializer f_instance_2309_line_33 = IntLikeSerializer.instance;",
        "begin_line": 60,
        "end_line": 60,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#61",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "int PROBE_END_LINE_33 = 33;",
        "begin_line": 61,
        "end_line": 61,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#62",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "p_all_deserializers_2306_line_33.put(number_serializers1_expr13_line_33, f_instance_2309_line_33);",
        "begin_line": 62,
        "end_line": 62,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#65",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "Class<Byte> f_type_2310_line_34 = Byte.TYPE;",
        "begin_line": 65,
        "end_line": 65,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#112",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "",
        "begin_line": 112,
        "end_line": 112,
        "comment": "\t\t Numbers, limited length floating point",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#115",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "/* Shared base class",
        "begin_line": 115,
        "end_line": 115,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#116",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "/**********************************************************",
        "begin_line": 116,
        "end_line": 116,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#138",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "com.fasterxml.jackson.core.JsonParser.NumberType f_int_2323_line_62 = JsonParser.NumberType.INT;",
        "begin_line": 138,
        "end_line": 138,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#139",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "boolean number_serializers1_expr36_line_62 = p_number_type_2318_line_62 == f_int_2323_line_62;",
        "begin_line": 139,
        "end_line": 139,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#164",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "public JsonSerializer<?> createContextual(SerializerProvider prov,",
        "begin_line": 164,
        "end_line": 164,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#167",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "AnnotatedMember m = property.getMember();",
        "begin_line": 167,
        "end_line": 167,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#168",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "if (m != null) {",
        "begin_line": 168,
        "end_line": 168,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#179",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "}",
        "begin_line": 179,
        "end_line": 179,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#182",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "}",
        "begin_line": 182,
        "end_line": 182,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#183",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "",
        "begin_line": 183,
        "end_line": 183,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#194",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "public ShortSerializer() {",
        "begin_line": 194,
        "end_line": 194,
        "comment": "    /*\n     * ******************************************************** /* Concrete\n     * serializers, numerics\n     * ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#197",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "",
        "begin_line": 197,
        "end_line": 197,
        "comment": "    /*\n     * ******************************************************** /* Concrete\n     * serializers, numerics\n     * ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#198",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "@Override",
        "begin_line": 198,
        "end_line": 198,
        "comment": "    /*\n     * ******************************************************** /* Concrete\n     * serializers, numerics\n     * ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#216",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "public final static class IntegerSerializer extends Base<Object> {",
        "begin_line": 216,
        "end_line": 216,
        "comment": "    \n     * This is the special serializer for regular {@link java.lang.Integer}s\n     * (and primitive ints)\n     * <p>\n     * Since this is one of \"native\" types, no type information is ever included\n     * on serialization (unlike for most scalar types)\n     * <p>\n     * NOTE: as of 2.6, generic signature changed to Object, to avoid generation\n     * of bridge methods.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#219",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "}",
        "begin_line": 219,
        "end_line": 219,
        "comment": "    \n     * This is the special serializer for regular {@link java.lang.Integer}s\n     * (and primitive ints)\n     * <p>\n     * Since this is one of \"native\" types, no type information is ever included\n     * on serialization (unlike for most scalar types)\n     * <p>\n     * NOTE: as of 2.6, generic signature changed to Object, to avoid generation\n     * of bridge methods.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown#220",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.unknown(...)",
        "snippet": "",
        "begin_line": 220,
        "end_line": 220,
        "comment": "    \n     * This is the special serializer for regular {@link java.lang.Integer}s\n     * (and primitive ints)\n     * <p>\n     * Since this is one of \"native\" types, no type information is ever included\n     * on serialization (unlike for most scalar types)\n     * <p>\n     * NOTE: as of 2.6, generic signature changed to Object, to avoid generation\n     * of bridge methods.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationConfig.unknown#109",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "signature": "com.fasterxml.jackson.databind.DeserializationConfig.unknown(...)",
        "snippet": "super(base, str, mixins, rootNames);",
        "begin_line": 109,
        "end_line": 109,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationConfig.unknown#110",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "signature": "com.fasterxml.jackson.databind.DeserializationConfig.unknown(...)",
        "snippet": "int PROBE_START_LINE_110 = 110;",
        "begin_line": 110,
        "end_line": 110,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationConfig.unknown#111",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "signature": "com.fasterxml.jackson.databind.DeserializationConfig.unknown(...)",
        "snippet": "int deserialization_config1_expr2_line_110 = collectFeatureDefaults(DeserializationFeature.class);",
        "begin_line": 111,
        "end_line": 111,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationConfig.unknown#112",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "signature": "com.fasterxml.jackson.databind.DeserializationConfig.unknown(...)",
        "snippet": "int PROBE_END_LINE_110 = 110;",
        "begin_line": 112,
        "end_line": 112,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationConfig.unknown#113",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "signature": "com.fasterxml.jackson.databind.DeserializationConfig.unknown(...)",
        "snippet": "_deserFeatures = deserialization_config1_expr2_line_110;",
        "begin_line": 113,
        "end_line": 113,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationConfig.unknown#114",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "signature": "com.fasterxml.jackson.databind.DeserializationConfig.unknown(...)",
        "snippet": "int PROBE_START_LINE_111 = 111;",
        "begin_line": 114,
        "end_line": 114,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationConfig.unknown#115",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "signature": "com.fasterxml.jackson.databind.DeserializationConfig.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.node.JsonNodeFactory f_instance_140_line_111 = JsonNodeFactory.instance;",
        "begin_line": 115,
        "end_line": 115,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationConfig.unknown#116",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "signature": "com.fasterxml.jackson.databind.DeserializationConfig.unknown(...)",
        "snippet": "int PROBE_END_LINE_111 = 111;",
        "begin_line": 116,
        "end_line": 116,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationConfig.unknown#117",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "signature": "com.fasterxml.jackson.databind.DeserializationConfig.unknown(...)",
        "snippet": "_nodeFactory = f_instance_140_line_111;",
        "begin_line": 117,
        "end_line": 117,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#17",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "public enum MapperFeature implements ConfigFeature",
        "begin_line": 17,
        "end_line": 17,
        "comment": "\n * Enumeration that defines simple on/off features to set\n * for {@link ObjectMapper}, and accessible (but not changeable)\n * via {@link ObjectReader} and {@link ObjectWriter} (as well as\n * through various convenience methods through context objects).\n *<p>\n * Note that in addition to being only mutable via {@link ObjectMapper},\n * changes only take effect when done <b>before any serialization or\n * deserialization</b> calls -- that is, caller must follow\n * \"configure-then-use\" pattern.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#33",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "USE_ANNOTATIONS(true),",
        "begin_line": 33,
        "end_line": 33,
        "comment": "    \n     * Feature that determines whether annotation introspection\n     * is used for configuration; if enabled, configured\n     * {@link AnnotationIntrospector} will be used: if disabled,\n     * no annotations are considered.\n     *<p>\n     * Feature is enabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#49",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "AUTO_DETECT_CREATORS(true),",
        "begin_line": 49,
        "end_line": 49,
        "comment": "    \n     * Feature that determines whether \"creator\" methods are\n     * automatically detected by consider public constructors,\n     * and static single argument methods with name \"valueOf\".\n     * If disabled, only methods explicitly annotated are considered\n     * creator methods (except for the no-arg default constructor which\n     * is always considered a factory method).\n     *<p>\n     * Note that this feature has lower precedence than per-class\n     * annotations, and is only used if there isn't more granular\n     * configuration available.\n     *<P>\n     * Feature is enabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#64",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "AUTO_DETECT_FIELDS(true),",
        "begin_line": 64,
        "end_line": 64,
        "comment": "    \n     * Feature that determines whether non-static fields are recognized as\n     * properties.\n     * If yes, then all public member fields\n     * are considered as properties. If disabled, only fields explicitly\n     * annotated are considered property fields.\n     *<p>\n     * Note that this feature has lower precedence than per-class\n     * annotations, and is only used if there isn't more granular\n     * configuration available.\n     *<p>\n     * Feature is enabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#83",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "AUTO_DETECT_GETTERS(true),",
        "begin_line": 83,
        "end_line": 83,
        "comment": "    \n     * Feature that determines whether regular \"getter\" methods are\n     * automatically detected based on standard Bean naming convention\n     * or not. If yes, then all public zero-argument methods that\n     * start with prefix \"get\" \n     * are considered as getters.\n     * If disabled, only methods explicitly  annotated are considered getters.\n     *<p>\n     * Note that since version 1.3, this does <b>NOT</b> include\n     * \"is getters\" (see {@link #AUTO_DETECT_IS_GETTERS} for details)\n     *<p>\n     * Note that this feature has lower precedence than per-class\n     * annotations, and is only used if there isn't more granular\n     * configuration available.\n     *<p>\n     * Feature is enabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#99",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "AUTO_DETECT_IS_GETTERS(true),",
        "begin_line": 99,
        "end_line": 99,
        "comment": "    \n     * Feature that determines whether \"is getter\" methods are\n     * automatically detected based on standard Bean naming convention\n     * or not. If yes, then all public zero-argument methods that\n     * start with prefix \"is\", and whose return type is boolean\n     * are considered as \"is getters\".\n     * If disabled, only methods explicitly annotated are considered getters.\n     *<p>\n     * Note that this feature has lower precedence than per-class\n     * annotations, and is only used if there isn't more granular\n     * configuration available.\n     *<p>\n     * Feature is enabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#115",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "AUTO_DETECT_SETTERS(true),",
        "begin_line": 115,
        "end_line": 115,
        "comment": "     \n      * Feature that determines whether \"setter\" methods are\n      * automatically detected based on standard Bean naming convention\n      * or not. If yes, then all public one-argument methods that\n      * start with prefix \"set\"\n      * are considered setters. If disabled, only methods explicitly\n      * annotated are considered setters.\n      *<p>\n      * Note that this feature has lower precedence than per-class\n      * annotations, and is only used if there isn't more granular\n      * configuration available.\n      *<P>\n      * Feature is enabled by default.\n      ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#126",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "REQUIRE_SETTERS_FOR_GETTERS(false),",
        "begin_line": 126,
        "end_line": 126,
        "comment": "    \n     * Feature that determines whether getters (getter methods)\n     * can be auto-detected if there is no matching mutator (setter,\n     * constructor parameter or field) or not: if set to true,\n     * only getters that match a mutator are auto-discovered; if\n     * false, all auto-detectable getters can be discovered.\n     *<p>\n     * Feature is disabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#144",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "USE_GETTERS_AS_SETTERS(true),",
        "begin_line": 144,
        "end_line": 144,
        "comment": "    \n     * Feature that determines whether otherwise regular \"getter\"\n     * methods (but only ones that handle Collections and Maps,\n     * not getters of other type)\n     * can be used for purpose of getting a reference to a Collection\n     * and Map to modify the property, without requiring a setter\n     * method.\n     * This is similar to how JAXB framework sets Collections and\n     * Maps: no setter is involved, just setter.\n     *<p>\n     * Note that such getters-as-setters methods have lower\n     * precedence than setters, so they are only used if no\n     * setter is found for the Map/Collection property.\n     *<p>\n     * Feature is enabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#169",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "CAN_OVERRIDE_ACCESS_MODIFIERS(true),",
        "begin_line": 169,
        "end_line": 169,
        "comment": "    \n     * Feature that determines whether method and field access\n     * modifier settings can be overridden when accessing\n     * properties. If enabled, method\n     * {@link java.lang.reflect.AccessibleObject#setAccessible}\n     * may be called to enable access to otherwise unaccessible objects.\n     *<p>\n     * Note that this setting may have significant performance implications,\n     * since access override helps remove costly access checks on each\n     * and every Reflection access. If you are considering disabling\n     * this feature, be sure to verify performance consequences if usage\n     * is performance sensitive.\n     * Also note that performance effects vary between Java platforms\n     * (JavaSE vs Android, for example), as well as JDK versions: older\n     * versions seemed to have more significant performance difference.\n     *<p>\n     * Conversely, on some platforms, it may be necessary to disable this feature\n     * as platform does not allow such calls. For example, when developing\n     * Applets (or other Java code that runs on tightly restricted sandbox),\n     * it may be necessary to disable the feature regardless of performance effects.\n     *<p>\n     * Feature is enabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#188",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "OVERRIDE_PUBLIC_ACCESS_MODIFIERS(true),",
        "begin_line": 188,
        "end_line": 188,
        "comment": "    \n     * Feature that determines that forces call to\n     * {@link java.lang.reflect.AccessibleObject#setAccessible} even for\n     * <code>public</code> accessors -- that is, even if no such call is\n     * needed from functionality perspective -- if call is allowed\n     * (that is, {@link #CAN_OVERRIDE_ACCESS_MODIFIERS} is set to true).\n     * The main reason to enable this feature is possible performance\n     * improvement as JDK does not have to perform access checks; these\n     * checks are otherwise made for all accessors, including public ones,\n     * and may result in slower Reflection calls. Exact impact (if any)\n     * depends on Java platform (Java SE, Android) as well as JDK version.\n     *<p>\n     * Feature is enabled by default, for legacy reasons (it was the behavior\n     * until 2.6)\n     *\n     * @since 2.7\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#206",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "INFER_PROPERTY_MUTATORS(true),",
        "begin_line": 206,
        "end_line": 206,
        "comment": "    \n     * Feature that determines whether member mutators (fields and\n     * setters) may be \"pulled in\" even if they are not visible,\n     * as long as there is a visible accessor (getter or field) with same name.\n     * For example: field \"value\" may be inferred as mutator,\n     * if there is visible or explicitly marked getter \"getValue()\".\n     * If enabled, inferring is enabled; otherwise (disabled) only visible and\n     * explicitly annotated accessors are ever used.\n     *<p>\n     * Note that 'getters' are never inferred and need to be either visible (including\n     * bean-style naming) or explicitly annotated.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.2\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#220",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "ALLOW_FINAL_FIELDS_AS_MUTATORS(true),",
        "begin_line": 220,
        "end_line": 220,
        "comment": "    \n     * Feature that determines whether member fields declared as 'final' may\n     * be auto-detected to be used mutators (used to change value of the logical\n     * property) or not. If enabled, 'final' access modifier has no effect, and\n     * such fields may be detected according to usual visibility and inference\n     * rules; if disabled, such fields are NOT used as mutators except if\n     * explicitly annotated for such use.\n     *<p>\n     * Feature is enabled by default, for backwards compatibility reasons.\n     * \n     * @since 2.2\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#231",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "PROPAGATE_TRANSIENT_MARKER(false),",
        "begin_line": 231,
        "end_line": 231,
        "comment": "    \n     * Feature that determines for <code>transient</code> modifier for fields\n     * is handled: if disabled, it is only taken to mean exclusion of\n     *<p>\n     * Feature is disabled by default, meaning that existence of `transient`\n     * for a field does not necessarily lead to ignoral of getters or setters.\n     *\n     * @since 2.6\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#254",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "USE_STATIC_TYPING(false),",
        "begin_line": 254,
        "end_line": 254,
        "comment": "    \n     * Feature that determines whether the type detection for\n     * serialization should be using actual dynamic runtime type,\n     * or declared static type.\n     * Note that deserialization always uses declared static types\n     * since no runtime types are available (as we are creating\n     * instances after using type information).\n     *<p>\n     * This global default value can be overridden at class, method\n     * or field level by using {@link JsonSerialize#typing} annotation\n     * property.\n     *<p>\n     * Feature is disabled by default which means that dynamic runtime types\n     * are used (instead of declared static types) for serialization.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#278",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "DEFAULT_VIEW_INCLUSION(true),",
        "begin_line": 278,
        "end_line": 278,
        "comment": "    \n     * Feature that determines whether properties that have no view\n     * annotations are included in JSON serialization views (see\n     * {@link com.fasterxml.jackson.annotation.JsonView} for more\n     * details on JSON Views).\n     * If enabled, non-annotated properties will be included;\n     * when disabled, they will be excluded. So this feature\n     * changes between \"opt-in\" (feature disabled) and\n     * \"opt-out\" (feature enabled) modes.\n     *<p>\n     * Default value is enabled, meaning that non-annotated\n     * properties are included in all views if there is no\n     * {@link com.fasterxml.jackson.annotation.JsonView} annotation.\n     *<p>\n     * Feature is enabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#301",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "SORT_PROPERTIES_ALPHABETICALLY(false),",
        "begin_line": 301,
        "end_line": 301,
        "comment": "    \n     * Feature that defines default property serialization order used\n     * for POJO fields (note: does <b>not</b> apply to {@link java.util.Map}\n     * serialization!):\n     * if enabled, default ordering is alphabetic (similar to\n     * how {@link com.fasterxml.jackson.annotation.JsonPropertyOrder#alphabetic()}\n     * works); if disabled, order is unspecified (based on what JDK gives\n     * us, which may be declaration order, but is not guaranteed).\n     *<p>\n     * Note that this is just the default behavior, and can be overridden by\n     * explicit overrides in classes (for example with\n     * {@link com.fasterxml.jackson.annotation.JsonPropertyOrder} annotation)\n     *<p>\n     * Feature is disabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#322",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "ACCEPT_CASE_INSENSITIVE_PROPERTIES(false),",
        "begin_line": 322,
        "end_line": 322,
        "comment": "    \n     * Feature that will allow for more forgiving deserialization of incoming JSON.\n     * If enabled, the bean properties will be matched using their lower-case equivalents,\n     * meaning that any case-combination (incoming and matching names are canonicalized\n     * by lower-casing) should work.\n     *<p>\n     * Note that there is additional performance overhead since incoming property\n     * names need to be lower-cased before comparison, for cases where there are upper-case\n     * letters. Overhead for names that are already lower-case should be negligible however.\n     *<p>\n     * Feature is disabled by default.\n     * \n     * @since 2.5\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#336",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "USE_WRAPPER_NAME_AS_PROPERTY_NAME(false),",
        "begin_line": 336,
        "end_line": 336,
        "comment": "    \n     * Feature that can be enabled to make property names be\n     * overridden by wrapper name (usually detected with annotations\n     * as defined by {@link AnnotationIntrospector#findWrapperName}.\n     * If enabled, all properties that have associated non-empty Wrapper\n     * name will use that wrapper name instead of property name.\n     * If disabled, wrapper name is only used for wrapping (if anything).\n     *<p>\n     * Feature is disabled by default.\n     * \n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#352",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "USE_STD_BEAN_NAMING(false),",
        "begin_line": 352,
        "end_line": 352,
        "comment": "    \n     * Feature that may be enabled to enforce strict compatibility with\n     * Bean name introspection, instead of slightly different mechanism\n     * Jackson defaults to.\n     * Specific difference is that Jackson always lower cases leading upper-case\n     * letters, so \"getURL()\" becomes \"url\" property; whereas standard Bean\n     * naming <b>only</b> lower-cases the first letter if it is NOT followed by\n     * another upper-case letter (so \"getURL()\" would result in \"URL\" property).\n     *<p>\n     * Feature is disabled by default for backwards compatibility purposes: earlier\n     * Jackson versions used Jackson's own mechanism.\n     *\n     * @since 2.5\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#363",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "ALLOW_EXPLICIT_PROPERTY_RENAMING(false),",
        "begin_line": 363,
        "end_line": 363,
        "comment": "    \n     * Feature that when enabled will allow explicitly named properties (i.e., fields or methods\n     * annotated with {@link com.fasterxml.jackson.annotation.JsonProperty}(\"explicitName\")) to\n     * be re-named by a {@link PropertyNamingStrategy}, if one is configured.\n     * <p>\n     * Feature is disabled by default.\n     *\n     * @since 2.7\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#388",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "IGNORE_DUPLICATE_MODULE_REGISTRATIONS(true)",
        "begin_line": 388,
        "end_line": 388,
        "comment": "    \n     * Feature that determines whether multiple registrations of same module\n     * should be ignored or not; if enabled, only the first registration call\n     * results in module being called, and possible duplicate calls are silently\n     * ignored; if disabled, no checking is done and all registration calls are\n     * dispatched to module.\n     *<p>\n     * Definition of \"same module\" is based on using {@link Module#getTypeId()};\n     * modules with same non-null <code>type id</code> are considered same for\n     * purposes of duplicate registration. This also avoids having to keep track\n     * of actual module instances; only ids will be kept track of (and only if\n     * this feature is enabled).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.5\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#395",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "private MapperFeature(boolean defaultState) {",
        "begin_line": 395,
        "end_line": 395,
        "comment": "    \n     * Feature that determines whether multiple registrations of same module\n     * should be ignored or not; if enabled, only the first registration call\n     * results in module being called, and possible duplicate calls are silently\n     * ignored; if disabled, no checking is done and all registration calls are\n     * dispatched to module.\n     *<p>\n     * Definition of \"same module\" is based on using {@link Module#getTypeId()};\n     * modules with same non-null <code>type id</code> are considered same for\n     * purposes of duplicate registration. This also avoids having to keep track\n     * of actual module instances; only ids will be kept track of (and only if\n     * this feature is enabled).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.5\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#396",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "int PROBE_START_LINE_396 = 396;",
        "begin_line": 396,
        "end_line": 396,
        "comment": "    \n     * Feature that determines whether multiple registrations of same module\n     * should be ignored or not; if enabled, only the first registration call\n     * results in module being called, and possible duplicate calls are silently\n     * ignored; if disabled, no checking is done and all registration calls are\n     * dispatched to module.\n     *<p>\n     * Definition of \"same module\" is based on using {@link Module#getTypeId()};\n     * modules with same non-null <code>type id</code> are considered same for\n     * purposes of duplicate registration. This also avoids having to keep track\n     * of actual module instances; only ids will be kept track of (and only if\n     * this feature is enabled).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.5\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#397",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "boolean p_default_state_389_line_396 = defaultState;",
        "begin_line": 397,
        "end_line": 397,
        "comment": "    \n     * Feature that determines whether multiple registrations of same module\n     * should be ignored or not; if enabled, only the first registration call\n     * results in module being called, and possible duplicate calls are silently\n     * ignored; if disabled, no checking is done and all registration calls are\n     * dispatched to module.\n     *<p>\n     * Definition of \"same module\" is based on using {@link Module#getTypeId()};\n     * modules with same non-null <code>type id</code> are considered same for\n     * purposes of duplicate registration. This also avoids having to keep track\n     * of actual module instances; only ids will be kept track of (and only if\n     * this feature is enabled).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.5\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#398",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "int PROBE_END_LINE_396 = 396;",
        "begin_line": 398,
        "end_line": 398,
        "comment": "    \n     * Feature that determines whether multiple registrations of same module\n     * should be ignored or not; if enabled, only the first registration call\n     * results in module being called, and possible duplicate calls are silently\n     * ignored; if disabled, no checking is done and all registration calls are\n     * dispatched to module.\n     *<p>\n     * Definition of \"same module\" is based on using {@link Module#getTypeId()};\n     * modules with same non-null <code>type id</code> are considered same for\n     * purposes of duplicate registration. This also avoids having to keep track\n     * of actual module instances; only ids will be kept track of (and only if\n     * this feature is enabled).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.5\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#401",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "int mapper_feature1_expr3_line_397 = ordinal();",
        "begin_line": 401,
        "end_line": 401,
        "comment": "    \n     * Feature that determines whether multiple registrations of same module\n     * should be ignored or not; if enabled, only the first registration call\n     * results in module being called, and possible duplicate calls are silently\n     * ignored; if disabled, no checking is done and all registration calls are\n     * dispatched to module.\n     *<p>\n     * Definition of \"same module\" is based on using {@link Module#getTypeId()};\n     * modules with same non-null <code>type id</code> are considered same for\n     * purposes of duplicate registration. This also avoids having to keep track\n     * of actual module instances; only ids will be kept track of (and only if\n     * this feature is enabled).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.5\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.MapperFeature.unknown#404",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "signature": "com.fasterxml.jackson.databind.MapperFeature.unknown(...)",
        "snippet": "int PROBE_END_LINE_397 = 397;",
        "begin_line": 404,
        "end_line": 404,
        "comment": "    \n     * Feature that determines whether multiple registrations of same module\n     * should be ignored or not; if enabled, only the first registration call\n     * results in module being called, and possible duplicate calls are silently\n     * ignored; if disabled, no checking is done and all registration calls are\n     * dispatched to module.\n     *<p>\n     * Definition of \"same module\" is based on using {@link Module#getTypeId()};\n     * modules with same non-null <code>type id</code> are considered same for\n     * purposes of duplicate registration. This also avoids having to keep track\n     * of actual module instances; only ids will be kept track of (and only if\n     * this feature is enabled).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.5\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.SerializerCache.unknown#33",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/SerializerCache.java",
        "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
        "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.unknown(...)",
        "snippet": "private final HashMap<TypeKey, JsonSerializer<Object>> _sharedMap",
        "begin_line": 33,
        "end_line": 33,
        "comment": "    \n     * Shared, modifiable map; all access needs to be through synchronized blocks.\n     *<p>\n     * NOTE: keys are of various types (see below for key types), in addition to\n     * basic {@link JavaType} used for \"untyped\" serializers.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.SerializerCache.unknown#39",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/SerializerCache.java",
        "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
        "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.unknown(...)",
        "snippet": "private final AtomicReference<ReadOnlyClassToSerializerMap> _readOnlyMap",
        "begin_line": 39,
        "end_line": 39,
        "comment": "    \n     * Most recent read-only instance, created from _sharedMap, if any.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.SerializerCache.unknown#42",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/SerializerCache.java",
        "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
        "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.unknown(...)",
        "snippet": "public SerializerCache() { }",
        "begin_line": 42,
        "end_line": 42,
        "comment": "    \n     * Most recent read-only instance, created from _sharedMap, if any.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBindings.unknown#16",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "signature": "com.fasterxml.jackson.databind.type.TypeBindings.unknown(...)",
        "snippet": "private final static String[] NO_STRINGS = new String[0];",
        "begin_line": 16,
        "end_line": 16,
        "comment": "\n * Helper class used for resolving type parameters for given class\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBindings.unknown#18",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "signature": "com.fasterxml.jackson.databind.type.TypeBindings.unknown(...)",
        "snippet": "private final static JavaType[] NO_TYPES = new JavaType[0];",
        "begin_line": 18,
        "end_line": 18,
        "comment": "\n * Helper class used for resolving type parameters for given class\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBindings.unknown#20",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "signature": "com.fasterxml.jackson.databind.type.TypeBindings.unknown(...)",
        "snippet": "int PROBE_START_LINE_20 = 20;",
        "begin_line": 20,
        "end_line": 20,
        "comment": "\n * Helper class used for resolving type parameters for given class\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBindings.unknown#52",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "signature": "com.fasterxml.jackson.databind.type.TypeBindings.unknown(...)",
        "snippet": "",
        "begin_line": 52,
        "end_line": 52,
        "comment": "    \n     * Names of potentially unresolved type variables.\n     *\n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBindings.unknown#53",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "signature": "com.fasterxml.jackson.databind.type.TypeBindings.unknown(...)",
        "snippet": "/*",
        "begin_line": 53,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBindings.unknown#54",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "signature": "com.fasterxml.jackson.databind.type.TypeBindings.unknown(...)",
        "snippet": "/**********************************************************************",
        "begin_line": 54,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBindings.unknown#55",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "signature": "com.fasterxml.jackson.databind.type.TypeBindings.unknown(...)",
        "snippet": "/* Construction",
        "begin_line": 55,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBindings.unknown#58",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "signature": "com.fasterxml.jackson.databind.type.TypeBindings.unknown(...)",
        "snippet": "",
        "begin_line": 58,
        "end_line": 58,
        "comment": "    ********************************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBindings.unknown#59",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "signature": "com.fasterxml.jackson.databind.type.TypeBindings.unknown(...)",
        "snippet": "private TypeBindings(String[] names, JavaType[] types, String[] uvars)",
        "begin_line": 59,
        "end_line": 59,
        "comment": "    ********************************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBindings.unknown#62",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "signature": "com.fasterxml.jackson.databind.type.TypeBindings.unknown(...)",
        "snippet": "String[] p_names_2566_line_53 = names;",
        "begin_line": 62,
        "end_line": 62,
        "comment": "    ********************************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBindings.unknown#63",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "signature": "com.fasterxml.jackson.databind.type.TypeBindings.unknown(...)",
        "snippet": "boolean type_bindings1_expr6_line_53 = p_names_2566_line_53 == null;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "    ********************************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBindings.unknown#64",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "signature": "com.fasterxml.jackson.databind.type.TypeBindings.unknown(...)",
        "snippet": "boolean type_bindings1_expr5_line_53 = (type_bindings1_expr6_line_53);",
        "begin_line": 64,
        "end_line": 64,
        "comment": "    ********************************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.type.TypeBindings.unknown#67",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "signature": "com.fasterxml.jackson.databind.type.TypeBindings.unknown(...)",
        "snippet": "f_no_strings_2563_line_53 = NO_STRINGS;",
        "begin_line": 67,
        "end_line": 67,
        "comment": "    ********************************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StringSerializer.unknown#29",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StringSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.StringSerializer.unknown(...)",
        "snippet": "public StringSerializer() { super(String.class, false); }",
        "begin_line": 29,
        "end_line": 29,
        "comment": "   use of bridge methods",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.JavaType.unknown#78",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "signature": "com.fasterxml.jackson.databind.JavaType.unknown(...)",
        "snippet": "{",
        "begin_line": 78,
        "end_line": 78,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.JavaType.unknown#79",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "signature": "com.fasterxml.jackson.databind.JavaType.unknown(...)",
        "snippet": "int PROBE_START_LINE_79 = 79;",
        "begin_line": 79,
        "end_line": 79,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.JavaType.unknown#80",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "signature": "com.fasterxml.jackson.databind.JavaType.unknown(...)",
        "snippet": "Class<?> p_raw_342_line_79 = raw;",
        "begin_line": 80,
        "end_line": 80,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.JavaType.unknown#81",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "signature": "com.fasterxml.jackson.databind.JavaType.unknown(...)",
        "snippet": "int PROBE_END_LINE_79 = 79;",
        "begin_line": 81,
        "end_line": 81,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.JavaType.unknown#82",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "signature": "com.fasterxml.jackson.databind.JavaType.unknown(...)",
        "snippet": "_class = p_raw_342_line_79;",
        "begin_line": 82,
        "end_line": 82,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.JavaType.unknown#83",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "signature": "com.fasterxml.jackson.databind.JavaType.unknown(...)",
        "snippet": "int PROBE_START_LINE_80 = 80;",
        "begin_line": 83,
        "end_line": 83,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.JavaType.unknown#84",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "signature": "com.fasterxml.jackson.databind.JavaType.unknown(...)",
        "snippet": "Class<?> p_raw_342_line_80 = raw;",
        "begin_line": 84,
        "end_line": 84,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializerProvider.unknown#53",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.unknown(...)",
        "snippet": "public final static JsonSerializer<Object> DEFAULT_NULL_KEY_SERIALIZER =",
        "begin_line": 53,
        "end_line": 53,
        "comment": "    \n     * Setting for determining whether mappings for \"unknown classes\" should be\n     * cached for faster resolution. Usually this isn't needed, but maybe it\n     * is in some cases?\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializerProvider.unknown#65",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.unknown(...)",
        "snippet": "protected final static JsonSerializer<Object> DEFAULT_UNKNOWN_SERIALIZER = new UnknownSerializer();",
        "begin_line": 65,
        "end_line": 65,
        "comment": "    \n     * Placeholder serializer used when <code>java.lang.Object</code> typed property\n     * is marked to be serialized.\n     *<br>\n     * NOTE: starting with 2.6, this instance is NOT used for any other types, and\n     * separate instances are constructed for \"empty\" Beans.\n     *<p>\n     * NOTE: changed to <code>protected</code> for 2.3; no need to be publicly available.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializerProvider.unknown#127",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.unknown(...)",
        "snippet": "/**",
        "begin_line": 127,
        "end_line": 127,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializerProvider.unknown#140",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.unknown(...)",
        "snippet": "protected JsonSerializer<Object> _keySerializer;",
        "begin_line": 140,
        "end_line": 140,
        "comment": "    \n     * Serializer used to output non-null keys of Maps (which will get\n     * output as JSON Objects), if not null; if null, us the standard\n     * default key serializer.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializerProvider.unknown#149",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.unknown(...)",
        "snippet": "* Serializer used to output a null value. Default implementation",
        "begin_line": 149,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializerProvider.unknown#189",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.unknown(...)",
        "snippet": "* Flag set to indicate that we are using vanilla null value serialization",
        "begin_line": 189,
        "end_line": 189,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializerProvider.unknown#190",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.unknown(...)",
        "snippet": "*",
        "begin_line": 190,
        "end_line": 190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializerProvider.unknown#191",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.unknown(...)",
        "snippet": "* @since 2.3",
        "begin_line": 191,
        "end_line": 191,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializerProvider.unknown#192",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.unknown(...)",
        "snippet": "*/",
        "begin_line": 192,
        "end_line": 192,
        "comment": "    \n     * Flag set to indicate that we are using vanilla null value serialization\n     * \n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializerProvider.unknown#194",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.unknown(...)",
        "snippet": "",
        "begin_line": 194,
        "end_line": 194,
        "comment": "    \n     * Flag set to indicate that we are using vanilla null value serialization\n     * \n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializerProvider.unknown#196",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.unknown(...)",
        "snippet": "/**********************************************************",
        "begin_line": 196,
        "end_line": 196,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializerProvider.unknown#197",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.unknown(...)",
        "snippet": "/* Life-cycle",
        "begin_line": 197,
        "end_line": 197,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializerProvider.unknown#200",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.unknown(...)",
        "snippet": "",
        "begin_line": 200,
        "end_line": 200,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializerProvider.unknown#201",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "signature": "com.fasterxml.jackson.databind.SerializerProvider.unknown(...)",
        "snippet": "/**",
        "begin_line": 201,
        "end_line": 201,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown#21",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
        "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown(...)",
        "snippet": "*/",
        "begin_line": 21,
        "end_line": 21,
        "comment": "\n * Helper class used for storing and accessing per-call attributes.\n * Storage is two-layered: at higher precedence, we have actual per-call\n * attributes; and at lower precedence, default attributes that may be\n * defined for Object readers and writers.\n *<p>\n * Note that the way mutability is implemented differs between kinds\n * of attributes, to account for thread-safety: per-call attributes\n * are handled assuming that instances are never shared, whereas\n * changes to per-reader/per-writer attributes are made assuming\n * sharing, by creating new copies instead of modifying state.\n * This allows sharing of default values without per-call copying, but\n * requires two-level lookup on access.\n * \n * @since 2.3\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown#24",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
        "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown(...)",
        "snippet": "public static ContextAttributes getEmpty() {",
        "begin_line": 24,
        "end_line": 24,
        "comment": "\n * Helper class used for storing and accessing per-call attributes.\n * Storage is two-layered: at higher precedence, we have actual per-call\n * attributes; and at lower precedence, default attributes that may be\n * defined for Object readers and writers.\n *<p>\n * Note that the way mutability is implemented differs between kinds\n * of attributes, to account for thread-safety: per-call attributes\n * are handled assuming that instances are never shared, whereas\n * changes to per-reader/per-writer attributes are made assuming\n * sharing, by creating new copies instead of modifying state.\n * This allows sharing of default values without per-call copying, but\n * requires two-level lookup on access.\n * \n * @since 2.3\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown#62",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
        "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown(...)",
        "snippet": "/* Default implementation",
        "begin_line": 62,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown#67",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
        "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown(...)",
        "snippet": "implements java.io.Serializable // just so ObjectReader/ObjectWriter can retain configs",
        "begin_line": 67,
        "end_line": 67,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown#69",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
        "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown(...)",
        "snippet": "private static final long serialVersionUID = 1L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown#92",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
        "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown(...)",
        "snippet": "* complicate that access.",
        "begin_line": 92,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown#93",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
        "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown(...)",
        "snippet": "*/",
        "begin_line": 93,
        "end_line": 93,
        "comment": "        \n         * Per-call attributes that we can directly modify, since they are not\n         * shared between threads.\n         *<p>\n         * NOTE: typed as Object-to-Object, unlike {@link #_shared}, because\n         * we need to be able to modify contents, and wildcard type would\n         * complicate that access.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown#94",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
        "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown(...)",
        "snippet": "protected transient Map<Object,Object> _nonShared;",
        "begin_line": 94,
        "end_line": 94,
        "comment": "        \n         * Per-call attributes that we can directly modify, since they are not\n         * shared between threads.\n         *<p>\n         * NOTE: typed as Object-to-Object, unlike {@link #_shared}, because\n         * we need to be able to modify contents, and wildcard type would\n         * complicate that access.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown#95",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
        "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown(...)",
        "snippet": "",
        "begin_line": 95,
        "end_line": 95,
        "comment": "        \n         * Per-call attributes that we can directly modify, since they are not\n         * shared between threads.\n         *<p>\n         * NOTE: typed as Object-to-Object, unlike {@link #_shared}, because\n         * we need to be able to modify contents, and wildcard type would\n         * complicate that access.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown#103",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
        "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.unknown(...)",
        "snippet": "int PROBE_START_LINE_93 = 93;",
        "begin_line": 103,
        "end_line": 103,
        "comment": "        ********************************************************\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.unknown#39",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.unknown(...)",
        "snippet": "private final static Class<?>[] INIT_CAUSE_PARAMS = new Class<?>[] { Throwable.class };",
        "begin_line": 39,
        "end_line": 39,
        "comment": "    \n     * Signature of <b>Throwable.initCause</b> method.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.unknown#41",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.unknown(...)",
        "snippet": "private final static Class<?>[] NO_VIEWS = new Class<?>[0];",
        "begin_line": 41,
        "end_line": 41,
        "comment": "    \n     * Signature of <b>Throwable.initCause</b> method.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.unknown#53",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.unknown(...)",
        "snippet": "public final static BeanDeserializerFactory instance = new BeanDeserializerFactory(",
        "begin_line": 53,
        "end_line": 53,
        "comment": "    \n     * Globally shareable thread-safe instance which has no additional custom deserializers\n     * registered\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.unknown#57",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.unknown(...)",
        "snippet": "super(config);",
        "begin_line": 57,
        "end_line": 57,
        "comment": "    \n     * Globally shareable thread-safe instance which has no additional custom deserializers\n     * registered\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.unknown#58",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.unknown(...)",
        "snippet": "}",
        "begin_line": 58,
        "end_line": 58,
        "comment": "    \n     * Globally shareable thread-safe instance which has no additional custom deserializers\n     * registered\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdSerializer.unknown#42",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.unknown(...)",
        "snippet": "private final static Object CONVERTING_CONTENT_CONVERTER_LOCK = new Object();",
        "begin_line": 42,
        "end_line": 42,
        "comment": "    \n     * Unique key we use to store a temporary lock, to prevent infinite recursion\n     * when resolving content converters (see [databind#357]).\n     *<p>\n     * NOTE: may need to revisit this if nested content converters are needed; if so,\n     * may need to create per-call lock object. But let's start with a simpler\n     * solution for now.\n     *\n     * @since 2.7\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdSerializer.unknown#58",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.unknown(...)",
        "snippet": "protected StdSerializer(Class<T> t) {",
        "begin_line": 58,
        "end_line": 58,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdSerializer.unknown#59",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.unknown(...)",
        "snippet": "int PROBE_START_LINE_59 = 59;",
        "begin_line": 59,
        "end_line": 59,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.StdSerializer.unknown#60",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.unknown(...)",
        "snippet": "Class<T> p_t_2395_line_59 = (Class<T>) (t);",
        "begin_line": 60,
        "end_line": 60,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.unknown#65",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.unknown(...)",
        "snippet": "public final static BeanSerializerFactory instance = new BeanSerializerFactory(null);",
        "begin_line": 65,
        "end_line": 65,
        "comment": "    \n     * Like {@link BasicSerializerFactory}, this factory is stateless, and\n     * thus a single shared global (== singleton) instance can be used\n     * without thread-safety issues.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.unknown#78",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.unknown(...)",
        "snippet": "super(config);",
        "begin_line": 78,
        "end_line": 78,
        "comment": "    \n     * Constructor for creating instances with specified configuration.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.unknown#79",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
        "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
        "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.unknown(...)",
        "snippet": "}",
        "begin_line": 79,
        "end_line": 79,
        "comment": "    \n     * Constructor for creating instances with specified configuration.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationContext.unknown#154",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "signature": "com.fasterxml.jackson.databind.DeserializationContext.unknown(...)",
        "snippet": "{",
        "begin_line": 154,
        "end_line": 154,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationContext.unknown#155",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "signature": "com.fasterxml.jackson.databind.DeserializationContext.unknown(...)",
        "snippet": "int PROBE_START_LINE_155 = 157;",
        "begin_line": 155,
        "end_line": 155,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationContext.unknown#158",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "signature": "com.fasterxml.jackson.databind.DeserializationContext.unknown(...)",
        "snippet": "int PROBE_END_LINE_155 = 157;",
        "begin_line": 158,
        "end_line": 158,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationContext.unknown#159",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "signature": "com.fasterxml.jackson.databind.DeserializationContext.unknown(...)",
        "snippet": "if (deserialization_context1_expr1_line_155) {",
        "begin_line": 159,
        "end_line": 159,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationContext.unknown#161",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "signature": "com.fasterxml.jackson.databind.DeserializationContext.unknown(...)",
        "snippet": "}",
        "begin_line": 161,
        "end_line": 161,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationContext.unknown#162",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "signature": "com.fasterxml.jackson.databind.DeserializationContext.unknown(...)",
        "snippet": "int PROBE_START_LINE_158 = 158;",
        "begin_line": 162,
        "end_line": 162,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationContext.unknown#163",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "signature": "com.fasterxml.jackson.databind.DeserializationContext.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.deser.DeserializerFactory p_df_229_line_158 = df;",
        "begin_line": 163,
        "end_line": 163,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationContext.unknown#164",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "signature": "com.fasterxml.jackson.databind.DeserializationContext.unknown(...)",
        "snippet": "int PROBE_END_LINE_158 = 158;",
        "begin_line": 164,
        "end_line": 164,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationContext.unknown#165",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "signature": "com.fasterxml.jackson.databind.DeserializationContext.unknown(...)",
        "snippet": "_factory = p_df_229_line_158;",
        "begin_line": 165,
        "end_line": 165,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.DeserializationContext.unknown#166",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "signature": "com.fasterxml.jackson.databind.DeserializationContext.unknown(...)",
        "snippet": "int PROBE_START_LINE_159 = 159;",
        "begin_line": 166,
        "end_line": 166,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown#170",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
        "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown(...)",
        "snippet": "",
        "begin_line": 170,
        "end_line": 170,
        "comment": "        \n         * By default, all matching single-arg constructed are found,\n         * regardless of visibility. Does not apply to factory methods,\n         * they can not be auto-detected; ditto for multiple-argument\n         * constructors.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown#178",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
        "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown(...)",
        "snippet": "",
        "begin_line": 178,
        "end_line": 178,
        "comment": "\t\t\n         * This is the canonical base instance, configured with default\n         * visibility values\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown#187",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
        "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown(...)",
        "snippet": "int PROBE_END_LINE_178 = 178;",
        "begin_line": 187,
        "end_line": 187,
        "comment": "\t\t\n         * This is the canonical base instance, configured with default\n         * visibility values\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown#189",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
        "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown(...)",
        "snippet": "",
        "begin_line": 189,
        "end_line": 189,
        "comment": "\t\t\n         * This is the canonical base instance, configured with default\n         * visibility values\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown#190",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
        "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown(...)",
        "snippet": "/**",
        "begin_line": 190,
        "end_line": 190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown#191",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
        "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown(...)",
        "snippet": "* Constructor used for building instance that has minumum visibility",
        "begin_line": 191,
        "end_line": 191,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown#192",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
        "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown(...)",
        "snippet": "* levels as indicated by given annotation instance",
        "begin_line": 192,
        "end_line": 192,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown#193",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
        "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown(...)",
        "snippet": "*",
        "begin_line": 193,
        "end_line": 193,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown#194",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
        "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.unknown(...)",
        "snippet": "* @param ann Annotations to use for determining minimum visibility levels",
        "begin_line": 194,
        "end_line": 194,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown#32",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown(...)",
        "snippet": "* We will use a default TimeZone as the baseline.",
        "begin_line": 32,
        "end_line": 32,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown#150",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown(...)",
        "snippet": "TypeResolverBuilder<?> typer, DateFormat dateFormat, HandlerInstantiator hi,",
        "begin_line": 150,
        "end_line": 150,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown#151",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown(...)",
        "snippet": "Locale locale, TimeZone tz, Base64Variant defaultBase64)",
        "begin_line": 151,
        "end_line": 151,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown#152",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown(...)",
        "snippet": "{",
        "begin_line": 152,
        "end_line": 152,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown#153",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown(...)",
        "snippet": "int PROBE_START_LINE_151 = 151;",
        "begin_line": 153,
        "end_line": 153,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown#154",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.introspect.ClassIntrospector p_ci_924_line_151 = ci;",
        "begin_line": 154,
        "end_line": 154,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown#155",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown(...)",
        "snippet": "int PROBE_END_LINE_151 = 151;",
        "begin_line": 155,
        "end_line": 155,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown#156",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown(...)",
        "snippet": "_classIntrospector = p_ci_924_line_151;",
        "begin_line": 156,
        "end_line": 156,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown#157",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown(...)",
        "snippet": "int PROBE_START_LINE_152 = 152;",
        "begin_line": 157,
        "end_line": 157,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown#158",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.AnnotationIntrospector p_ai_925_line_152 = ai;",
        "begin_line": 158,
        "end_line": 158,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown#159",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown(...)",
        "snippet": "int PROBE_END_LINE_152 = 152;",
        "begin_line": 159,
        "end_line": 159,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown#160",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown(...)",
        "snippet": "_annotationIntrospector = p_ai_925_line_152;",
        "begin_line": 160,
        "end_line": 160,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown#161",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown(...)",
        "snippet": "int PROBE_START_LINE_153 = 153;",
        "begin_line": 161,
        "end_line": 161,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown#162",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown(...)",
        "snippet": "VisibilityChecker<?> p_vc_926_line_153 = vc;",
        "begin_line": 162,
        "end_line": 162,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown#171",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown(...)",
        "snippet": "int PROBE_END_LINE_155 = 155;",
        "begin_line": 171,
        "end_line": 171,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown#174",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.unknown(...)",
        "snippet": "TypeResolverBuilder<?> p_typer_929_line_156 = typer;",
        "begin_line": 174,
        "end_line": 174,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#258",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "//   some amount of introspection",
        "begin_line": 258,
        "end_line": 258,
        "comment": "       some amount of introspection",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#263",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "// 16-May-2009, tatu: Ditto ^^^",
        "begin_line": 263,
        "end_line": 263,
        "comment": "     16-May-2009, tatu: Ditto ^^^",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#265",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "",
        "begin_line": 265,
        "end_line": 265,
        "comment": "     16-May-2009, tatu: Ditto ^^^",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#271",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "int PROBE_END_LINE_265 = 265;",
        "begin_line": 271,
        "end_line": 271,
        "comment": "     16-May-2009, tatu: Ditto ^^^",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#277",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "*/",
        "begin_line": 277,
        "end_line": 277,
        "comment": "    \n     * @deprecated Since 2.6, do not use: will be removed in 2.7 or later\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#430",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "* Given that we don't expect much concurrency for additions",
        "begin_line": 430,
        "end_line": 430,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#452",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "* {@link BeanSerializerFactory} as its",
        "begin_line": 452,
        "end_line": 452,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#453",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "* {@link SerializerFactory}.",
        "begin_line": 453,
        "end_line": 453,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#511",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "* @param jf JsonFactory to use: if null, a new {@link MappingJsonFactory} will be constructed",
        "begin_line": 511,
        "end_line": 511,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#518",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "DefaultSerializerProvider sp, DefaultDeserializationContext dc)",
        "begin_line": 518,
        "end_line": 518,
        "comment": "    \n     * Constructs instance that uses specified {@link JsonFactory}\n     * for constructing necessary {@link JsonParser}s and/or\n     * {@link JsonGenerator}s, and uses given providers for accessing\n     * serializers and deserializers.\n     * \n     * @param jf JsonFactory to use: if null, a new {@link MappingJsonFactory} will be constructed\n     * @param sp SerializerProvider to use: if null, a {@link SerializerProvider} will be constructed\n     * @param dc Blueprint deserialization context instance to use for creating\n     *    actual context objects; if null, will construct standard\n     *    {@link DeserializationContext}\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#519",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "{",
        "begin_line": 519,
        "end_line": 519,
        "comment": "    \n     * Constructs instance that uses specified {@link JsonFactory}\n     * for constructing necessary {@link JsonParser}s and/or\n     * {@link JsonGenerator}s, and uses given providers for accessing\n     * serializers and deserializers.\n     * \n     * @param jf JsonFactory to use: if null, a new {@link MappingJsonFactory} will be constructed\n     * @param sp SerializerProvider to use: if null, a {@link SerializerProvider} will be constructed\n     * @param dc Blueprint deserialization context instance to use for creating\n     *    actual context objects; if null, will construct standard\n     *    {@link DeserializationContext}\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#526",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "*   have problems with POJONodes.",
        "begin_line": 526,
        "end_line": 526,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#527",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "* 03-Jan-2010, tatu: and obviously we also must pass 'this',",
        "begin_line": 527,
        "end_line": 527,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#529",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "*/",
        "begin_line": 529,
        "end_line": 529,
        "comment": "\t\t/* 02-Mar-2009, tatu: Important: we MUST default to using\n         *   the mapping factory, otherwise tree serialization will\n         *   have problems with POJONodes.\n         * 03-Jan-2010, tatu: and obviously we also must pass 'this',\n         *    to create actual linking.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#531",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "_jsonFactory = new MappingJsonFactory(this);",
        "begin_line": 531,
        "end_line": 531,
        "comment": "\t\t/* 02-Mar-2009, tatu: Important: we MUST default to using\n         *   the mapping factory, otherwise tree serialization will\n         *   have problems with POJONodes.\n         * 03-Jan-2010, tatu: and obviously we also must pass 'this',\n         *    to create actual linking.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#532",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "} else {",
        "begin_line": 532,
        "end_line": 532,
        "comment": "\t\t/* 02-Mar-2009, tatu: Important: we MUST default to using\n         *   the mapping factory, otherwise tree serialization will\n         *   have problems with POJONodes.\n         * 03-Jan-2010, tatu: and obviously we also must pass 'this',\n         *    to create actual linking.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#534",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "if (jf.getCodec() == null) { // as per [JACKSON-741]",
        "begin_line": 534,
        "end_line": 534,
        "comment": "\t\t/* 02-Mar-2009, tatu: Important: we MUST default to using\n         *   the mapping factory, otherwise tree serialization will\n         *   have problems with POJONodes.\n         * 03-Jan-2010, tatu: and obviously we also must pass 'this',\n         *    to create actual linking.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#535",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "_jsonFactory.setCodec(this);",
        "begin_line": 535,
        "end_line": 535,
        "comment": "\t\t/* 02-Mar-2009, tatu: Important: we MUST default to using\n         *   the mapping factory, otherwise tree serialization will\n         *   have problems with POJONodes.\n         * 03-Jan-2010, tatu: and obviously we also must pass 'this',\n         *    to create actual linking.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#537",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "}",
        "begin_line": 537,
        "end_line": 537,
        "comment": "\t\t/* 02-Mar-2009, tatu: Important: we MUST default to using\n         *   the mapping factory, otherwise tree serialization will\n         *   have problems with POJONodes.\n         * 03-Jan-2010, tatu: and obviously we also must pass 'this',\n         *    to create actual linking.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#541",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.type.TypeFactory object_mapper1_expr16_line_529 = TypeFactory.defaultInstance();",
        "begin_line": 541,
        "end_line": 541,
        "comment": "\t\t/* 02-Mar-2009, tatu: Important: we MUST default to using\n         *   the mapping factory, otherwise tree serialization will\n         *   have problems with POJONodes.\n         * 03-Jan-2010, tatu: and obviously we also must pass 'this',\n         *    to create actual linking.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#542",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "int PROBE_END_LINE_529 = 529;",
        "begin_line": 542,
        "end_line": 542,
        "comment": "\t\t/* 02-Mar-2009, tatu: Important: we MUST default to using\n         *   the mapping factory, otherwise tree serialization will\n         *   have problems with POJONodes.\n         * 03-Jan-2010, tatu: and obviously we also must pass 'this',\n         *    to create actual linking.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#546",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "SimpleMixInResolver mixins = new SimpleMixInResolver(null);",
        "begin_line": 546,
        "end_line": 546,
        "comment": "\t\t and default type factory is shared one",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#547",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "int PROBE_START_LINE_532 = 532;",
        "begin_line": 547,
        "end_line": 547,
        "comment": "\t\t and default type factory is shared one",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#551",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "",
        "begin_line": 551,
        "end_line": 551,
        "comment": "\t\t and default type factory is shared one",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#552",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "int PROBE_START_LINE_534 = 534;",
        "begin_line": 552,
        "end_line": 552,
        "comment": "\t\t and default type factory is shared one",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ObjectMapper.unknown#561",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "signature": "com.fasterxml.jackson.databind.ObjectMapper.unknown(...)",
        "snippet": "int PROBE_END_LINE_535 = 536;",
        "begin_line": 561,
        "end_line": 561,
        "comment": "\t\t and default type factory is shared one",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.unknown#21",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.unknown(...)",
        "snippet": "public static final CalendarSerializer instance = new CalendarSerializer();",
        "begin_line": 21,
        "end_line": 21,
        "comment": "\n * Standard serializer for {@link java.util.Calendar}.\n * As with other time/date types, is configurable to produce timestamps\n * (standard Java 64-bit timestamp) or textual formats (usually ISO-8601).\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.unknown#23",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.unknown(...)",
        "snippet": "public CalendarSerializer() { this(null, null); }",
        "begin_line": 23,
        "end_line": 23,
        "comment": "\n * Standard serializer for {@link java.util.Calendar}.\n * As with other time/date types, is configurable to produce timestamps\n * (standard Java 64-bit timestamp) or textual formats (usually ISO-8601).\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.unknown#26",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.unknown(...)",
        "snippet": "super(Calendar.class, useTimestamp, customFormat);",
        "begin_line": 26,
        "end_line": 26,
        "comment": "\n * Standard serializer for {@link java.util.Calendar}.\n * As with other time/date types, is configurable to produce timestamps\n * (standard Java 64-bit timestamp) or textual formats (usually ISO-8601).\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.unknown#27",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.unknown(...)",
        "snippet": "}",
        "begin_line": 27,
        "end_line": 27,
        "comment": "\n * Standard serializer for {@link java.util.Calendar}.\n * As with other time/date types, is configurable to produce timestamps\n * (standard Java 64-bit timestamp) or textual formats (usually ISO-8601).\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.DeserializerCache.unknown#42",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.unknown(...)",
        "snippet": "final protected ConcurrentHashMap<JavaType, JsonDeserializer<Object>> _cachedDeserializers",
        "begin_line": 42,
        "end_line": 42,
        "comment": "    \n     * We will also cache some dynamically constructed deserializers;\n     * specifically, ones that are expensive to construct.\n     * This currently means bean and Enum deserializers; starting with\n     * 2.5, container deserializers will also be cached.\n     *<p>\n     * Given that we don't expect much concurrency for additions\n     * (should very quickly converge to zero after startup), let's\n     * define a relatively low concurrency setting.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.DeserializerCache.unknown#50",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.unknown(...)",
        "snippet": "final protected HashMap<JavaType, JsonDeserializer<Object>> _incompleteDeserializers",
        "begin_line": 50,
        "end_line": 50,
        "comment": "    \n     * During deserializer construction process we may need to keep track of partially\n     * completed deserializers, to resolve cyclic dependencies. This is the\n     * map used for storing deserializers before they are fully complete.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.deser.DeserializerCache.unknown#59",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.unknown(...)",
        "snippet": "public DeserializerCache() { }",
        "begin_line": 59,
        "end_line": 59,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.Annotated.unknown#17",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/Annotated.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
        "signature": "com.fasterxml.jackson.databind.introspect.Annotated.unknown(...)",
        "snippet": "protected Annotated() { }",
        "begin_line": 17,
        "end_line": 17,
        "comment": "\n * Shared base class used for anything on which annotations (included\n * within a {@link AnnotationMap}).\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown#33",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown(...)",
        "snippet": "int PROBE_START_LINE_33 = 33;",
        "begin_line": 33,
        "end_line": 33,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown#34",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown(...)",
        "snippet": "AnnotatedClass basic_class_introspector1_expr1_line_33 = AnnotatedClass.constructWithoutSuperTypes(String.class,",
        "begin_line": 34,
        "end_line": 34,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown#38",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown(...)",
        "snippet": "int PROBE_START_LINE_34 = 34;",
        "begin_line": 38,
        "end_line": 38,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown#39",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.type.SimpleType basic_class_introspector1_expr4_line_34 = SimpleType",
        "begin_line": 39,
        "end_line": 39,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown#43",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown(...)",
        "snippet": ".forOtherUse(null, basic_class_introspector1_expr4_line_34, v_ac_1630_line_34);",
        "begin_line": 43,
        "end_line": 43,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown#44",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown(...)",
        "snippet": "int PROBE_END_LINE_34 = 34;",
        "begin_line": 44,
        "end_line": 44,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown#48",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown(...)",
        "snippet": "static {",
        "begin_line": 48,
        "end_line": 48,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown#49",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown(...)",
        "snippet": "int PROBE_START_LINE_38 = 38;",
        "begin_line": 49,
        "end_line": 49,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown#59",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown(...)",
        "snippet": "com.fasterxml.jackson.databind.introspect.AnnotatedClass v_ac_1632_line_39 = ac;",
        "begin_line": 59,
        "end_line": 59,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown#69",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown(...)",
        "snippet": "AnnotatedClass basic_class_introspector1_expr9_line_43 = AnnotatedClass",
        "begin_line": 69,
        "end_line": 69,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown#71",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown(...)",
        "snippet": "int PROBE_END_LINE_43 = 43;",
        "begin_line": 71,
        "end_line": 71,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown#72",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.unknown(...)",
        "snippet": "AnnotatedClass ac = basic_class_introspector1_expr9_line_43;",
        "begin_line": 72,
        "end_line": 72,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#16",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "public enum SerializationFeature implements ConfigFeature",
        "begin_line": 16,
        "end_line": 16,
        "comment": "\n * Enumeration that defines simple on/off features that affect\n * the way Java objects are serialized.\n *<p>\n * Note that features can be set both through\n * {@link ObjectMapper} (as sort of defaults) and through\n * {@link ObjectWriter}.\n * In first case these defaults must follow \"config-then-use\" patterns\n * (i.e. defined once, not changed afterwards); all per-call\n * changes must be done using {@link ObjectWriter}.\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#35",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "WRAP_ROOT_VALUE(false),",
        "begin_line": 35,
        "end_line": 35,
        "comment": "    \n     * Feature that can be enabled to make root value (usually JSON\n     * Object but can be any type) wrapped within a single property\n     * JSON object, where key as the \"root name\", as determined by\n     * annotation introspector (esp. for JAXB that uses\n     * <code>@XmlRootElement.name</code>) or fallback (non-qualified\n     * class name).\n     * Feature is mostly intended for JAXB compatibility.\n     *<p>\n     * Feature is disabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#49",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "INDENT_OUTPUT(false),",
        "begin_line": 49,
        "end_line": 49,
        "comment": "    \n     * Feature that allows enabling (or disabling) indentation\n     * for the underlying generator, using the default pretty\n     * printer configured for {@link ObjectMapper} (and\n     * {@link ObjectWriter}s created from mapper).\n     *<p>\n     * Note that the default pretty printer is only used if\n     * no explicit {@link com.fasterxml.jackson.core.PrettyPrinter} has been configured\n     * for the generator or {@link ObjectWriter}.\n     *<p>\n     * Feature is disabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#72",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "FAIL_ON_EMPTY_BEANS(true),",
        "begin_line": 72,
        "end_line": 72,
        "comment": "    \n     * Feature that determines what happens when no accessors are\n     * found for a type (and there are no annotations to indicate\n     * it is meant to be serialized). If enabled (default), an\n     * exception is thrown to indicate these as non-serializable\n     * types; if disabled, they are serialized as empty Objects,\n     * i.e. without any properties.\n     *<p>\n     * Note that empty types that this feature has only effect on\n     * those \"empty\" beans that do not have any recognized annotations\n     * (like <code>@JsonSerialize</code>): ones that do have annotations\n     * do not result in an exception being thrown.\n     *<p>\n     * Feature is enabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#84",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "FAIL_ON_SELF_REFERENCES(true),",
        "begin_line": 84,
        "end_line": 84,
        "comment": "    \n     * Feature that determines what happens when a direct self-reference\n     * is detected by a POJO (and no Object Id handling is enabled for it):\n     * either a {@link JsonMappingException} is\n     * thrown (if true), or reference is normally processed (false).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#102",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "WRAP_EXCEPTIONS(true),",
        "begin_line": 102,
        "end_line": 102,
        "comment": "    \n     * Feature that determines whether Jackson code should catch\n     * and wrap {@link Exception}s (but never {@link Error}s!)\n     * to add additional information about\n     * location (within input) of problem or not. If enabled,\n     * most exceptions will be caught and re-thrown (exception\n     * specifically being that {@link java.io.IOException}s may be passed\n     * as is, since they are declared as throwable); this can be\n     * convenient both in that all exceptions will be checked and\n     * declared, and so there is more contextual information.\n     * However, sometimes calling application may just want \"raw\"\n     * unchecked exceptions passed as is.\n     *<p>\n     *<p>\n     * Feature is enabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#116",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS(true),",
        "begin_line": 116,
        "end_line": 116,
        "comment": "    \n     * Feature that determines what happens when an object which\n     * normally has type information included by Jackson is used\n     * in conjunction with {@link com.fasterxml.jackson.annotation.JsonUnwrapped}.\n     * In the default (enabled) state, an error will be thrown when\n     * an unwrapped object has type information. When disabled, the\n     * object will be unwrapped and the type information discarded.\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#140",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "CLOSE_CLOSEABLE(false),",
        "begin_line": 140,
        "end_line": 140,
        "comment": "     \n      * Feature that determines whether <code>close</code> method of\n      * serialized <b>root level</b> objects (ones for which <code>ObjectMapper</code>'s\n      * writeValue() (or equivalent) method is called)\n      * that implement {@link java.io.Closeable}\n      * is called after serialization or not. If enabled, <b>close()</b> will\n      * be called after serialization completes (whether succesfully, or\n      * due to an error manifested by an exception being thrown). You can\n      * think of this as sort of \"finally\" processing.\n      *<p>\n      * NOTE: only affects behavior with <b>root</b> objects, and not other\n      * objects reachable from the root object. Put another way, only one\n      * call will be made for each 'writeValue' call.\n     *<p>\n     * Feature is disabled by default.\n      ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#154",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "FLUSH_AFTER_WRITE_VALUE(true),",
        "begin_line": 154,
        "end_line": 154,
        "comment": "    \n     * Feature that determines whether <code>JsonGenerator.flush()</code> is\n     * called after <code>writeValue()</code> method <b>that takes JsonGenerator\n     * as an argument</b> completes (i.e. does NOT affect methods\n     * that use other destinations); same for methods in {@link ObjectWriter}.\n     * This usually makes sense; but there are cases where flushing\n     * should not be forced: for example when underlying stream is\n     * compressing and flush() causes compression state to be flushed\n     * (which occurs with some compression codecs).\n     *<p>\n     * Feature is enabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#184",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "WRITE_DATES_AS_TIMESTAMPS(true),",
        "begin_line": 184,
        "end_line": 184,
        "comment": "    \n     * Feature that determines whether Date (and date/time) values\n     * (and Date-based things like {@link java.util.Calendar}s) are to be\n     * serialized as numeric timestamps (true; the default),\n     * or as something else (usually textual representation).\n     * If textual representation is used, the actual format is\n     * one returned by a call to\n     * {@link com.fasterxml.jackson.databind.SerializationConfig#getDateFormat}:\n     * the default setting being {@link com.fasterxml.jackson.databind.util.StdDateFormat},\n     * which corresponds to format String of \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"\n     * (see {@link java.text.DateFormat} for details of format Strings).\n     *<p>\n     * Note: whether this feature affects handling of other date-related\n     * types depend on handlers of those types, although ideally they\n     * should use this feature\n     *<p>\n     * Note: whether {@link java.util.Map} keys are serialized as Strings\n     * or not is controlled using {@link #WRITE_DATE_KEYS_AS_TIMESTAMPS}.\n     *<p>\n     * Feature is enabled by default, so that date/time are by default\n     * serialized as timestamps.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#197",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "WRITE_DATE_KEYS_AS_TIMESTAMPS(false),",
        "begin_line": 197,
        "end_line": 197,
        "comment": "    \n     * Feature that determines whether {@link java.util.Date}s\n     * (and sub-types) used as {@link java.util.Map} keys are serialized\n     * as timestamps or not (if not, will be serialized as textual\n     * values).\n     *<p>\n     * Default value is 'false', meaning that Date-valued Map keys are serialized\n     * as textual (ISO-8601) values.\n     *<p>\n     * Feature is disabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#218",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "WRITE_DATES_WITH_ZONE_ID(false),",
        "begin_line": 218,
        "end_line": 218,
        "comment": "    \n     * Feature that determines whether date/date-time values should be serialized\n     * so that they include timezone id, in cases where type itself contains\n     * timezone information. Including this information may lead to compatibility\n     * issues because ISO-8601 specification does not define formats that include\n     * such information.\n     *<p>\n     * If enabled, Timezone id should be included using format specified\n     * with Java 8 <code>DateTimeFormatter#ISO_ZONED_DATE_TIME</code> definition\n     * (for example, '2011-12-03T10:15:30+01:00[Europe/Paris]').\n     *<p>\n     * Note: setting has no relevance if date/time values are serialized as timestamps.\n     *<p>\n     * Feature is disabled by default, so that zone id is NOT included; rather, timezone\n     * offset is used for ISO-8601 compatibility (if any timezone information is\n     * included in value).\n     * \n     * @since 2.6\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#235",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "WRITE_DURATIONS_AS_TIMESTAMPS(true),",
        "begin_line": 235,
        "end_line": 235,
        "comment": "    \n     * Feature that determines whether time values that represents time periods\n     * (durations, periods, ranges) are to be serialized by default using\n     * a numeric (true) or textual (false) representations. Note that numeric\n     * representation may mean either simple number, or an array of numbers,\n     * depending on type.\n     *<p>\n     * Note: whether {@link java.util.Map} keys are serialized as Strings\n     * or not is controlled using {@link #WRITE_DATE_KEYS_AS_TIMESTAMPS}.\n     *<p>\n     * Feature is enabled by default, so that period/duration are by default\n     * serialized as timestamps.\n     * \n     * @since 2.5\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#245",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS(false),",
        "begin_line": 245,
        "end_line": 245,
        "comment": "    \n     * Feature that determines how type <code>char[]</code> is serialized:\n     * when enabled, will be serialized as an explict JSON array (with\n     * single-character Strings as values); when disabled, defaults to\n     * serializing them as Strings (which is more compact).\n     *<p>\n     * Feature is disabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#257",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "WRITE_ENUMS_USING_TO_STRING(false),",
        "begin_line": 257,
        "end_line": 257,
        "comment": "    \n     * Feature that determines standard serialization mechanism used for\n     * Enum values: if enabled, return value of <code>Enum.toString()</code>\n     * is used; if disabled, return value of <code>Enum.name()</code> is used.\n     *<p>\n     * Note: this feature should usually have same value\n     * as {@link DeserializationFeature#READ_ENUMS_USING_TO_STRING}.\n     *<p>\n     * Feature is disabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#272",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "WRITE_ENUMS_USING_INDEX(false),",
        "begin_line": 272,
        "end_line": 272,
        "comment": "    \n     * Feature that determines whethere Java Enum values are serialized\n     * as numbers (true), or textual values (false). If textual values are\n     * used, other settings are also considered.\n     * If this feature is enabled,\n     *  return value of <code>Enum.ordinal()</code>\n     * (an integer) will be used as the serialization.\n     *<p>\n     * Note that this feature has precedence over {@link #WRITE_ENUMS_USING_TO_STRING},\n     * which is only considered if this feature is set to false.\n     *<p>\n     * Feature is disabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#280",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "WRITE_NULL_MAP_VALUES(true),",
        "begin_line": 280,
        "end_line": 280,
        "comment": "    \n     * Feature that determines whether Map entries with null values are\n     * to be serialized (true) or not (false).\n     *<p>\n     * Feature is enabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#293",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "WRITE_EMPTY_JSON_ARRAYS(true),",
        "begin_line": 293,
        "end_line": 293,
        "comment": "    \n     * Feature that determines whether Container properties (POJO properties\n     * with declared value of Collection or array; i.e. things that produce JSON\n     * arrays) that are empty (have no elements)\n     * will be serialized as empty JSON arrays (true), or suppressed from output (false).\n     *<p>\n     * Note that this does not change behavior of {@link java.util.Map}s, or\n     * \"Collection-like\" types.\n     *<p>\n     * Feature is enabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#316",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED(false),",
        "begin_line": 316,
        "end_line": 316,
        "comment": "    \n     * Feature added for interoperability, to work with oddities of\n     * so-called \"BadgerFish\" convention.\n     * Feature determines handling of single element {@link java.util.Collection}s\n     * and arrays: if enabled, {@link java.util.Collection}s and arrays that contain exactly\n     * one element will be serialized as if that element itself was serialized.\n     *<p>\n     * When enabled, a POJO with array that normally looks like this:\n     *<pre>\n     *  { \"arrayProperty\" : [ 1 ] }\n     *</pre>\n     * will instead be serialized as\n     *<pre>\n     *  { \"arrayProperty\" : 1 }\n     *</pre>\n     *<p>\n     * Note that this feature is counterpart to {@link DeserializationFeature#ACCEPT_SINGLE_VALUE_AS_ARRAY}\n     * (that is, usually both are enabled, or neither is).\n     *<p>\n     * Feature is disabled by default, so that no special handling is done.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#334",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "@Deprecated // since 2.5",
        "begin_line": 334,
        "end_line": 334,
        "comment": "    \n     * Feature that determines whether {@link java.math.BigDecimal} entries are\n     * serialized using {@link java.math.BigDecimal#toPlainString()} to prevent\n     * values to be written using scientific notation.\n     *<p>\n     * NOTE: since this feature typically requires use of\n     * {@link com.fasterxml.jackson.core.JsonGenerator#writeNumber(String)}\n     * it may cause compatibility problems since not all {@link com.fasterxml.jackson.core.JsonGenerator}\n     * implementations support such mode of output: usually only text-based formats\n     * support it.\n     *<p>\n     * Feature is disabled by default.\n     * \n     * @deprecated Since 2.5: use {@link com.fasterxml.jackson.core.JsonGenerator.Feature#WRITE_BIGDECIMAL_AS_PLAIN} instead\n     *    (using {@link ObjectWriter#with(com.fasterxml.jackson.core.JsonGenerator.Feature)}).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#352",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS(true),",
        "begin_line": 352,
        "end_line": 352,
        "comment": "    \n     * Feature that controls whether numeric timestamp values are\n     * to be written using nanosecond timestamps (enabled) or not (disabled);\n     * <b>if and only if</b> datatype supports such resolution.\n     * Only newer datatypes (such as Java8 Date/Time) support such resolution --\n     * older types (pre-Java8 <b>java.util.Date</b> etc) and Joda do not --\n     * and this setting <b>has no effect</b> on such types.\n     *<p>\n     * If disabled, standard millisecond timestamps are assumed.\n     * This is the counterpart to {@link SerializationFeature#WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS}.\n     *<p>\n     * Feature is enabled by default, to support most accurate time values possible.\n     *\n     * @since 2.2\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#362",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "ORDER_MAP_ENTRIES_BY_KEYS(false),",
        "begin_line": 362,
        "end_line": 362,
        "comment": "    \n     * Feature that determines whether {@link java.util.Map} entries are first\n     * sorted by key before serialization or not: if enabled, additional sorting\n     * step is performed if necessary (not necessary for {@link java.util.SortedMap}s),\n     * if disabled, no additional sorting is needed.\n     *<p>\n     * Feature is disabled by default.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#384",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "EAGER_SERIALIZER_FETCH(true),",
        "begin_line": 384,
        "end_line": 384,
        "comment": "    \n     * Feature that determines whether {@link ObjectWriter} should\n     * try to eagerly fetch necessary {@link JsonSerializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectWriter} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#405",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "USE_EQUALITY_FOR_OBJECT_ID(false)",
        "begin_line": 405,
        "end_line": 405,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#411",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "private SerializationFeature(boolean defaultState) {",
        "begin_line": 411,
        "end_line": 411,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#412",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "int PROBE_START_LINE_412 = 412;",
        "begin_line": 412,
        "end_line": 412,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#413",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "boolean p_default_state_833_line_412 = defaultState;",
        "begin_line": 413,
        "end_line": 413,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#414",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "int PROBE_END_LINE_412 = 412;",
        "begin_line": 414,
        "end_line": 414,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#417",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "int serialization_feature1_expr3_line_413 = ordinal();",
        "begin_line": 417,
        "end_line": 417,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.SerializationFeature.unknown#421",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "signature": "com.fasterxml.jackson.databind.SerializationFeature.unknown(...)",
        "snippet": "_mask = serialization_feature1_expr1_line_413;",
        "begin_line": 421,
        "end_line": 421,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.unknown#35",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.unknown(...)",
        "snippet": "super(Boolean.class);",
        "begin_line": 35,
        "end_line": 35,
        "comment": "    \n     * Whether type serialized is primitive (boolean) or wrapper\n     * (java.lang.Boolean); if true, former, if false, latter.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.unknown#36",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.unknown(...)",
        "snippet": "int PROBE_START_LINE_36 = 36;",
        "begin_line": 36,
        "end_line": 36,
        "comment": "    \n     * Whether type serialized is primitive (boolean) or wrapper\n     * (java.lang.Boolean); if true, former, if false, latter.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.unknown#37",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.unknown(...)",
        "snippet": "boolean p_for_primitive_2229_line_36 = forPrimitive;",
        "begin_line": 37,
        "end_line": 37,
        "comment": "    \n     * Whether type serialized is primitive (boolean) or wrapper\n     * (java.lang.Boolean); if true, former, if false, latter.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#56",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "* For error messages we'll also need a list of all formats.",
        "begin_line": 56,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#69",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "private final static TimeZone DEFAULT_TIMEZONE;",
        "begin_line": 69,
        "end_line": 69,
        "comment": "    \n     * By default we use UTC for everything, with Jackson 2.7 and later\n     * (2.6 and earlier relied on GMT)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#72",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "java.util.TimeZone std_date_format1_expr2_line_69 = TimeZone.getTimeZone(\"UTC\");",
        "begin_line": 72,
        "end_line": 72,
        "comment": "    \n     * By default we use UTC for everything, with Jackson 2.7 and later\n     * (2.6 and earlier relied on GMT)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#90",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "protected final static DateFormat DATE_FORMAT_PLAIN;",
        "begin_line": 90,
        "end_line": 90,
        "comment": "    \n     * By default we use UTC for everything, with Jackson 2.7 and later\n     * (2.6 and earlier relied on GMT)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#91",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "",
        "begin_line": 91,
        "end_line": 91,
        "comment": "    \n     * By default we use UTC for everything, with Jackson 2.7 and later\n     * (2.6 and earlier relied on GMT)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#92",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "/* Let's construct \"blueprint\" date format instances: can not be used",
        "begin_line": 92,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#93",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "* as is, due to thread-safety issues, but can be used for constructing",
        "begin_line": 93,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#94",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "* actual instances more cheaply (avoids re-parsing).",
        "begin_line": 94,
        "end_line": 94,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#95",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "*/",
        "begin_line": 95,
        "end_line": 95,
        "comment": "    /* Let's construct \"blueprint\" date format instances: can not be used\n     * as is, due to thread-safety issues, but can be used for constructing\n     * actual instances more cheaply (avoids re-parsing).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#96",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "static {",
        "begin_line": 96,
        "end_line": 96,
        "comment": "    /* Let's construct \"blueprint\" date format instances: can not be used\n     * as is, due to thread-safety issues, but can be used for constructing\n     * actual instances more cheaply (avoids re-parsing).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#97",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "/* Another important thing: let's force use of default timezone for",
        "begin_line": 97,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#103",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "java.util.Locale f_default_locale_2782_line_90 = DEFAULT_LOCALE;",
        "begin_line": 103,
        "end_line": 103,
        "comment": "        /* Another important thing: let's force use of default timezone for\n         * baseline DataFormat objects\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#134",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "int PROBE_END_LINE_96 = 96;",
        "begin_line": 134,
        "end_line": 134,
        "comment": "        /* Another important thing: let's force use of default timezone for\n         * baseline DataFormat objects\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#135",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "DATE_FORMAT_PLAIN = new SimpleDateFormat(f_date_format_str_plain_2791_line_96, f_default_locale_2782_line_96);",
        "begin_line": 135,
        "end_line": 135,
        "comment": "        /* Another important thing: let's force use of default timezone for\n         * baseline DataFormat objects\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#136",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "int PROBE_START_LINE_97 = 97;",
        "begin_line": 136,
        "end_line": 136,
        "comment": "        /* Another important thing: let's force use of default timezone for\n         * baseline DataFormat objects\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#144",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "* A singleton instance can be used for cloning purposes, as a blueprint of sorts.",
        "begin_line": 144,
        "end_line": 144,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#145",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "*/",
        "begin_line": 145,
        "end_line": 145,
        "comment": "    \n     * A singleton instance can be used for cloning purposes, as a blueprint of sorts.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#146",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "public final static StdDateFormat instance = new StdDateFormat();",
        "begin_line": 146,
        "end_line": 146,
        "comment": "    \n     * A singleton instance can be used for cloning purposes, as a blueprint of sorts.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#147",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "",
        "begin_line": 147,
        "end_line": 147,
        "comment": "    \n     * A singleton instance can be used for cloning purposes, as a blueprint of sorts.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#148",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "/**",
        "begin_line": 148,
        "end_line": 148,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#180",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "int PROBE_END_LINE_135 = 135;",
        "begin_line": 180,
        "end_line": 180,
        "comment": "    ********************************************************\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#254",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "* compliant date format.",
        "begin_line": 254,
        "end_line": 254,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown#256",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.unknown(...)",
        "snippet": "* @since 2.4",
        "begin_line": 256,
        "end_line": 256,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer.unknown#27",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializer.unknown(...)",
        "snippet": "public final static NumberSerializer instance = new NumberSerializer(Number.class);",
        "begin_line": 27,
        "end_line": 27,
        "comment": "    \n     * Static instance that is only to be used for {@link java.lang.Number}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer.unknown#35",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializer.unknown(...)",
        "snippet": "super(rawType, false);",
        "begin_line": 35,
        "end_line": 35,
        "comment": "    \n     * @since 2.5\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer.unknown#37",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializer.unknown(...)",
        "snippet": "Class<? extends Number> p_raw_type_2297_line_37 = rawType;",
        "begin_line": 37,
        "end_line": 37,
        "comment": "    \n     * @since 2.5\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer.unknown#38",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
        "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializer.unknown(...)",
        "snippet": "boolean number_serializer1_expr6_line_37 = p_raw_type_2297_line_37 == BigInteger.class;",
        "begin_line": 38,
        "end_line": 38,
        "comment": "    \n     * @since 2.5\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    }
]