[
    {
        "class_name": "com.fasterxml.jackson.databind.util.ArrayIterator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/ArrayIterator.java",
        "signature": "int PROBE_START_LINE_17",
        "snippet": "int PROBE_START_LINE_17 = 17;\nT[] p_a_4672_line_17 = a;",
        "begin_line": 17,
        "end_line": 18,
        "comment": "\n * Iterator implementation used to efficiently expose contents of an\n * Array as read-only iterator.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ArrayIterator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/ArrayIterator.java",
        "signature": "int PROBE_END_LINE_17",
        "snippet": "int PROBE_END_LINE_17 = 17;\n_a = p_a_4672_line_17;",
        "begin_line": 19,
        "end_line": 20,
        "comment": "\n * Iterator implementation used to efficiently expose contents of an\n * Array as read-only iterator.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ArrayIterator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/ArrayIterator.java",
        "signature": "int PROBE_END_LINE_22",
        "snippet": "int PROBE_END_LINE_22 = 22;\nreturn array_iterator1_expr2_line_22; }\n\n@Override\npublic T next() {\nif (_index >= _a.length) {\nthrow new NoSuchElementException();",
        "begin_line": 30,
        "end_line": 36,
        "comment": "\n * Iterator implementation used to efficiently expose contents of an\n * Array as read-only iterator.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_END_LINE_271",
        "snippet": "int PROBE_END_LINE_271 = 271;\nJsonIgnoreProperties v = jackson_annotation_introspector1_expr10_line_271;",
        "begin_line": 310,
        "end_line": 311,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "boolean jackson_annotation_introspector1_expr18_line_310",
        "snippet": "boolean jackson_annotation_introspector1_expr18_line_310 = v_ignore_3063_line_310 == null;\nboolean jackson_annotation_introspector1_expr16_line_310 = (jackson_annotation_introspector1_expr18_line_310);",
        "begin_line": 361,
        "end_line": 362,
        "comment": "         13-May-2015, tatu: As per [databind#95], allow read-only/write-only props"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "JsonFilter ann",
        "snippet": "JsonFilter ann = _findAnnotation(a, JsonFilter.class);\nif (ann != null) {\nString id = ann.value();",
        "begin_line": 376,
        "end_line": 378,
        "comment": "         13-May-2015, tatu: As per [databind#95], allow read-only/write-only props"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_329",
        "snippet": "int PROBE_START_LINE_329 = 329;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass p_ac_3065_line_329 = ac;",
        "begin_line": 390,
        "end_line": 391,
        "comment": "             Empty String is same as not having annotation, to allow overrides"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_330",
        "snippet": "int PROBE_START_LINE_330 = 330;\ncom.fasterxml.jackson.databind.annotation.JsonNaming v_ann_3066_line_330 = ann;",
        "begin_line": 396,
        "end_line": 397,
        "comment": "             Empty String is same as not having annotation, to allow overrides"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "boolean jackson_annotation_introspector1_expr24_line_330",
        "snippet": "boolean jackson_annotation_introspector1_expr24_line_330 = v_ann_3066_line_330 == null;\nboolean jackson_annotation_introspector1_expr22_line_330 = (jackson_annotation_introspector1_expr24_line_330);",
        "begin_line": 398,
        "end_line": 399,
        "comment": "             Empty String is same as not having annotation, to allow overrides"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_349",
        "snippet": "int PROBE_START_LINE_349 = 349;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass p_ac_3068_line_349 = ac;",
        "begin_line": 427,
        "end_line": 428,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_END_LINE_349",
        "snippet": "int PROBE_END_LINE_349 = 349;\nJsonAutoDetect ann = jackson_annotation_introspector1_expr25_line_349;",
        "begin_line": 431,
        "end_line": 432,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "boolean jackson_annotation_introspector1_expr30_line_350",
        "snippet": "boolean jackson_annotation_introspector1_expr30_line_350 = v_ann_3070_line_350 == null;\nboolean jackson_annotation_introspector1_expr28_line_350 = (jackson_annotation_introspector1_expr30_line_350);",
        "begin_line": 435,
        "end_line": 436,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_367",
        "snippet": "int PROBE_START_LINE_367 = 367;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMember p_m_3073_line_367 = m;",
        "begin_line": 481,
        "end_line": 482,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_392",
        "snippet": "int PROBE_START_LINE_392 = 392;\ncom.fasterxml.jackson.annotation.JsonPropertyDescription v_desc_3079_line_392 = desc;",
        "begin_line": 533,
        "end_line": 534,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_397",
        "snippet": "int PROBE_START_LINE_397 = 397;\ncom.fasterxml.jackson.databind.introspect.Annotated p_ann_3080_line_397 = ann;",
        "begin_line": 550,
        "end_line": 551,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "String str",
        "snippet": "String str = prop.defaultValue();\n// Since annotations do not allow nulls, need to assume empty means \"none\"\nreturn str.isEmpty() ? null : str;",
        "begin_line": 584,
        "end_line": 586,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_END_LINE_550",
        "snippet": "int PROBE_END_LINE_550 = 550;\nreturn jackson_annotation_introspector1_expr82_line_550;",
        "begin_line": 806,
        "end_line": 807,
        "comment": "\t\t/* First: let's ensure property is a container type: caller should have\n         * verified but just to be sure\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "JsonSubTypes t",
        "snippet": "JsonSubTypes t = _findAnnotation(a, JsonSubTypes.class);\nif (t == null) return null;",
        "begin_line": 813,
        "end_line": 814,
        "comment": "\t\t/* First: let's ensure property is a container type: caller should have\n         * verified but just to be sure\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "ArrayList<NamedType> result",
        "snippet": "ArrayList<NamedType> result = new ArrayList<NamedType>(types.length);\nfor (JsonSubTypes.Type type : types) {\nresult.add(new NamedType(type.value(), type.name()));",
        "begin_line": 816,
        "end_line": 818,
        "comment": "\t\t/* First: let's ensure property is a container type: caller should have\n         * verified but just to be sure\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "JsonInclude inc",
        "snippet": "JsonInclude inc = _findAnnotation(a, JsonInclude.class);\nif (inc != null) {\nJsonInclude.Include v = inc.value();",
        "begin_line": 957,
        "end_line": 959,
        "comment": "             let's construct instance with nominal type:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "JsonSerialize ann",
        "snippet": "JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\nif (ann != null) {\nJsonSerialize.Inclusion i2 = ann.include();",
        "begin_line": 964,
        "end_line": 966,
        "comment": "             let's construct instance with nominal type:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "JsonSerialize ann",
        "snippet": "JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\nif (ann != null) {\nJsonSerialize.Inclusion i2 = ann.include();",
        "begin_line": 1004,
        "end_line": 1006,
        "comment": "             let's construct instance with nominal type:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_807",
        "snippet": "int PROBE_START_LINE_807 = 807;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass p_ac_3130_line_807 = ac;",
        "begin_line": 1080,
        "end_line": 1081,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_808",
        "snippet": "int PROBE_START_LINE_808 = 808;\ncom.fasterxml.jackson.annotation.JsonPropertyOrder v_order_3131_line_808 = order;",
        "begin_line": 1086,
        "end_line": 1087,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_END_LINE_817",
        "snippet": "int PROBE_END_LINE_817 = 817;\nJsonPropertyOrder order = jackson_annotation_introspector1_expr96_line_817;",
        "begin_line": 1115,
        "end_line": 1116,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "boolean jackson_annotation_introspector1_expr100_line_821",
        "snippet": "boolean jackson_annotation_introspector1_expr100_line_821 = v_order_3134_line_821 != null;\nboolean jackson_annotation_introspector1_expr99_line_821 = (jackson_annotation_introspector1_expr100_line_821);",
        "begin_line": 1119,
        "end_line": 1120,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "boolean jackson_annotation_introspector1_expr101_line_821",
        "snippet": "boolean jackson_annotation_introspector1_expr101_line_821 = true;\nif (jackson_annotation_introspector1_expr99_line_821) {\njackson_annotation_introspector1_expr101_line_821 = order.alphabetic();",
        "begin_line": 1121,
        "end_line": 1123,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_END_LINE_821",
        "snippet": "int PROBE_END_LINE_821 = 823;\n/* 23-Jun-2015, tatu: as per [databind#840], let's only consider\n*  `true` to have any significance.\n*/\nif (jackson_annotation_introspector1_expr98_line_821) {\nreturn Boolean.TRUE;",
        "begin_line": 1127,
        "end_line": 1132,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "String attrName",
        "snippet": "String attrName = attr.value();\n\n// allow explicit renaming; if none, default to attribute name\nPropertyName propName = _propertyName(attr.propName(), attr.propNamespace());",
        "begin_line": 1181,
        "end_line": 1184,
        "comment": "         could add Index, Description in future, if those matter"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.FieldProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java",
        "signature": "int PROBE_START_LINE_39",
        "snippet": "int PROBE_START_LINE_39 = 39;\ncom.fasterxml.jackson.databind.introspect.AnnotatedField p_field_2332_line_39 = field;",
        "begin_line": 40,
        "end_line": 41,
        "comment": "    \n     * Actual field to set when deserializing this property.\n     * Transient since there is no need to persist; only needed during\n     * construction of objects.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.FieldProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java",
        "signature": "int PROBE_START_LINE_40",
        "snippet": "int PROBE_START_LINE_40 = 40;\ncom.fasterxml.jackson.databind.introspect.AnnotatedField p_field_2332_line_40 = field;",
        "begin_line": 44,
        "end_line": 45,
        "comment": "    \n     * Actual field to set when deserializing this property.\n     * Transient since there is no need to persist; only needed during\n     * construction of objects.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.FieldProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java",
        "signature": "int PROBE_END_LINE_40",
        "snippet": "int PROBE_END_LINE_40 = 40;\n_field = field_property1_expr2_line_40;",
        "begin_line": 47,
        "end_line": 48,
        "comment": "    \n     * Actual field to set when deserializing this property.\n     * Transient since there is no need to persist; only needed during\n     * construction of objects.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.FieldProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java",
        "signature": "Field f",
        "snippet": "Field f = _annotated.getAnnotated();\nif (f == null) {\nthrow new IllegalArgumentException(\"Missing field (broken JDK (de)serialization?)\");",
        "begin_line": 78,
        "end_line": 80,
        "comment": "    \n     * Constructor used for JDK Serialization when reading persisted object\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "int PROBE_START_LINE_96",
        "snippet": "int PROBE_START_LINE_96 = 96;\ncom.fasterxml.jackson.databind.JavaType p_collection_type_2358_line_96 = collectionType;",
        "begin_line": 100,
        "end_line": 101,
        "comment": "    \n     * Constructor used when creating contextualized instances.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "int PROBE_END_LINE_96",
        "snippet": "int PROBE_END_LINE_96 = 96;\n_collectionType = p_collection_type_2358_line_96;",
        "begin_line": 102,
        "end_line": 103,
        "comment": "    \n     * Constructor used when creating contextualized instances.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "JsonDeserializer<Object> delegateDeser",
        "snippet": "JsonDeserializer<Object> delegateDeser = null;\nint PROBE_START_LINE_175 = 193;",
        "begin_line": 196,
        "end_line": 197,
        "comment": "         May need to resolve types for delegate-based creators:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "boolean collection_deserializer1_expr3_line_175",
        "snippet": "boolean collection_deserializer1_expr3_line_175 = f__value_instantiator_2367_line_175 != null;\nint PROBE_END_LINE_175 = 193;",
        "begin_line": 199,
        "end_line": 200,
        "comment": "         May need to resolve types for delegate-based creators:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "int PROBE_START_LINE_176",
        "snippet": "int PROBE_START_LINE_176 = 192;\ncom.fasterxml.jackson.databind.deser.ValueInstantiator f__value_instantiator_2367_line_176 = _valueInstantiator;",
        "begin_line": 202,
        "end_line": 203,
        "comment": "         May need to resolve types for delegate-based creators:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "int PROBE_END_LINE_176",
        "snippet": "int PROBE_END_LINE_176 = 192;\nif (collection_deserializer1_expr4_line_176) {\nJavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());",
        "begin_line": 206,
        "end_line": 208,
        "comment": "         May need to resolve types for delegate-based creators:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
        "signature": "boolean std_deserializer1_expr8_line_1010",
        "snippet": "boolean std_deserializer1_expr8_line_1010 = v_intr_2493_line_1010 != null;\nboolean std_deserializer1_expr9_line_1010 = true;",
        "begin_line": 1039,
        "end_line": 1040,
        "comment": "    \n     * Helper method that can be used to see if specified property has annotation\n     * indicating that a converter is to be used for contained values (contents\n     * of structured types; array/List/Map values)\n     * \n     * @param existingDeserializer (optional) configured content\n     *    serializer if one already exists.\n     * \n     * @since 2.2\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
        "signature": "int PROBE_START_LINE_1013",
        "snippet": "int PROBE_START_LINE_1013 = 1013;\ncom.fasterxml.jackson.databind.AnnotationIntrospector v_intr_2493_line_1013 = intr;",
        "begin_line": 1059,
        "end_line": 1060,
        "comment": "    \n     * Helper method that can be used to see if specified property has annotation\n     * indicating that a converter is to be used for contained values (contents\n     * of structured types; array/List/Map values)\n     * \n     * @param existingDeserializer (optional) configured content\n     *    serializer if one already exists.\n     * \n     * @since 2.2\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
        "signature": "int PROBE_START_LINE_33",
        "snippet": "int PROBE_START_LINE_33 = 35;\nConstructor<?> p_constructor_2786_line_33 = constructor;",
        "begin_line": 35,
        "end_line": 36,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
        "signature": "boolean annotated_constructor1_expr2_line_33",
        "snippet": "boolean annotated_constructor1_expr2_line_33 = p_constructor_2786_line_33 == null;\nint PROBE_END_LINE_33 = 35;",
        "begin_line": 37,
        "end_line": 38,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
        "signature": "int PROBE_START_LINE_88",
        "snippet": "int PROBE_START_LINE_88 = 88;\nConstructor<?> f__constructor_2789_line_88 = _constructor;",
        "begin_line": 100,
        "end_line": 101,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
        "signature": "int annotated_constructor1_expr3_line_88",
        "snippet": "int annotated_constructor1_expr3_line_88 = annotated_constructor1_expr4_line_88.length;\nint PROBE_END_LINE_88 = 88;",
        "begin_line": 103,
        "end_line": 104,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
        "signature": "Type[] types",
        "snippet": "Type[] types = annotated_constructor1_expr10_line_100;\nint PROBE_START_LINE_101 = 103;",
        "begin_line": 139,
        "end_line": 140,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
        "signature": "int p_index_2794_line_101",
        "snippet": "int p_index_2794_line_101 = index;\njava.lang.reflect.Type[] v_types_2795_line_101 = types;",
        "begin_line": 141,
        "end_line": 142,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_48",
        "snippet": "int PROBE_END_LINE_48 = 48;\n\nprotected final static TypeBindings EMPTY_BINDINGS = type_factory1_expr3_line_48;",
        "begin_line": 58,
        "end_line": 60,
        "comment": "    \n     * Globally shared singleton. Not accessed directly; non-core\n     * code should use per-ObjectMapper instance (via configuration objects).\n     * Core Jackson code uses {@link #defaultInstance} for accessing it.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_67",
        "snippet": "int PROBE_START_LINE_67 = 67;\n\nprivate static final Class<Boolean> f_type_2950_line_67 = Boolean.TYPE;",
        "begin_line": 79,
        "end_line": 81,
        "comment": "       parts of processing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_67",
        "snippet": "int PROBE_END_LINE_67 = 67;\n\nprivate final static Class<?> CLS_BOOL = f_type_2950_line_67;",
        "begin_line": 83,
        "end_line": 85,
        "comment": "       parts of processing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_68",
        "snippet": "int PROBE_START_LINE_68 = 68;\n\nprivate static final Class<Integer> f_type_2953_line_68 = Integer.TYPE;",
        "begin_line": 86,
        "end_line": 88,
        "comment": "       parts of processing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_69",
        "snippet": "int PROBE_START_LINE_69 = 69;\n\nprivate static final Class<Long> f_type_2956_line_69 = Long.TYPE;",
        "begin_line": 93,
        "end_line": 95,
        "comment": "       parts of processing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_86",
        "snippet": "int PROBE_END_LINE_86 = 86;\n\n// @since 2.7\nprotected final static SimpleType CORE_TYPE_OBJECT = new SimpleType(f_cls_object_4470_line_86);",
        "begin_line": 143,
        "end_line": 146,
        "comment": "\t and as to String... well, for now, ignore its super types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_88",
        "snippet": "int PROBE_END_LINE_88 = 94;\n\n/**\n* Cache {@link Comparable} because it is both parameteric (relatively costly to\n* resolve) and mostly useless (no special handling), better handle directly\n*\n* @since 2.7\n*/\nprotected final static SimpleType CORE_TYPE_COMPARABLE = new SimpleType(f_cls_comparable_4471_line_94);",
        "begin_line": 152,
        "end_line": 160,
        "comment": "\t @since 2.7"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "Throwable prob",
        "snippet": "Throwable prob = null;\nClassLoader loader = this.getClassLoader();",
        "begin_line": 369,
        "end_line": 370,
        "comment": "         Two-phase lookup: first using context ClassLoader; then default"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "List<JavaType> typeParams",
        "snippet": "List<JavaType> typeParams = bindings.getTypeParameters();\n// ok to have no types (\"raw\")\nswitch (typeParams.size()) {\ncase 0: // acceptable?\nkt = vt = _unknownType();",
        "begin_line": 1177,
        "end_line": 1181,
        "comment": "         28-May-2015, tatu: Properties are special, as per [databind#810]; fake \"correct\" parameter sig"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "List<JavaType> typeParams",
        "snippet": "List<JavaType> typeParams = type_factory1_expr42_line_1053;\n// ok to have no types (\"raw\")\nJavaType ct;",
        "begin_line": 1201,
        "end_line": 1203,
        "comment": "             ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_1058",
        "snippet": "int PROBE_START_LINE_1058 = 1062;\nList<com.fasterxml.jackson.databind.JavaType> v_type_params_4587_line_1058 = typeParams;",
        "begin_line": 1211,
        "end_line": 1212,
        "comment": "         ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int type_factory1_expr45_line_1058",
        "snippet": "int type_factory1_expr45_line_1058 = v_type_params_4587_line_1058.size();\nboolean type_factory1_expr44_line_1058 = type_factory1_expr45_line_1058 == 1;",
        "begin_line": 1213,
        "end_line": 1214,
        "comment": "         ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_1058",
        "snippet": "int PROBE_END_LINE_1058 = 1062;\nif (type_factory1_expr44_line_1058) {\nct = typeParams.get(0);",
        "begin_line": 1215,
        "end_line": 1217,
        "comment": "         ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_1063",
        "snippet": "int PROBE_START_LINE_1063 = 1063;\nClass<?> p_raw_class_4583_line_1063 = rawClass;",
        "begin_line": 1223,
        "end_line": 1224,
        "comment": "         ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_1063",
        "snippet": "int PROBE_END_LINE_1063 = 1063;\nreturn type_factory1_expr48_line_1063;",
        "begin_line": 1232,
        "end_line": 1233,
        "comment": "         ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "List<JavaType> typeParams",
        "snippet": "List<JavaType> typeParams = bindings.getTypeParameters();\n// ok to have no types (\"raw\")\nJavaType ct;",
        "begin_line": 1239,
        "end_line": 1241,
        "comment": "         ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_1112",
        "snippet": "int PROBE_START_LINE_1112 = 1112;\nClass<?> p_raw_4597_line_1112 = raw;",
        "begin_line": 1282,
        "end_line": 1283,
        "comment": "    \n     * Factory method that is to create a new {@link SimpleType} with no\n     * checks whatsoever. Default implementation calls the single argument\n     * constructor of {@link SimpleType}.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_1112",
        "snippet": "int PROBE_END_LINE_1112 = 1112;\nreturn new SimpleType(p_raw_4597_line_1112, p_bindings_4598_line_1112, p_super_class_4599_line_1112, p_super_interfaces_4600_line_1112);",
        "begin_line": 1287,
        "end_line": 1288,
        "comment": "    \n     * Factory method that is to create a new {@link SimpleType} with no\n     * checks whatsoever. Default implementation calls the single argument\n     * constructor of {@link SimpleType}.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_1132",
        "snippet": "int PROBE_START_LINE_1132 = 1139;\nClass<?> p_clz_4601_line_1132 = clz;",
        "begin_line": 1308,
        "end_line": 1309,
        "comment": "    \n     * Helper method called to see if requested, non-generic-parameterized\n     * type is one of common, \"well-known\" types, instances of which are\n     * pre-constructed and do not need dynamic caching.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "boolean type_factory1_expr50_line_1132",
        "snippet": "boolean type_factory1_expr50_line_1132 = p_clz_4601_line_1132.isPrimitive();\nint PROBE_END_LINE_1132 = 1139;",
        "begin_line": 1310,
        "end_line": 1311,
        "comment": "    \n     * Helper method called to see if requested, non-generic-parameterized\n     * type is one of common, \"well-known\" types, instances of which are\n     * pre-constructed and do not need dynamic caching.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_1133",
        "snippet": "int PROBE_START_LINE_1133 = 1133;\nClass<?> p_clz_4601_line_1133 = clz;",
        "begin_line": 1313,
        "end_line": 1314,
        "comment": "    \n     * Helper method called to see if requested, non-generic-parameterized\n     * type is one of common, \"well-known\" types, instances of which are\n     * pre-constructed and do not need dynamic caching.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_1134",
        "snippet": "int PROBE_END_LINE_1134 = 1134;\nreturn f_core_type_int_4478_line_1134;",
        "begin_line": 1328,
        "end_line": 1329,
        "comment": "    \n     * Helper method called to see if requested, non-generic-parameterized\n     * type is one of common, \"well-known\" types, instances of which are\n     * pre-constructed and do not need dynamic caching.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_1137",
        "snippet": "int PROBE_START_LINE_1137 = 1137;\nClass<?> p_clz_4601_line_1137 = clz;",
        "begin_line": 1333,
        "end_line": 1334,
        "comment": "    \n     * Helper method called to see if requested, non-generic-parameterized\n     * type is one of common, \"well-known\" types, instances of which are\n     * pre-constructed and do not need dynamic caching.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "boolean type_factory1_expr53_line_1137",
        "snippet": "boolean type_factory1_expr53_line_1137 = p_clz_4601_line_1137 == f_cls_string_4469_line_1137;\nif (type_factory1_expr53_line_1137) {\ncom.fasterxml.jackson.databind.type.SimpleType f_core_type_string_4480_line_1137 = CORE_TYPE_STRING;",
        "begin_line": 1336,
        "end_line": 1338,
        "comment": "    \n     * Helper method called to see if requested, non-generic-parameterized\n     * type is one of common, \"well-known\" types, instances of which are\n     * pre-constructed and do not need dynamic caching.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_1138",
        "snippet": "int PROBE_START_LINE_1138 = 1138;\nClass<?> p_clz_4601_line_1138 = clz;",
        "begin_line": 1342,
        "end_line": 1343,
        "comment": "    \n     * Helper method called to see if requested, non-generic-parameterized\n     * type is one of common, \"well-known\" types, instances of which are\n     * pre-constructed and do not need dynamic caching.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "boolean type_factory1_expr55_line_1159",
        "snippet": "boolean type_factory1_expr55_line_1159 = p_type_4603_line_1159 instanceof Class<?>;\nint PROBE_END_LINE_1159 = 1182;",
        "begin_line": 1373,
        "end_line": 1374,
        "comment": "    \n     * Factory method that can be used if type information is passed\n     * as Java typing returned from <code>getGenericXxx</code> methods\n     * (usually for a return or argument type).\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_1161",
        "snippet": "int PROBE_START_LINE_1161 = 1161;\ncom.fasterxml.jackson.databind.type.ClassStack p_context_4602_line_1161 = context;",
        "begin_line": 1377,
        "end_line": 1378,
        "comment": "\t\t simple class?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_1164",
        "snippet": "int PROBE_START_LINE_1164 = 1182;\njava.lang.reflect.Type p_type_4603_line_1164 = type;",
        "begin_line": 1387,
        "end_line": 1388,
        "comment": "\t\t\t Important: remove possible bindings since this is type-erased thingy"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "TypeBindings b",
        "snippet": "TypeBindings b = resultType.getBindings();\nif (b == null) {\nb = EMPTY_BINDINGS;",
        "begin_line": 1414,
        "end_line": 1416,
        "comment": "\t\t/* 21-Feb-2016, nateB/tatu: as per [databind#1129] (applied for 2.7.2),\n         *   we do need to let all kinds of types to be refined, esp. for Scala module.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "JavaType t",
        "snippet": "JavaType t = mod.modifyType(resultType, type, b, this);\nif (t == null) {\nthrow new IllegalStateException(String.format(\n\"TypeModifier %s (of type %s) return null for type %s\",\nmod, mod.getClass().getName(), resultType));",
        "begin_line": 1419,
        "end_line": 1423,
        "comment": "\t\t/* 21-Feb-2016, nateB/tatu: as per [databind#1129] (applied for 2.7.2),\n         *   we do need to let all kinds of types to be refined, esp. for Scala module.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "signature": "int PROBE_START_LINE_84",
        "snippet": "int PROBE_START_LINE_84 = 85;\ncom.fasterxml.jackson.databind.deser.Deserializers[] p_all_additional_deserializers_1162_line_84 = allAdditionalDeserializers;",
        "begin_line": 88,
        "end_line": 89,
        "comment": "    \n     * Copy-constructor that will create an instance that contains defined\n     * set of additional deserializer providers.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "signature": "boolean deserializer_factory_config1_expr9_line_84",
        "snippet": "boolean deserializer_factory_config1_expr9_line_84 = p_all_additional_deserializers_1162_line_84 == null;\nboolean deserializer_factory_config1_expr8_line_84 = (deserializer_factory_config1_expr9_line_84);",
        "begin_line": 90,
        "end_line": 91,
        "comment": "    \n     * Copy-constructor that will create an instance that contains defined\n     * set of additional deserializer providers.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LinkedNode",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/LinkedNode.java",
        "signature": "int PROBE_START_LINE_16",
        "snippet": "int PROBE_START_LINE_16 = 16;\nT p_value_4795_line_16 = value;",
        "begin_line": 16,
        "end_line": 17,
        "comment": "\n * Node of a forward-only linked list.\n * \n * @author tatu\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LinkedNode",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/LinkedNode.java",
        "signature": "int PROBE_END_LINE_16",
        "snippet": "int PROBE_END_LINE_16 = 16;\nthis.value = p_value_4795_line_16;",
        "begin_line": 18,
        "end_line": 19,
        "comment": "\n * Node of a forward-only linked list.\n * \n * @author tatu\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
        "signature": "int PROBE_START_LINE_21",
        "snippet": "int PROBE_START_LINE_21 = 21;\n\nstatic final char[] uuidserializer1_expr1_line_21 = \"0123456789abcdef\".toCharArray();",
        "begin_line": 21,
        "end_line": 23,
        "comment": "\n * Specialized {@link JsonSerializer} to output {@link java.util.UUID}s.\n * Beyond optimized access and writing of textual representation (which\n * is the default handling in most cases), it will alternatively\n * allow serialization using raw binary output (as 16-byte block)\n * if underlying data format has efficient means to access that.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "signature": "int PROBE_END_LINE_22",
        "snippet": "int PROBE_END_LINE_22 = 28;\n\n/**\n* Special placeholder value that indicates that name to use should be\n* based on the standard heuristics. This can be different from returning\n* null, as null means \"no information available, whereas this value\n* indicates explicit defaulting.\n*/\npublic final static PropertyName USE_DEFAULT = new PropertyName(f___use_default_859_line_28, null);",
        "begin_line": 26,
        "end_line": 34,
        "comment": "\n * Simple value class used for containing names of properties as defined\n * by annotations (and possibly other configuration sources).\n * \n * @since 2.1\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "signature": "int PROBE_START_LINE_66",
        "snippet": "int PROBE_START_LINE_66 = 66;\nString p_namespace_864_line_66 = namespace;",
        "begin_line": 84,
        "end_line": 85,
        "comment": "    \n     * Lazily-constructed efficient representation of the simple name.\n     *<p>\n     * NOTE: not defined as volatile to avoid performance problem with\n     * concurrent access in multi-core environments; due to statelessness\n     * of {@link SerializedString} at most leads to multiple instantiations.\n     * \n     * @since 2.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "signature": "int PROBE_START_LINE_85",
        "snippet": "int PROBE_START_LINE_85 = 87;\nString p_simple_name_867_line_85 = simpleName;",
        "begin_line": 106,
        "end_line": 107,
        "comment": "    \n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "signature": "boolean property_name1_expr10_line_85",
        "snippet": "boolean property_name1_expr10_line_85 = p_simple_name_867_line_85 == null;\nboolean property_name1_expr11_line_85 = false;",
        "begin_line": 108,
        "end_line": 109,
        "comment": "    \n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "signature": "String f__simple_name_865_line_107",
        "snippet": "String f__simple_name_865_line_107 = _simpleName;\nString property_name1_expr17_line_107 = f_instance_868_line_107.intern(f__simple_name_865_line_107);",
        "begin_line": 150,
        "end_line": 151,
        "comment": "    \n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
        "signature": "int PROBE_START_LINE_38",
        "snippet": "int PROBE_START_LINE_38 = 40;\nMap<Class<?>, com.fasterxml.jackson.databind.cfg.MutableConfigOverride> f__overrides_1129_line_38 = (Map<Class<?>, com.fasterxml.jackson.databind.cfg.MutableConfigOverride>) (_overrides);",
        "begin_line": 39,
        "end_line": 40,
        "comment": "\n * Container for individual {@link ConfigOverride} values.\n * \n * @since 2.8\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBase.java",
        "signature": "int PROBE_END_LINE_85",
        "snippet": "int PROBE_END_LINE_85 = 85;\nreturn f__bindings_4324_line_85;",
        "begin_line": 114,
        "end_line": 115,
        "comment": "    \n     * Copy-constructor used when refining/upgrading type instances.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/CollectionType.java",
        "signature": "int PROBE_START_LINE_40",
        "snippet": "int PROBE_START_LINE_40 = 41;\nClass<?> p_raw_type_4315_line_40 = rawType;",
        "begin_line": 40,
        "end_line": 41,
        "comment": "    \n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/CollectionType.java",
        "signature": "int PROBE_START_LINE_76",
        "snippet": "int PROBE_START_LINE_76 = 77;\nClass<?> f__class_414_line_76 = _class;",
        "begin_line": 88,
        "end_line": 89,
        "comment": "                 !!! TODO: Wrong, does have supertypes, but:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_119",
        "snippet": "int PROBE_START_LINE_119 = 119;\nMapperConfig<?> p_config_3193_line_119 = config;",
        "begin_line": 133,
        "end_line": 134,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_120",
        "snippet": "int PROBE_END_LINE_120 = 120;\n_stdBeanNaming = pojoproperties_collector1_expr1_line_120;",
        "begin_line": 142,
        "end_line": 143,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_121",
        "snippet": "int PROBE_END_LINE_121 = 121;\n_forSerialization = p_for_serialization_3194_line_121;",
        "begin_line": 146,
        "end_line": 147,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_122",
        "snippet": "int PROBE_END_LINE_122 = 122;\n_type = p_type_3195_line_122;",
        "begin_line": 150,
        "end_line": 151,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr5_line_124",
        "snippet": "boolean pojoproperties_collector1_expr5_line_124 = p_mutator_prefix_3197_line_124 == null;\nboolean pojoproperties_collector1_expr3_line_124 = (pojoproperties_collector1_expr5_line_124);",
        "begin_line": 158,
        "end_line": 159,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_124",
        "snippet": "int PROBE_END_LINE_124 = 124;\n_mutatorPrefix = pojoproperties_collector1_expr2_line_124;",
        "begin_line": 163,
        "end_line": 164,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr7_line_125",
        "snippet": "boolean pojoproperties_collector1_expr7_line_125 = p_config_3193_line_125.isAnnotationProcessingEnabled();\ncom.fasterxml.jackson.databind.AnnotationIntrospector pojoproperties_collector1_expr6_line_125 = pojoproperties_collector1_expr7_line_125\n? _config.getAnnotationIntrospector()\n: null;",
        "begin_line": 167,
        "end_line": 170,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_146",
        "snippet": "int PROBE_START_LINE_146 = 146;\ncom.fasterxml.jackson.databind.JavaType f__type_3202_line_146 = _type;",
        "begin_line": 204,
        "end_line": 205,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_146",
        "snippet": "int PROBE_END_LINE_146 = 146;\nreturn f__type_3202_line_146;",
        "begin_line": 206,
        "end_line": 207,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_150",
        "snippet": "int PROBE_END_LINE_150 = 150;\nreturn f__class_def_3203_line_150;",
        "begin_line": 213,
        "end_line": 214,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_159",
        "snippet": "int PROBE_START_LINE_159 = 159;\nMap<String, POJOPropertyBuilder> pojoproperties_collector1_expr12_line_159 = getPropertyMap();",
        "begin_line": 222,
        "end_line": 223,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_164",
        "snippet": "int PROBE_START_LINE_164 = 166;\nboolean f__collected_3208_line_164 = _collected;",
        "begin_line": 236,
        "end_line": 237,
        "comment": "\t\t make sure we return a copy, so caller can remove entries if need be:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_167",
        "snippet": "int PROBE_END_LINE_167 = 167;\nreturn f__injectables_3209_line_167;",
        "begin_line": 245,
        "end_line": 246,
        "comment": "\t\t make sure we return a copy, so caller can remove entries if need be:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_219",
        "snippet": "int PROBE_START_LINE_219 = 221;\nboolean f__collected_3208_line_219 = _collected;",
        "begin_line": 306,
        "end_line": 307,
        "comment": "             otherwise we won't greatly care"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr18_line_219",
        "snippet": "boolean pojoproperties_collector1_expr18_line_219 = !f__collected_3208_line_219;\nint PROBE_END_LINE_219 = 221;",
        "begin_line": 308,
        "end_line": 309,
        "comment": "             otherwise we won't greatly care"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_222",
        "snippet": "int PROBE_START_LINE_222 = 228;\nLinkedList<com.fasterxml.jackson.databind.introspect.AnnotatedMethod> f__any_setters_3211_line_222 = _anySetters;",
        "begin_line": 313,
        "end_line": 314,
        "comment": "             otherwise we won't greatly care"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr19_line_222",
        "snippet": "boolean pojoproperties_collector1_expr19_line_222 = f__any_setters_3211_line_222 != null;\nint PROBE_END_LINE_222 = 228;",
        "begin_line": 315,
        "end_line": 316,
        "comment": "             otherwise we won't greatly care"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_237",
        "snippet": "int PROBE_END_LINE_237 = 237;\nreturn f__ignored_property_names_3212_line_237;",
        "begin_line": 334,
        "end_line": 335,
        "comment": "    \n     * Accessor for set of properties that are explicitly marked to be ignored\n     * via per-property markers (but NOT class annotations).\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr20_line_246",
        "snippet": "boolean pojoproperties_collector1_expr20_line_246 = f__annotation_introspector_3205_line_246 == null;\nint PROBE_END_LINE_246 = 248;",
        "begin_line": 346,
        "end_line": 347,
        "comment": "    \n     * Accessor to find out whether type specified requires inclusion\n     * of Object Identifier.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_253",
        "snippet": "int PROBE_END_LINE_253 = 253;\nreturn v_info_3213_line_253;",
        "begin_line": 367,
        "end_line": 368,
        "comment": "    \n     * Accessor to find out whether type specified requires inclusion\n     * of Object Identifier.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_266",
        "snippet": "int PROBE_START_LINE_266 = 268;\nboolean f__collected_3208_line_266 = _collected;",
        "begin_line": 381,
        "end_line": 382,
        "comment": "     for unit tests:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_269",
        "snippet": "int PROBE_START_LINE_269 = 269;\nLinkedHashMap<String, com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder> f__properties_3214_line_269 = _properties;",
        "begin_line": 388,
        "end_line": 389,
        "comment": "     for unit tests:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_269",
        "snippet": "int PROBE_END_LINE_269 = 269;\nreturn f__properties_3214_line_269;",
        "begin_line": 390,
        "end_line": 391,
        "comment": "     for unit tests:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_302",
        "snippet": "int PROBE_END_LINE_302 = 302;\n// First: gather basic data\n_addFields(v_props_3215_line_302);",
        "begin_line": 425,
        "end_line": 427,
        "comment": "    \n     * Internal method that will collect actual property information.\n     *\n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_306",
        "snippet": "int PROBE_START_LINE_306 = 308;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass f__class_def_3203_line_306 = _classDef;",
        "begin_line": 432,
        "end_line": 433,
        "comment": "\t\t First: gather basic data"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr29_line_306",
        "snippet": "boolean pojoproperties_collector1_expr29_line_306 = f__class_def_3203_line_306.isNonStaticInnerClass();\nboolean pojoproperties_collector1_expr28_line_306 = !pojoproperties_collector1_expr29_line_306;",
        "begin_line": 434,
        "end_line": 435,
        "comment": "\t\t First: gather basic data"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_307",
        "snippet": "int PROBE_END_LINE_307 = 307;\n_addCreators(v_props_3215_line_307);",
        "begin_line": 442,
        "end_line": 443,
        "comment": "            inner classes, see [databind#1502]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_309",
        "snippet": "int PROBE_START_LINE_309 = 309;\nLinkedHashMap<String, com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder> v_props_3215_line_309 = props;",
        "begin_line": 445,
        "end_line": 446,
        "comment": "            inner classes, see [databind#1502]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_313",
        "snippet": "int PROBE_END_LINE_313 = 313;\n// Remove ignored properties, first; this MUST precede annotation merging\n// since logic relies on knowing exactly which accessor has which annotation\n_removeUnwantedProperties(v_props_3215_line_313);",
        "begin_line": 452,
        "end_line": 455,
        "comment": "            inner classes, see [databind#1502]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_316",
        "snippet": "int PROBE_START_LINE_316 = 318;\nLinkedHashMap<String, com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder> v_props_3215_line_316 = props;",
        "begin_line": 457,
        "end_line": 458,
        "comment": "         since logic relies on knowing exactly which accessor has which annotation"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_316",
        "snippet": "int PROBE_END_LINE_316 = 318;\n// then merge annotations, to simplify further processing\nfor (POJOPropertyBuilder property : pojoproperties_collector1_expr33_line_316) {\nint PROBE_START_LINE_317 = 317;",
        "begin_line": 461,
        "end_line": 464,
        "comment": "         since logic relies on knowing exactly which accessor has which annotation"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_342",
        "snippet": "int PROBE_START_LINE_342 = 344;\nMapperConfig<?> f__config_3198_line_342 = _config;",
        "begin_line": 511,
        "end_line": 512,
        "comment": "\t\t/* Sort by visibility (explicit over implicit); drop all but first\n         * of member type (getter, setter etc) if there is visibility\n         * difference\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_348",
        "snippet": "int PROBE_END_LINE_348 = 348;\n_properties = v_props_3215_line_348;",
        "begin_line": 531,
        "end_line": 532,
        "comment": "\t\t well, almost last: there's still ordering..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_394",
        "snippet": "int PROBE_START_LINE_394 = 397;\nboolean v_name_explicit_3230_line_394 = nameExplicit;",
        "begin_line": 639,
        "end_line": 640,
        "comment": "\t\t/* 28-Mar-2013, tatu: For deserialization we may also want to remove\n         *   final fields, as often they won't make very good mutators...\n         *   (although, maybe surprisingly, JVM _can_ force setting of such fields!)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr61_line_394",
        "snippet": "boolean pojoproperties_collector1_expr61_line_394 = true;\nif (v_name_explicit_3230_line_394) {\ncom.fasterxml.jackson.databind.PropertyName v_pn_3228_line_394 = pn;",
        "begin_line": 641,
        "end_line": 643,
        "comment": "\t\t/* 28-Mar-2013, tatu: For deserialization we may also want to remove\n         *   final fields, as often they won't make very good mutators...\n         *   (although, maybe surprisingly, JVM _can_ force setting of such fields!)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_394",
        "snippet": "int PROBE_END_LINE_394 = 397;\nif (pojoproperties_collector1_expr60_line_394) { // empty String meaning \"use default name\", here just means \"same as field name\"\npn = _propNameFromSimple(implName);",
        "begin_line": 648,
        "end_line": 650,
        "comment": "\t\t/* 28-Mar-2013, tatu: For deserialization we may also want to remove\n         *   final fields, as often they won't make very good mutators...\n         *   (although, maybe surprisingly, JVM _can_ force setting of such fields!)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_399",
        "snippet": "int PROBE_END_LINE_399 = 399;\n// having explicit name means that field is visible; otherwise need to check the rules\nboolean visible = pojoproperties_collector1_expr62_line_399;",
        "begin_line": 657,
        "end_line": 659,
        "comment": "\t\t/* 28-Mar-2013, tatu: For deserialization we may also want to remove\n         *   final fields, as often they won't make very good mutators...\n         *   (although, maybe surprisingly, JVM _can_ force setting of such fields!)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr64_line_400",
        "snippet": "boolean pojoproperties_collector1_expr64_line_400 = !v_visible_3231_line_400;\nint PROBE_END_LINE_400 = 402;",
        "begin_line": 662,
        "end_line": 663,
        "comment": "\t\t\t having explicit name means that field is visible; otherwise need to check the rules"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_422",
        "snippet": "int PROBE_START_LINE_422 = 424;\nboolean v_prune_final_fields_3222_line_422 = pruneFinalFields;",
        "begin_line": 703,
        "end_line": 704,
        "comment": "                    \"default\" `transient`"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int pojoproperties_collector1_expr76_line_422",
        "snippet": "int pojoproperties_collector1_expr76_line_422 = v_f_3226_line_422.getModifiers();\npojoproperties_collector1_expr75_line_422 = Modifier\n.isFinal(pojoproperties_collector1_expr76_line_422);",
        "begin_line": 717,
        "end_line": 719,
        "comment": "                    \"default\" `transient`"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_422",
        "snippet": "int PROBE_END_LINE_422 = 424;\n/* [databind#190]: this is the place to prune final fields, if they are not\n*  to be used as mutators. Must verify they are not explicitly included.\n*  Also: if 'ignored' is set, need to included until a later point, to\n*  avoid losing ignoral information.\n*/\nif (pojoproperties_collector1_expr71_line_422) {\ncontinue;",
        "begin_line": 726,
        "end_line": 733,
        "comment": "                    \"default\" `transient`"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_427",
        "snippet": "int PROBE_START_LINE_427 = 432;\ncom.fasterxml.jackson.databind.introspect.AnnotatedField v_f_3226_line_427 = f;",
        "begin_line": 736,
        "end_line": 737,
        "comment": "\t\t\t/* [databind#190]: this is the place to prune final fields, if they are not\n             *  to be used as mutators. Must verify they are not explicitly included.\n             *  Also: if 'ignored' is set, need to included until a later point, to\n             *  avoid losing ignoral information.\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_443",
        "snippet": "int PROBE_START_LINE_443 = 445;\ncom.fasterxml.jackson.databind.AnnotationIntrospector f__annotation_introspector_3205_line_443 = _annotationIntrospector;",
        "begin_line": 767,
        "end_line": 768,
        "comment": "    \n     * Method for collecting basic information on constructor(s) found\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr81_line_443",
        "snippet": "boolean pojoproperties_collector1_expr81_line_443 = f__annotation_introspector_3205_line_443 == null;\nint PROBE_END_LINE_443 = 445;",
        "begin_line": 769,
        "end_line": 770,
        "comment": "    \n     * Method for collecting basic information on constructor(s) found\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "String impl",
        "snippet": "String impl = _annotationIntrospector.findImplicitPropertyName(param);\nif (impl == null) {\nimpl = \"\";",
        "begin_line": 814,
        "end_line": 816,
        "comment": "         JDK 8, paranamer, Scala can give implicit name"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_640",
        "snippet": "int PROBE_START_LINE_640 = 640;\nAnnotationIntrospector f__annotation_introspector_3205_line_640 = _annotationIntrospector;",
        "begin_line": 991,
        "end_line": 992,
        "comment": "                 !!! TODO: use PropertyName for implicit names too"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_646",
        "snippet": "int PROBE_START_LINE_646 = 648;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass f__class_def_3203_line_646 = _classDef;",
        "begin_line": 1003,
        "end_line": 1004,
        "comment": "                 !!! TODO: use PropertyName for implicit names too"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_650",
        "snippet": "int PROBE_END_LINE_650 = 658;\nfor (AnnotatedMethod m : pojoproperties_collector1_expr93_line_650) {\n/* for now, only allow injection of a single arg\n* (to be changed in future)\n*/\nif (m.getParameterCount() != 1) {\ncontinue;",
        "begin_line": 1023,
        "end_line": 1029,
        "comment": "\t\t first fields, then methods"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_663",
        "snippet": "int PROBE_START_LINE_663 = 665;\nObject p_id_3254_line_663 = id;",
        "begin_line": 1037,
        "end_line": 1038,
        "comment": "            /* for now, only allow injection of a single arg\n             * (to be changed in future)\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr94_line_663",
        "snippet": "boolean pojoproperties_collector1_expr94_line_663 = p_id_3254_line_663 == null;\nint PROBE_END_LINE_663 = 665;",
        "begin_line": 1039,
        "end_line": 1040,
        "comment": "            /* for now, only allow injection of a single arg\n             * (to be changed in future)\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_60",
        "snippet": "int PROBE_START_LINE_60 = 60;\nHashMap<String, Class<? extends java.util.Map>> f__map_fallbacks_1321_line_60 = (HashMap<String, Class<? extends java.util.Map>>) (_mapFallbacks);",
        "begin_line": 86,
        "end_line": 87,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "String basic_deserializer_factory1_expr14_line_60",
        "snippet": "String basic_deserializer_factory1_expr14_line_60 = ConcurrentMap.class.getName();\nint PROBE_END_LINE_60 = 60;",
        "begin_line": 88,
        "end_line": 89,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_190",
        "snippet": "int PROBE_START_LINE_190 = 190;\ncom.fasterxml.jackson.databind.JavaType p_type_1332_line_190 = type;",
        "begin_line": 271,
        "end_line": 272,
        "comment": "         first, general mappings"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_210",
        "snippet": "int PROBE_END_LINE_210 = 210;\nClass<?> currClass = basic_deserializer_factory1_expr58_line_210;",
        "begin_line": 297,
        "end_line": 298,
        "comment": "    \n     * Method that will find abstract type mapping for specified type, doing a single\n     * lookup through registered abstract type resolvers; will not do recursive lookups.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_211",
        "snippet": "int PROBE_START_LINE_211 = 218;\ncom.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig f__factory_config_1324_line_211 = _factoryConfig;",
        "begin_line": 299,
        "end_line": 300,
        "comment": "    \n     * Method that will find abstract type mapping for specified type, doing a single\n     * lookup through registered abstract type resolvers; will not do recursive lookups.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_211",
        "snippet": "int PROBE_END_LINE_211 = 218;\nif (basic_deserializer_factory1_expr59_line_211) {\nfor (AbstractTypeResolver resolver : _factoryConfig.abstractTypeResolvers()) {\nJavaType concrete = resolver.findTypeMapping(config, type);",
        "begin_line": 303,
        "end_line": 306,
        "comment": "    \n     * Method that will find abstract type mapping for specified type, doing a single\n     * lookup through registered abstract type resolvers; will not do recursive lookups.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_238",
        "snippet": "int PROBE_START_LINE_238 = 238;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_1337_line_238 = ctxt;",
        "begin_line": 331,
        "end_line": 332,
        "comment": "    \n     * Value instantiator is created both based on creator annotations,\n     * and on optional externally provided instantiators (registered through\n     * module interface).\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_243",
        "snippet": "int PROBE_END_LINE_243 = 243;\nObject instDef = basic_deserializer_factory1_expr62_line_243;",
        "begin_line": 351,
        "end_line": 352,
        "comment": "\t\t [JACKSON-633] Check @JsonValueInstantiator before anything else"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_244",
        "snippet": "int PROBE_START_LINE_244 = 246;\nObject v_inst_def_1342_line_244 = instDef;",
        "begin_line": 353,
        "end_line": 354,
        "comment": "\t\t [JACKSON-633] Check @JsonValueInstantiator before anything else"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr70_line_271",
        "snippet": "boolean basic_deserializer_factory1_expr70_line_271 = basic_deserializer_factory1_expr71_line_271 != null;\nint PROBE_END_LINE_271 = 275;",
        "begin_line": 411,
        "end_line": 412,
        "comment": "                 let's do sanity check; easier to spot buggy handlers"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_277",
        "snippet": "int PROBE_START_LINE_277 = 277;\ncom.fasterxml.jackson.databind.deser.ValueInstantiator v_instantiator_1340_line_277 = instantiator;",
        "begin_line": 420,
        "end_line": 421,
        "comment": "\t\t Sanity check: does the chosen instantatior have incomplete creators?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_277",
        "snippet": "int PROBE_END_LINE_277 = 277;\nreturn v_instantiator_1340_line_277;",
        "begin_line": 422,
        "end_line": 423,
        "comment": "\t\t Sanity check: does the chosen instantatior have incomplete creators?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_284",
        "snippet": "int PROBE_START_LINE_284 = 286;\ncom.fasterxml.jackson.databind.BeanDescription p_bean_desc_1344_line_284 = beanDesc;",
        "begin_line": 430,
        "end_line": 431,
        "comment": "\t\t Sanity check: does the chosen instantatior have incomplete creators?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_323",
        "snippet": "int PROBE_END_LINE_323 = 323;\nreturn basic_deserializer_factory1_expr86_line_323;",
        "begin_line": 534,
        "end_line": 535,
        "comment": "\t\t constructors only usable on concrete types:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_402",
        "snippet": "int PROBE_END_LINE_402 = 402;\n// First things first: the \"default constructor\" (zero-arg\n// constructor; whether implicit or explicit) is NOT included\n// in list of constructors, so needs to be handled separately.\nAnnotatedConstructor defaultCtor = basic_deserializer_factory1_expr91_line_402;",
        "begin_line": 639,
        "end_line": 643,
        "comment": "\t\t constructors only usable on concrete types:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_403",
        "snippet": "int PROBE_START_LINE_403 = 407;\ncom.fasterxml.jackson.databind.introspect.AnnotatedConstructor v_default_ctor_1366_line_403 = defaultCtor;",
        "begin_line": 644,
        "end_line": 645,
        "comment": "         in list of constructors, so needs to be handled separately."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr92_line_403",
        "snippet": "boolean basic_deserializer_factory1_expr92_line_403 = v_default_ctor_1366_line_403 != null;\nint PROBE_END_LINE_403 = 407;",
        "begin_line": 646,
        "end_line": 647,
        "comment": "         in list of constructors, so needs to be handled separately."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr95_line_404",
        "snippet": "boolean basic_deserializer_factory1_expr95_line_404 = p_creators_1364_line_404.hasDefaultCreator();\nboolean basic_deserializer_factory1_expr94_line_404 = !basic_deserializer_factory1_expr95_line_404;",
        "begin_line": 651,
        "end_line": 652,
        "comment": "         in list of constructors, so needs to be handled separately."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "final boolean isNonStaticInnerClass",
        "snippet": "final boolean isNonStaticInnerClass = basic_deserializer_factory1_expr98_line_412;\nint PROBE_START_LINE_413 = 416;",
        "begin_line": 679,
        "end_line": 680,
        "comment": "             `InnerClassProperty` construction for that)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_612",
        "snippet": "int PROBE_START_LINE_612 = 621;\ncom.fasterxml.jackson.databind.introspect.BeanPropertyDefinition p_prop_def_1383_line_612 = propDef;",
        "begin_line": 981,
        "end_line": 982,
        "comment": "\t\t If explicit name, or inject id, property-based"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr126_line_612",
        "snippet": "boolean basic_deserializer_factory1_expr126_line_612 = p_prop_def_1383_line_612 != null;\nint PROBE_END_LINE_612 = 621;",
        "begin_line": 983,
        "end_line": 984,
        "comment": "\t\t If explicit name, or inject id, property-based"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "String implName",
        "snippet": "String implName = propDef.getName();\nif (implName != null && !implName.isEmpty()) {\nif (propDef.couldSerialize()) {\nreturn true;",
        "begin_line": 988,
        "end_line": 991,
        "comment": "             or field, we'll consider it property-based as well"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_640",
        "snippet": "int PROBE_START_LINE_640 = 645;\nClass<?> v_type_1395_line_640 = type;",
        "begin_line": 1027,
        "end_line": 1028,
        "comment": "\t\t otherwise either 'simple' number, String, or general delegate:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr134_line_640",
        "snippet": "boolean basic_deserializer_factory1_expr134_line_640 = v_type_1395_line_640 == int.class;\nboolean basic_deserializer_factory1_expr135_line_640 = false;",
        "begin_line": 1029,
        "end_line": 1030,
        "comment": "\t\t otherwise either 'simple' number, String, or general delegate:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean p_is_creator_1393_line_641",
        "snippet": "boolean p_is_creator_1393_line_641 = isCreator;\nboolean p_is_visible_1394_line_641 = false;",
        "begin_line": 1039,
        "end_line": 1040,
        "comment": "\t\t otherwise either 'simple' number, String, or general delegate:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_641",
        "snippet": "int PROBE_END_LINE_641 = 643;\nif (basic_deserializer_factory1_expr136_line_641) {\nint PROBE_START_LINE_642 = 642;",
        "begin_line": 1046,
        "end_line": 1048,
        "comment": "\t\t otherwise either 'simple' number, String, or general delegate:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_646",
        "snippet": "int PROBE_START_LINE_646 = 651;\nClass<?> v_type_1395_line_646 = type;",
        "begin_line": 1057,
        "end_line": 1058,
        "comment": "\t\t otherwise either 'simple' number, String, or general delegate:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr140_line_646",
        "snippet": "boolean basic_deserializer_factory1_expr140_line_646 = v_type_1395_line_646 == long.class;\nboolean basic_deserializer_factory1_expr141_line_646 = false;",
        "begin_line": 1059,
        "end_line": 1060,
        "comment": "\t\t otherwise either 'simple' number, String, or general delegate:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "String str",
        "snippet": "String str = intr.findImplicitPropertyName(param);\nif (str != null && !str.isEmpty()) {\nreturn PropertyName.construct(str);",
        "begin_line": 1353,
        "end_line": 1355,
        "comment": "              (for JDK8, or via paranamer)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr162_line_1015",
        "snippet": "boolean basic_deserializer_factory1_expr162_line_1015 = v_deser_1435_line_1015 == null;\nint PROBE_END_LINE_1015 = 1046;",
        "begin_line": 1503,
        "end_line": 1504,
        "comment": "\t\t\t\t One special type: EnumSet:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_1017",
        "snippet": "int PROBE_END_LINE_1017 = 1017;\nCollectionType implType = basic_deserializer_factory1_expr166_line_1017;",
        "begin_line": 1531,
        "end_line": 1532,
        "comment": "\t\t/* One twist: if we are being asked to instantiate an interface or\n         * abstract Collection, we need to either find something that implements\n         * the thing, or give up.\n         *\n         * Note that we do NOT try to guess based on secondary interfaces\n         * here; that would probably not work correctly since casts would\n         * fail later on (as the primary type is not the interface we'd\n         * be implementing)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_1018",
        "snippet": "int PROBE_START_LINE_1018 = 1028;\ncom.fasterxml.jackson.databind.type.CollectionType v_impl_type_1437_line_1018 = implType;",
        "begin_line": 1533,
        "end_line": 1534,
        "comment": "\t\t/* One twist: if we are being asked to instantiate an interface or\n         * abstract Collection, we need to either find something that implements\n         * the thing, or give up.\n         *\n         * Note that we do NOT try to guess based on secondary interfaces\n         * here; that would probably not work correctly since casts would\n         * fail later on (as the primary type is not the interface we'd\n         * be implementing)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr167_line_1018",
        "snippet": "boolean basic_deserializer_factory1_expr167_line_1018 = v_impl_type_1437_line_1018 == null;\nint PROBE_END_LINE_1018 = 1028;",
        "begin_line": 1535,
        "end_line": 1536,
        "comment": "\t\t/* One twist: if we are being asked to instantiate an interface or\n         * abstract Collection, we need to either find something that implements\n         * the thing, or give up.\n         *\n         * Note that we do NOT try to guess based on secondary interfaces\n         * here; that would probably not work correctly since casts would\n         * fail later on (as the primary type is not the interface we'd\n         * be implementing)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_1027",
        "snippet": "int PROBE_END_LINE_1027 = 1027;\n// But if so, also need to re-check creators...\nbeanDesc = basic_deserializer_factory1_expr168_line_1027;",
        "begin_line": 1553,
        "end_line": 1555,
        "comment": "                     [databind#292]: Actually, may be fine, but only if polymorphich deser enabled"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_1031",
        "snippet": "int PROBE_END_LINE_1031 = 1031;\nValueInstantiator inst = basic_deserializer_factory1_expr170_line_1031;",
        "begin_line": 1568,
        "end_line": 1569,
        "comment": "\t\t\t\t\t But if so, also need to re-check creators..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr172_line_1032",
        "snippet": "boolean basic_deserializer_factory1_expr172_line_1032 = v_inst_1438_line_1032.canCreateUsingDefault();\nboolean basic_deserializer_factory1_expr171_line_1032 = !basic_deserializer_factory1_expr172_line_1032;",
        "begin_line": 1572,
        "end_line": 1573,
        "comment": "\t\t\t\t\t But if so, also need to re-check creators..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_1039",
        "snippet": "int PROBE_START_LINE_1039 = 1044;\ncom.fasterxml.jackson.databind.JavaType v_content_type_1431_line_1039 = contentType;",
        "begin_line": 1581,
        "end_line": 1582,
        "comment": "                     [databind#161]: No default constructor for ArrayBlockingQueue..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_1053",
        "snippet": "int PROBE_END_LINE_1053 = 1053;\nreturn v_deser_1435_line_1053;",
        "begin_line": 1614,
        "end_line": 1615,
        "comment": "\t\t allow post-processing it too"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "JavaType contentType",
        "snippet": "JavaType contentType = type.getContentType();\n\n// First: is there annotation-specified deserializer for values?\n@SuppressWarnings(\"unchecked\")\nJsonDeserializer<Object> contentDeser = (JsonDeserializer<Object>) contentType.getValueHandler();",
        "begin_line": 1693,
        "end_line": 1697,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "KeyDeserializer keyDes",
        "snippet": "KeyDeserializer keyDes = (KeyDeserializer) keyType.getValueHandler();\n// Then optional type info; either attached to type, or resolved separately:\nTypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
        "begin_line": 1700,
        "end_line": 1702,
        "comment": "         Ok: need a key deserializer (null indicates 'default' here)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "JavaType keyType",
        "snippet": "JavaType keyType = type.getKeyType();\nJavaType contentType = type.getContentType();",
        "begin_line": 1781,
        "end_line": 1782,
        "comment": "     Copied almost verbatim from \"createMapDeserializer\" -- should try to share more code"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "final DeserializationConfig config",
        "snippet": "final DeserializationConfig config = ctxt.getConfig();\n\n// First: is there annotation-specified deserializer for values?\n@SuppressWarnings(\"unchecked\")\nJsonDeserializer<Object> contentDeser = (JsonDeserializer<Object>) contentType.getValueHandler();",
        "begin_line": 1783,
        "end_line": 1787,
        "comment": "     Copied almost verbatim from \"createMapDeserializer\" -- should try to share more code"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
        "signature": "int PROBE_START_LINE_42",
        "snippet": "int PROBE_START_LINE_42 = 42;\nBoolean p_use_timestamp_4008_line_42 = useTimestamp;",
        "begin_line": 42,
        "end_line": 43,
        "comment": "    \n     * Specific format to use, if not default format: non null value\n     * also indicates that serialization is to be done as JSON String,\n     * not numeric timestamp, unless {@link #_useTimestamp} is true.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
        "signature": "int PROBE_END_LINE_42",
        "snippet": "int PROBE_END_LINE_42 = 42;\n_useTimestamp = p_use_timestamp_4008_line_42;",
        "begin_line": 44,
        "end_line": 45,
        "comment": "    \n     * Specific format to use, if not default format: non null value\n     * also indicates that serialization is to be done as JSON String,\n     * not numeric timestamp, unless {@link #_useTimestamp} is true.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
        "signature": "int PROBE_END_LINE_29",
        "snippet": "int PROBE_END_LINE_29 = 34;\n\n/**\n* Default singleton instance that construct \"standard\" node instances:\n* given that this class is stateless, a globally shared singleton\n* can be used.\n*/\npublic final static JsonNodeFactory instance = f_decimals_normalized_3686_line_34;",
        "begin_line": 33,
        "end_line": 40,
        "comment": "     with 2.2"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_71",
        "snippet": "int PROBE_START_LINE_71 = 71;\nHashMap<String, JsonSerializer<?>> v_concrete_3716_line_71 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 72,
        "end_line": 73,
        "comment": "    \n     * Actually it may not make much sense to eagerly instantiate all\n     * kinds of serializers: so this Map actually contains class references,\n     * not instances\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "String basic_serializer_factory1_expr4_line_71",
        "snippet": "String basic_serializer_factory1_expr4_line_71 = String.class.getName();\nint PROBE_END_LINE_71 = 71;",
        "begin_line": 74,
        "end_line": 75,
        "comment": "    \n     * Actually it may not make much sense to eagerly instantiate all\n     * kinds of serializers: so this Map actually contains class references,\n     * not instances\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_72",
        "snippet": "int PROBE_START_LINE_72 = 72;\nToStringSerializer f_instance_3718_line_72 = ToStringSerializer.instance;",
        "begin_line": 80,
        "end_line": 81,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_73",
        "snippet": "int PROBE_START_LINE_73 = 73;\nHashMap<String, JsonSerializer<?>> v_concrete_3716_line_73 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 84,
        "end_line": 85,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_73",
        "snippet": "int PROBE_END_LINE_73 = 73;\nv_concrete_3716_line_73.put(basic_serializer_factory1_expr8_line_73, v_sls_3717_line_73);",
        "begin_line": 88,
        "end_line": 89,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_74",
        "snippet": "int PROBE_START_LINE_74 = 74;\nHashMap<String, JsonSerializer<?>> v_concrete_3716_line_74 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 90,
        "end_line": 91,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "String basic_serializer_factory1_expr11_line_74",
        "snippet": "String basic_serializer_factory1_expr11_line_74 = StringBuilder.class.getName();\ncom.fasterxml.jackson.databind.ser.std.ToStringSerializer v_sls_3717_line_74 = sls;",
        "begin_line": 92,
        "end_line": 93,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_74",
        "snippet": "int PROBE_END_LINE_74 = 74;\nv_concrete_3716_line_74.put(basic_serializer_factory1_expr11_line_74, v_sls_3717_line_74);",
        "begin_line": 94,
        "end_line": 95,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_75",
        "snippet": "int PROBE_START_LINE_75 = 75;\nHashMap<String, JsonSerializer<?>> v_concrete_3716_line_75 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 96,
        "end_line": 97,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "String basic_serializer_factory1_expr14_line_75",
        "snippet": "String basic_serializer_factory1_expr14_line_75 = Character.class.getName();\ncom.fasterxml.jackson.databind.ser.std.ToStringSerializer v_sls_3717_line_75 = sls;",
        "begin_line": 98,
        "end_line": 99,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_75",
        "snippet": "int PROBE_END_LINE_75 = 75;\nv_concrete_3716_line_75.put(basic_serializer_factory1_expr14_line_75, v_sls_3717_line_75);",
        "begin_line": 100,
        "end_line": 101,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "Class<Character> f_type_3719_line_76",
        "snippet": "Class<Character> f_type_3719_line_76 = Character.TYPE;\nString basic_serializer_factory1_expr17_line_76 = f_type_3719_line_76.getName();",
        "begin_line": 104,
        "end_line": 105,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_76",
        "snippet": "int PROBE_END_LINE_76 = 76;\nv_concrete_3716_line_76.put(basic_serializer_factory1_expr17_line_76, v_sls_3717_line_76);",
        "begin_line": 107,
        "end_line": 108,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_79",
        "snippet": "int PROBE_START_LINE_79 = 79;\nHashMap<String, JsonSerializer<?>> v_concrete_3716_line_79 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 110,
        "end_line": 111,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_79",
        "snippet": "int PROBE_END_LINE_79 = 79;\n// Primitives/wrappers for primitives (primitives needed for Beans)\nNumberSerializers.addAll(v_concrete_3716_line_79);",
        "begin_line": 112,
        "end_line": 114,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_89",
        "snippet": "int PROBE_START_LINE_89 = 89;\nHashMap<String, JsonSerializer<?>> v_concrete_3716_line_89 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 139,
        "end_line": 140,
        "comment": "\t\t Other numbers, more complicated"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
        "signature": "int PROBE_START_LINE_298",
        "snippet": "int PROBE_START_LINE_298 = 298;\ncom.fasterxml.jackson.databind.deser.SettableAnyProperty f__any_setter_1817_line_298 = _anySetter;",
        "begin_line": 332,
        "end_line": 333,
        "comment": "    \n     * Method that allows accessing all properties that this\n     * builder currently contains.\n     *<p>\n     * Note that properties are returned in order that properties\n     * are ordered (explictly, or by rule), which is the serialization\n     * order.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
        "signature": "int PROBE_END_LINE_298",
        "snippet": "int PROBE_END_LINE_298 = 298;\nreturn f__any_setter_1817_line_298;",
        "begin_line": 334,
        "end_line": 335,
        "comment": "    \n     * Method that allows accessing all properties that this\n     * builder currently contains.\n     *<p>\n     * Note that properties are returned in order that properties\n     * are ordered (explictly, or by rule), which is the serialization\n     * order.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
        "signature": "int PROBE_START_LINE_306",
        "snippet": "int PROBE_START_LINE_306 = 306;\nList<com.fasterxml.jackson.databind.deser.impl.ValueInjector> f__injectables_1818_line_306 = _injectables;",
        "begin_line": 346,
        "end_line": 347,
        "comment": "    \n     * Method that allows accessing all properties that this\n     * builder currently contains.\n     *<p>\n     * Note that properties are returned in order that properties\n     * are ordered (explictly, or by rule), which is the serialization\n     * order.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
        "signature": "int PROBE_START_LINE_310",
        "snippet": "int PROBE_START_LINE_310 = 310;\ncom.fasterxml.jackson.databind.deser.impl.ObjectIdReader f__object_id_reader_1819_line_310 = _objectIdReader;",
        "begin_line": 353,
        "end_line": 354,
        "comment": "    \n     * Method that allows accessing all properties that this\n     * builder currently contains.\n     *<p>\n     * Note that properties are returned in order that properties\n     * are ordered (explictly, or by rule), which is the serialization\n     * order.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.TypeResolutionContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/TypeResolutionContext.java",
        "signature": "int PROBE_START_LINE_25",
        "snippet": "int PROBE_START_LINE_25 = 25;\ncom.fasterxml.jackson.databind.type.TypeFactory p_tf_3441_line_25 = tf;",
        "begin_line": 25,
        "end_line": 26,
        "comment": "\n * Interface that defines API used by members (like {@link AnnotatedMethod})\n * to dynamically resolve types they have.\n *\n * @since 2.7\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.TypeResolutionContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/TypeResolutionContext.java",
        "signature": "int PROBE_END_LINE_25",
        "snippet": "int PROBE_END_LINE_25 = 25;\n_typeFactory = p_tf_3441_line_25;",
        "begin_line": 27,
        "end_line": 28,
        "comment": "\n * Interface that defines API used by members (like {@link AnnotatedMethod})\n * to dynamically resolve types they have.\n *\n * @since 2.7\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "signature": "int PROBE_START_LINE_41",
        "snippet": "int PROBE_START_LINE_41 = 44;\n\nprotected static final com.fasterxml.jackson.annotation.JsonInclude.Value mapper_config1_expr1_line_44 = JsonInclude.Value\n.empty();",
        "begin_line": 47,
        "end_line": 50,
        "comment": "\n * Interface that defines functionality accessible through both\n * serialization and deserialization configuration objects;\n * accessors to mode-independent configuration settings\n * and such.\n * In addition, shared features are defined\n * in {@link MapperFeature}.\n *<p>\n * Small part of implementation is included here by aggregating\n * {@link BaseSettings} instance that contains configuration\n * that is shared between different types of instances.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "signature": "int PROBE_END_LINE_46",
        "snippet": "int PROBE_END_LINE_46 = 49;\n\n/**\n* @since 2.7\n*/\nprotected final static JsonFormat.Value EMPTY_FORMAT = mapper_config1_expr2_line_49;",
        "begin_line": 64,
        "end_line": 69,
        "comment": "\t\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "signature": "int PROBE_END_LINE_99",
        "snippet": "int PROBE_END_LINE_99 = 101;\nif (mapper_config1_expr5_line_99) {\nint PROBE_START_LINE_100 = 100;",
        "begin_line": 139,
        "end_line": 141,
        "comment": "    \n     * Method that calculates bit set (flags) of all features that\n     * are enabled by default.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "signature": "int PROBE_START_LINE_175",
        "snippet": "int PROBE_START_LINE_175 = 175;\ncom.fasterxml.jackson.databind.MapperFeature f_can_override_access_modifiers_1198_line_175 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;",
        "begin_line": 235,
        "end_line": 236,
        "comment": "    \n     * Accessor for determining whether it is ok to try to force override of access\n     * modifiers to be able to get or set values of non-public Methods, Fields;\n     * to invoke non-public Constructors, Methods; or to instantiate non-public\n     * Classes. By default this is enabled, but on some platforms it needs to be\n     * prevented since if this would violate security constraints and cause failures.\n     * \n     * @return True if access modifier overriding is allowed (and may be done for\n     *   any Field, Method, Constructor or Class); false to prevent any attempts\n     *   to override.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "signature": "int PROBE_START_LINE_183",
        "snippet": "int PROBE_START_LINE_183 = 183;\ncom.fasterxml.jackson.databind.MapperFeature f_sort_properties_alphabetically_515_line_183 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;",
        "begin_line": 247,
        "end_line": 248,
        "comment": "    \n     * Accessor for checking whether default settings for property handling\n     * indicate that properties should be alphabetically ordered or not.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "int PROBE_END_LINE_107",
        "snippet": "int PROBE_END_LINE_107 = 115;\n\n/**\n* Index of property (within all property of a bean); assigned\n* when all properties have been collected. Order of entries\n* is arbitrary, but once indexes are assigned they are not\n* changed.\n*<p>\n* TODO: should try to make immutable if at all possible\n*/\nprotected int _propertyIndex = settable_bean_property1_expr3_line_115;",
        "begin_line": 114,
        "end_line": 124,
        "comment": "    \n     * Helper object used for checking whether this property is to\n     * be included in the active view, if property is view-specific;\n     * null otherwise.\n     *<p>\n     * TODO: should try to make immutable.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "int PROBE_START_LINE_149",
        "snippet": "int PROBE_START_LINE_149 = 153;\ncom.fasterxml.jackson.databind.PropertyName p_prop_name_2096_line_149 = propName;",
        "begin_line": 153,
        "end_line": 154,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "boolean settable_bean_property1_expr9_line_149",
        "snippet": "boolean settable_bean_property1_expr9_line_149 = p_prop_name_2096_line_149 == null;\nint PROBE_END_LINE_149 = 153;",
        "begin_line": 155,
        "end_line": 156,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "int PROBE_START_LINE_152",
        "snippet": "int PROBE_START_LINE_152 = 152;\ncom.fasterxml.jackson.databind.PropertyName p_prop_name_2096_line_152 = propName;",
        "begin_line": 165,
        "end_line": 166,
        "comment": "           is not unbounded, unlike potential JSON names."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "boolean settable_bean_property1_expr15_line_222",
        "snippet": "boolean settable_bean_property1_expr15_line_222 = p_deser_2115_line_222 == null;\nint PROBE_END_LINE_222 = 226;",
        "begin_line": 294,
        "end_line": 295,
        "comment": "    \n     * Copy-with-deserializer-change constructor for sub-classes to use.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "int PROBE_START_LINE_225",
        "snippet": "int PROBE_START_LINE_225 = 225;\nJsonDeserializer<?> p_deser_2115_line_225 = deser;",
        "begin_line": 299,
        "end_line": 300,
        "comment": "    \n     * Copy-with-deserializer-change constructor for sub-classes to use.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "int PROBE_START_LINE_227",
        "snippet": "int PROBE_START_LINE_227 = 227;\ncom.fasterxml.jackson.databind.deser.SettableBeanProperty p_src_2114_line_227 = src;",
        "begin_line": 304,
        "end_line": 305,
        "comment": "    \n     * Copy-with-deserializer-change constructor for sub-classes to use.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "int PROBE_END_LINE_227",
        "snippet": "int PROBE_END_LINE_227 = 227;\n_viewMatcher = f__view_matcher_2106_line_227;",
        "begin_line": 307,
        "end_line": 308,
        "comment": "    \n     * Copy-with-deserializer-change constructor for sub-classes to use.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "int PROBE_START_LINE_305",
        "snippet": "int PROBE_START_LINE_305 = 307;\nint f__property_index_2085_line_305 = _propertyIndex;",
        "begin_line": 390,
        "end_line": 391,
        "comment": "    \n     * Method used to assign index for property.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "int PROBE_END_LINE_305",
        "snippet": "int PROBE_END_LINE_305 = 307;\nif (settable_bean_property1_expr18_line_305) {\nthrow new IllegalStateException(\"Property '\"+getName()+\"' already had index (\"+_propertyIndex+\"), trying to assign \"+index);",
        "begin_line": 394,
        "end_line": 396,
        "comment": "    \n     * Method used to assign index for property.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
        "signature": "int PROBE_START_LINE_28",
        "snippet": "int PROBE_START_LINE_28 = 30;\nHashMap<Class<?>, java.lang.annotation.Annotation> f__annotations_2890_line_28 = (HashMap<Class<?>, java.lang.annotation.Annotation>) (_annotations);",
        "begin_line": 29,
        "end_line": 30,
        "comment": "\n * Simple helper class used to keep track of collection of\n * Jackson Annotations associated with annotatable things\n * (methods, constructors, classes).\n * Note that only Jackson-owned annotations are tracked (for now?).\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "int PROBE_START_LINE_75",
        "snippet": "int PROBE_START_LINE_75 = 75;\ncom.fasterxml.jackson.databind.JavaType p_base_type_3652_line_75 = baseType;",
        "begin_line": 75,
        "end_line": 76,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "int PROBE_END_LINE_75",
        "snippet": "int PROBE_END_LINE_75 = 75;\n_baseType = p_base_type_3652_line_75;",
        "begin_line": 77,
        "end_line": 78,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "int PROBE_START_LINE_76",
        "snippet": "int PROBE_START_LINE_76 = 76;\ncom.fasterxml.jackson.databind.jsontype.TypeIdResolver p_id_res_3653_line_76 = idRes;",
        "begin_line": 79,
        "end_line": 80,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "int PROBE_END_LINE_76",
        "snippet": "int PROBE_END_LINE_76 = 76;\n_idResolver = p_id_res_3653_line_76;",
        "begin_line": 81,
        "end_line": 82,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "int PROBE_START_LINE_78",
        "snippet": "int PROBE_START_LINE_78 = 78;\nString p_type_property_name_3654_line_78 = typePropertyName;",
        "begin_line": 83,
        "end_line": 84,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "String type_deserializer_base1_expr1_line_78",
        "snippet": "String type_deserializer_base1_expr1_line_78 = type_deserializer_base1_expr2_line_78 ? \"\" : typePropertyName;\nint PROBE_END_LINE_78 = 78;",
        "begin_line": 87,
        "end_line": 88,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "int PROBE_START_LINE_79",
        "snippet": "int PROBE_START_LINE_79 = 79;\nboolean p_type_id_visible_3655_line_79 = typeIdVisible;",
        "begin_line": 91,
        "end_line": 92,
        "comment": "\t\t 22-Dec-2015, tatu: as per [databind#1055], avoid NPE"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "int PROBE_END_LINE_79",
        "snippet": "int PROBE_END_LINE_79 = 79;\n_typeIdVisible = p_type_id_visible_3655_line_79;",
        "begin_line": 93,
        "end_line": 94,
        "comment": "\t\t 22-Dec-2015, tatu: as per [databind#1055], avoid NPE"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/MappingJsonFactory.java",
        "signature": "int PROBE_START_LINE_30",
        "snippet": "int PROBE_START_LINE_30 = 32;\ncom.fasterxml.jackson.databind.ObjectMapper p_mapper_479_line_30 = mapper;",
        "begin_line": 30,
        "end_line": 31,
        "comment": "\n * Sub-class of {@link JsonFactory} that will create a proper\n * {@link ObjectCodec} to allow seam-less conversions between\n * JSON content and Java objects (POJOs).\n * The only addition to regular {@link JsonFactory} currently\n * is that {@link ObjectMapper} is constructed and passed as\n * the codec to use.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/MappingJsonFactory.java",
        "signature": "boolean mapping_json_factory1_expr2_line_30",
        "snippet": "boolean mapping_json_factory1_expr2_line_30 = p_mapper_479_line_30 == null;\nint PROBE_END_LINE_30 = 32;",
        "begin_line": 32,
        "end_line": 33,
        "comment": "\n * Sub-class of {@link JsonFactory} that will create a proper\n * {@link ObjectCodec} to allow seam-less conversions between\n * JSON content and Java objects (POJOs).\n * The only addition to regular {@link JsonFactory} currently\n * is that {@link ObjectMapper} is constructed and passed as\n * the codec to use.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeParser.java",
        "signature": "int PROBE_START_LINE_19",
        "snippet": "int PROBE_START_LINE_19 = 19;\ncom.fasterxml.jackson.databind.type.TypeFactory p_f_4660_line_19 = f;",
        "begin_line": 19,
        "end_line": 20,
        "comment": "\n * Simple recursive-descent parser for parsing canonical {@link JavaType}\n * representations and constructing type instances.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/ClassStack.java",
        "signature": "int PROBE_START_LINE_25",
        "snippet": "int PROBE_START_LINE_25 = 25;\ncom.fasterxml.jackson.databind.type.ClassStack p_parent_4257_line_25 = parent;",
        "begin_line": 25,
        "end_line": 26,
        "comment": "\n * Simple helper class used to keep track of 'call stack' for classes being referenced\n * (as well as unbound variables)\n *\n * @since 2.7\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/ClassStack.java",
        "signature": "int PROBE_END_LINE_25",
        "snippet": "int PROBE_END_LINE_25 = 25;\n_parent = p_parent_4257_line_25;",
        "begin_line": 27,
        "end_line": 28,
        "comment": "\n * Simple helper class used to keep track of 'call stack' for classes being referenced\n * (as well as unbound variables)\n *\n * @since 2.7\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/ClassStack.java",
        "signature": "int PROBE_START_LINE_55",
        "snippet": "int PROBE_START_LINE_55 = 59;\nArrayList<com.fasterxml.jackson.databind.type.ResolvedRecursiveType> f__self_refs_4264_line_55 = _selfRefs;",
        "begin_line": 64,
        "end_line": 65,
        "comment": "    \n     * Method called when type that this stack frame represents is\n     * fully resolved, allowing self-references to be completed\n     * (if there are any)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/ClassStack.java",
        "signature": "boolean class_stack1_expr4_line_55",
        "snippet": "boolean class_stack1_expr4_line_55 = f__self_refs_4264_line_55 != null;\nint PROBE_END_LINE_55 = 59;",
        "begin_line": 66,
        "end_line": 67,
        "comment": "    \n     * Method called when type that this stack frame represents is\n     * fully resolved, allowing self-references to be completed\n     * (if there are any)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
        "signature": "Java7Support x",
        "snippet": "Java7Support x = null;\ntry {\nint PROBE_START_LINE_70 = 70;",
        "begin_line": 76,
        "end_line": 78,
        "comment": "      can, I hope, be avoided?)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
        "signature": "Object ob",
        "snippet": "Object ob = instantiate(factoryName);\nif (ob == null) { // could warn, if we had logging system (j.u.l?)\nreturn null;",
        "begin_line": 122,
        "end_line": 124,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
        "signature": "int PROBE_START_LINE_118",
        "snippet": "int PROBE_START_LINE_118 = 118;\ncom.fasterxml.jackson.databind.JavaType p_type_2628_line_118 = type;",
        "begin_line": 133,
        "end_line": 134,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
        "signature": "int PROBE_START_LINE_129",
        "snippet": "int PROBE_START_LINE_129 = 131;\nClass<?> f_class_dom_document_2621_line_129 = CLASS_DOM_DOCUMENT;",
        "begin_line": 174,
        "end_line": 175,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_START_LINE_79",
        "snippet": "int PROBE_START_LINE_79 = 79;\nClass<?> p_raw_409_line_79 = raw;",
        "begin_line": 79,
        "end_line": 80,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_END_LINE_79",
        "snippet": "int PROBE_END_LINE_79 = 79;\n_class = p_raw_409_line_79;",
        "begin_line": 81,
        "end_line": 82,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_START_LINE_80",
        "snippet": "int PROBE_START_LINE_80 = 80;\nClass<?> p_raw_409_line_80 = raw;",
        "begin_line": 83,
        "end_line": 84,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_END_LINE_235",
        "snippet": "int PROBE_END_LINE_235 = 235;\nreturn f__class_414_line_235; }\n\n/**\n* Method that can be used to check whether this type has\n* specified Class as its type erasure. Put another way, returns\n* true if instantiation of this Type is given (type-erased) Class.\n*/\n@Override\npublic final boolean hasRawClass(Class<?> clz) { int PROBE_START_LINE_243 = 243;",
        "begin_line": 283,
        "end_line": 292,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "boolean java_type1_expr10_line_243",
        "snippet": "boolean java_type1_expr10_line_243 = f__class_414_line_243 == p_clz_434_line_243;\nint PROBE_END_LINE_243 = 243;",
        "begin_line": 295,
        "end_line": 296,
        "comment": "    \n     * Method that can be used to check whether this type has\n     * specified Class as its type erasure. Put another way, returns\n     * true if instantiation of this Type is given (type-erased) Class.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_END_LINE_265",
        "snippet": "int PROBE_END_LINE_265 = 265;\nreturn java_type1_expr12_line_265;",
        "begin_line": 323,
        "end_line": 324,
        "comment": "    \n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "Object f__type_handler_417_line_464",
        "snippet": "Object f__type_handler_417_line_464 = _typeHandler;\nint PROBE_END_LINE_464 = 464;",
        "begin_line": 562,
        "end_line": 563,
        "comment": "    \n     * Method for accessing type handler associated with this type, if any\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/CollectionLikeType.java",
        "signature": "int PROBE_START_LINE_36",
        "snippet": "int PROBE_START_LINE_36 = 36;\ncom.fasterxml.jackson.databind.JavaType p_elem_t_4271_line_36 = elemT;",
        "begin_line": 36,
        "end_line": 37,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/CollectionLikeType.java",
        "signature": "int PROBE_START_LINE_138",
        "snippet": "int PROBE_START_LINE_138 = 138;\ncom.fasterxml.jackson.databind.JavaType p_src_4293_line_138 = src;",
        "begin_line": 141,
        "end_line": 142,
        "comment": "            will cross that bridge if and when need be"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/CollectionLikeType.java",
        "signature": "JavaType collection_like_type1_expr3_line_138",
        "snippet": "JavaType collection_like_type1_expr3_line_138 = super.withHandlersFrom(p_src_4293_line_138);\nint PROBE_END_LINE_138 = 138;",
        "begin_line": 143,
        "end_line": 144,
        "comment": "            will cross that bridge if and when need be"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/CollectionLikeType.java",
        "signature": "JavaType type",
        "snippet": "JavaType type = collection_like_type1_expr3_line_138;\nint PROBE_START_LINE_139 = 139;",
        "begin_line": 145,
        "end_line": 146,
        "comment": "            will cross that bridge if and when need be"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/CollectionLikeType.java",
        "signature": "int PROBE_END_LINE_143",
        "snippet": "int PROBE_END_LINE_143 = 143;\ntype = collection_like_type1_expr8_line_143;",
        "begin_line": 174,
        "end_line": 175,
        "comment": "            will cross that bridge if and when need be"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/CollectionLikeType.java",
        "signature": "int PROBE_END_LINE_146",
        "snippet": "int PROBE_END_LINE_146 = 146;\nreturn v_type_4294_line_146;",
        "begin_line": 180,
        "end_line": 181,
        "comment": "            will cross that bridge if and when need be"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/CollectionLikeType.java",
        "signature": "boolean collection_like_type1_expr13_line_194",
        "snippet": "boolean collection_like_type1_expr13_line_194 = false;\nif (!collection_like_type1_expr12_line_194) {\ncom.fasterxml.jackson.databind.JavaType f__element_type_4275_line_194 = _elementType;",
        "begin_line": 234,
        "end_line": 236,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "boolean deserialization_context1_expr1_line_159",
        "snippet": "boolean deserialization_context1_expr1_line_159 = p_df_245_line_159 == null;\nint PROBE_END_LINE_159 = 161;",
        "begin_line": 162,
        "end_line": 163,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_START_LINE_162",
        "snippet": "int PROBE_START_LINE_162 = 162;\ncom.fasterxml.jackson.databind.deser.DeserializerFactory p_df_245_line_162 = df;",
        "begin_line": 167,
        "end_line": 168,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_END_LINE_162",
        "snippet": "int PROBE_END_LINE_162 = 162;\n_factory = p_df_245_line_162;",
        "begin_line": 169,
        "end_line": 170,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_START_LINE_197",
        "snippet": "int PROBE_START_LINE_197 = 197;\ncom.fasterxml.jackson.databind.DeserializationConfig p_config_257_line_197 = config;",
        "begin_line": 224,
        "end_line": 225,
        "comment": "    \n     * Constructor used for creating actual per-call instances.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_END_LINE_199",
        "snippet": "int PROBE_END_LINE_199 = 199;\n_parser = p_p_258_line_199;",
        "begin_line": 236,
        "end_line": 237,
        "comment": "    \n     * Constructor used for creating actual per-call instances.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_END_LINE_201",
        "snippet": "int PROBE_END_LINE_201 = 201;\n_attributes = deserialization_context1_expr9_line_201;",
        "begin_line": 246,
        "end_line": 247,
        "comment": "    \n     * Constructor used for creating actual per-call instances.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "ObjectBuffer buf",
        "snippet": "ObjectBuffer buf = _objectBuffer;\nif (buf == null) {\nbuf = new ObjectBuffer();",
        "begin_line": 650,
        "end_line": 652,
        "comment": "    \n     * Method that can be used to get access to a reusable ObjectBuffer,\n     * useful for efficiently constructing Object arrays and Lists.\n     * Note that leased buffers should be returned once deserializer\n     * is done, to allow for reuse during same round of deserialization.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java",
        "signature": "int PROBE_START_LINE_38",
        "snippet": "int PROBE_START_LINE_38 = 38;\ncom.fasterxml.jackson.databind.JavaType p_base_type_3679_line_38 = baseType;",
        "begin_line": 38,
        "end_line": 39,
        "comment": "    \n     * Common base type for all polymorphic instances handled.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java",
        "signature": "int PROBE_END_LINE_38",
        "snippet": "int PROBE_END_LINE_38 = 38;\n_baseType = p_base_type_3679_line_38;",
        "begin_line": 40,
        "end_line": 41,
        "comment": "    \n     * Common base type for all polymorphic instances handled.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_33",
        "snippet": "int PROBE_START_LINE_33 = 33;\nAnnotatedClass basic_class_introspector1_expr1_line_33 = AnnotatedClass.constructWithoutSuperTypes(String.class,\nnull);",
        "begin_line": 33,
        "end_line": 35,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_34",
        "snippet": "int PROBE_START_LINE_34 = 34;\ncom.fasterxml.jackson.databind.type.SimpleType basic_class_introspector1_expr4_line_34 = SimpleType\n.constructUnsafe(String.class);",
        "begin_line": 38,
        "end_line": 40,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_END_LINE_34",
        "snippet": "int PROBE_END_LINE_34 = 34;\nSTRING_DESC = basic_class_introspector1_expr3_line_34;",
        "begin_line": 44,
        "end_line": 45,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_38",
        "snippet": "int PROBE_START_LINE_38 = 38;\nClass<Boolean> f_type_2950_line_38 = Boolean.TYPE;",
        "begin_line": 49,
        "end_line": 50,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_END_LINE_43",
        "snippet": "int PROBE_END_LINE_43 = 43;\nAnnotatedClass ac = basic_class_introspector1_expr9_line_43;",
        "begin_line": 71,
        "end_line": 72,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "BasicBeanDescription desc",
        "snippet": "BasicBeanDescription desc = _findStdTypeDesc(type);\nif (desc == null) {\n// As per [Databind#550], skip full introspection for some of standard\n// structured types as well\ndesc = _findStdJdkCollectionDesc(cfg, type);",
        "begin_line": 135,
        "end_line": 139,
        "comment": "         minor optimization: for some JDK types do minimal introspection"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "BasicBeanDescription basic_class_introspector1_expr19_line_105",
        "snippet": "BasicBeanDescription basic_class_introspector1_expr19_line_105 = _findStdTypeDesc(p_type_2964_line_105);\nint PROBE_END_LINE_105 = 105;",
        "begin_line": 156,
        "end_line": 157,
        "comment": "             Also: this is a superset of \"forClassAnnotations\", so may optimize by optional add:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "BasicBeanDescription desc",
        "snippet": "BasicBeanDescription desc = basic_class_introspector1_expr19_line_105;\nint PROBE_START_LINE_106 = 116;",
        "begin_line": 159,
        "end_line": 160,
        "comment": "\t\t minor optimization: for some JDK types do minimal introspection"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "boolean basic_class_introspector1_expr20_line_106",
        "snippet": "boolean basic_class_introspector1_expr20_line_106 = v_desc_2966_line_106 == null;\nint PROBE_END_LINE_106 = 116;",
        "begin_line": 162,
        "end_line": 163,
        "comment": "\t\t minor optimization: for some JDK types do minimal introspection"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_109",
        "snippet": "int PROBE_START_LINE_109 = 109;\ncom.fasterxml.jackson.databind.DeserializationConfig p_cfg_2963_line_109 = cfg;",
        "begin_line": 165,
        "end_line": 166,
        "comment": "\t\t minor optimization: for some JDK types do minimal introspection"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "BasicBeanDescription basic_class_introspector1_expr28_line_137",
        "snippet": "BasicBeanDescription basic_class_introspector1_expr28_line_137 = _findStdTypeDesc(p_type_2971_line_137);\nint PROBE_END_LINE_137 = 137;",
        "begin_line": 221,
        "end_line": 222,
        "comment": "         this is still a superset of \"forClassAnnotations\", so may optimize by optional add:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_END_LINE_142",
        "snippet": "int PROBE_END_LINE_142 = 142;\n// As per [Databind#550], skip full introspection for some of standard\n// structured types as well\ndesc = basic_class_introspector1_expr30_line_142;",
        "begin_line": 235,
        "end_line": 238,
        "comment": "         this is still a superset of \"forClassAnnotations\", so may optimize by optional add:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_149",
        "snippet": "int PROBE_START_LINE_149 = 149;\ncom.fasterxml.jackson.databind.introspect.BasicBeanDescription v_desc_2973_line_149 = desc;",
        "begin_line": 248,
        "end_line": 249,
        "comment": "             structured types as well"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_END_LINE_149",
        "snippet": "int PROBE_END_LINE_149 = 149;\n// should this be cached for FCA?\nreturn v_desc_2973_line_149;",
        "begin_line": 250,
        "end_line": 252,
        "comment": "             structured types as well"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_156",
        "snippet": "int PROBE_START_LINE_156 = 156;\ncom.fasterxml.jackson.databind.JavaType p_type_2975_line_156 = type;",
        "begin_line": 259,
        "end_line": 260,
        "comment": "\t\t should this be cached for FCA?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_158",
        "snippet": "int PROBE_START_LINE_158 = 158;\nLRUMap<com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.BasicBeanDescription> f__cached_fca_2959_line_158 = _cachedFCA;",
        "begin_line": 269,
        "end_line": 270,
        "comment": "\t\t should this be cached for FCA?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.FailingDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/FailingDeserializer.java",
        "signature": "int PROBE_START_LINE_22",
        "snippet": "int PROBE_START_LINE_22 = 22;\nString p_m_2324_line_22 = m;",
        "begin_line": 22,
        "end_line": 23,
        "comment": "\n * Special bogus \"serializer\" that will throw\n * {@link JsonMappingException} if an attempt is made to deserialize\n * a value. This is used as placeholder to avoid NPEs for uninitialized\n * structured serializers or handlers.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_START_LINE_212",
        "snippet": "int PROBE_START_LINE_212 = 212;\ncom.fasterxml.jackson.databind.BeanDescription p_bean_desc_1640_line_212 = beanDesc;",
        "begin_line": 225,
        "end_line": 226,
        "comment": "    \n     * Constructor used when initially building a deserializer\n     * instance, given a {@link BeanDeserializerBuilder} that\n     * contains configuration.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "AnnotatedClass bean_deserializer_base1_expr5_line_212",
        "snippet": "AnnotatedClass bean_deserializer_base1_expr5_line_212 = p_bean_desc_1640_line_212.getClassInfo();\nint PROBE_END_LINE_212 = 212;",
        "begin_line": 227,
        "end_line": 228,
        "comment": "    \n     * Constructor used when initially building a deserializer\n     * instance, given a {@link BeanDeserializerBuilder} that\n     * contains configuration.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_END_LINE_213",
        "snippet": "int PROBE_END_LINE_213 = 213;\n_classAnnotations = bean_deserializer_base1_expr6_line_213;",
        "begin_line": 234,
        "end_line": 235,
        "comment": "    \n     * Constructor used when initially building a deserializer\n     * instance, given a {@link BeanDeserializerBuilder} that\n     * contains configuration.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_START_LINE_214",
        "snippet": "int PROBE_START_LINE_214 = 214;\ncom.fasterxml.jackson.databind.BeanDescription p_bean_desc_1640_line_214 = beanDesc;",
        "begin_line": 236,
        "end_line": 237,
        "comment": "    \n     * Constructor used when initially building a deserializer\n     * instance, given a {@link BeanDeserializerBuilder} that\n     * contains configuration.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_END_LINE_477",
        "snippet": "int PROBE_END_LINE_477 = 477;\n// [databind#125]: allow use of converters\nJsonDeserializer<?> deser = bean_deserializer_base1_expr31_line_477;",
        "begin_line": 589,
        "end_line": 591,
        "comment": "         contextualize (since that can lead to problems with self-references)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_START_LINE_478",
        "snippet": "int PROBE_START_LINE_478 = 480;\nJsonDeserializer<?> v_deser_1684_line_478 = deser;",
        "begin_line": 592,
        "end_line": 593,
        "comment": "\t\t\t\t [databind#125]: allow use of converters"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_END_LINE_490",
        "snippet": "int PROBE_END_LINE_490 = 490;\ndeser = bean_deserializer_base1_expr38_line_490;",
        "begin_line": 646,
        "end_line": 647,
        "comment": "\t\t Second loop: contextualize, find other pieces"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "SettableBeanProperty u",
        "snippet": "SettableBeanProperty u = _resolveUnwrappedProperty(ctxt, prop);\nif (u != null) {\nprop = u;",
        "begin_line": 657,
        "end_line": 659,
        "comment": "             Support unwrapped values (via @JsonUnwrapped)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_START_LINE_87",
        "snippet": "int PROBE_START_LINE_87 = 87;\ncom.fasterxml.jackson.databind.JavaType p_value_type_2536_line_87 = valueType;",
        "begin_line": 89,
        "end_line": 90,
        "comment": "    \n     * @deprecated Since 2.7 use constructor that takes {@link JavaType} instead\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_START_LINE_129",
        "snippet": "int PROBE_START_LINE_129 = 129;\ncom.fasterxml.jackson.databind.introspect.AnnotatedWithParams p_default_creator_2540_line_129 = defaultCreator;",
        "begin_line": 155,
        "end_line": 156,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_END_LINE_129",
        "snippet": "int PROBE_END_LINE_129 = 129;\n_defaultCreator = p_default_creator_2540_line_129;",
        "begin_line": 157,
        "end_line": 158,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_START_LINE_130",
        "snippet": "int PROBE_START_LINE_130 = 130;\ncom.fasterxml.jackson.databind.introspect.AnnotatedWithParams p_delegate_creator_2541_line_130 = delegateCreator;",
        "begin_line": 159,
        "end_line": 160,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_END_LINE_130",
        "snippet": "int PROBE_END_LINE_130 = 130;\n_delegateCreator = p_delegate_creator_2541_line_130;",
        "begin_line": 161,
        "end_line": 162,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_START_LINE_131",
        "snippet": "int PROBE_START_LINE_131 = 131;\ncom.fasterxml.jackson.databind.JavaType p_delegate_type_2542_line_131 = delegateType;",
        "begin_line": 163,
        "end_line": 164,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_END_LINE_131",
        "snippet": "int PROBE_END_LINE_131 = 131;\n_delegateType = p_delegate_type_2542_line_131;",
        "begin_line": 165,
        "end_line": 166,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_START_LINE_132",
        "snippet": "int PROBE_START_LINE_132 = 132;\ncom.fasterxml.jackson.databind.deser.SettableBeanProperty[] p_delegate_args_2543_line_132 = delegateArgs;",
        "begin_line": 167,
        "end_line": 168,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_END_LINE_132",
        "snippet": "int PROBE_END_LINE_132 = 132;\n_delegateArguments = p_delegate_args_2543_line_132;",
        "begin_line": 169,
        "end_line": 170,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_END_LINE_160",
        "snippet": "int PROBE_END_LINE_160 = 160;\n_fromDoubleCreator = p_creator_2564_line_160;",
        "begin_line": 224,
        "end_line": 225,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_START_LINE_164",
        "snippet": "int PROBE_START_LINE_164 = 164;\ncom.fasterxml.jackson.databind.introspect.AnnotatedWithParams p_creator_2566_line_164 = creator;",
        "begin_line": 229,
        "end_line": 230,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "Object arg",
        "snippet": "Object arg = Integer.valueOf(value);\ntry {\nreturn _fromIntCreator.call1(arg);",
        "begin_line": 433,
        "end_line": 435,
        "comment": "         First: \"native\" int methods work best:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int PROBE_START_LINE_94",
        "snippet": "int PROBE_START_LINE_94 = 94;\nCollection<com.fasterxml.jackson.databind.deser.SettableBeanProperty> p_props_2188_line_94 = props;",
        "begin_line": 110,
        "end_line": 111,
        "comment": "    \n     * Mutant factory method that constructs a new instance if desired case-insensitivity\n     * state differs from the state of this instance; if states are the same, returns\n     * <code>this</code>.\n     *\n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int bean_property_map1_expr5_line_94",
        "snippet": "int bean_property_map1_expr5_line_94 = p_props_2188_line_94.size();\nint PROBE_END_LINE_94 = 94;",
        "begin_line": 112,
        "end_line": 113,
        "comment": "    \n     * Mutant factory method that constructs a new instance if desired case-insensitivity\n     * state differs from the state of this instance; if states are the same, returns\n     * <code>this</code>.\n     *\n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int PROBE_START_LINE_97",
        "snippet": "int PROBE_START_LINE_97 = 97;\nint f__size_2189_line_97 = _size;",
        "begin_line": 116,
        "end_line": 117,
        "comment": "    \n     * Mutant factory method that constructs a new instance if desired case-insensitivity\n     * state differs from the state of this instance; if states are the same, returns\n     * <code>this</code>.\n     *\n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int PROBE_START_LINE_101",
        "snippet": "int PROBE_START_LINE_101 = 101;\nint v_hash_size_2190_line_101 = hashSize;",
        "begin_line": 128,
        "end_line": 129,
        "comment": "\t\t First: calculate size of primary hash area"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int bean_property_map1_expr12_line_101",
        "snippet": "int bean_property_map1_expr12_line_101 = hashSize >> 1;\nint bean_property_map1_expr11_line_101 = (bean_property_map1_expr12_line_101);",
        "begin_line": 130,
        "end_line": 131,
        "comment": "\t\t First: calculate size of primary hash area"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int alloc",
        "snippet": "int alloc = bean_property_map1_expr8_line_101;\nint PROBE_START_LINE_102 = 102;",
        "begin_line": 137,
        "end_line": 138,
        "comment": "\t\t and allocate enough to contain primary/secondary, expand for spillovers as need be"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int v_alloc_2192_line_102",
        "snippet": "int v_alloc_2192_line_102 = alloc;\nint PROBE_END_LINE_102 = 102;",
        "begin_line": 139,
        "end_line": 140,
        "comment": "\t\t and allocate enough to contain primary/secondary, expand for spillovers as need be"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int PROBE_START_LINE_105",
        "snippet": "int PROBE_START_LINE_105 = 131;\nCollection<com.fasterxml.jackson.databind.deser.SettableBeanProperty> p_props_2188_line_105 = props;",
        "begin_line": 144,
        "end_line": 145,
        "comment": "\t\t and allocate enough to contain primary/secondary, expand for spillovers as need be"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "String key",
        "snippet": "String key = bean_property_map1_expr16_line_111;\nint PROBE_START_LINE_112 = 112;",
        "begin_line": 161,
        "end_line": 162,
        "comment": "\t\t\t Due to removal, renaming, theoretically possible we'll have \"holes\" so:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "boolean bean_property_map1_expr25_line_143",
        "snippet": "boolean bean_property_map1_expr25_line_143 = p_size_2201_line_143 <= 5;\nint PROBE_END_LINE_143 = 145;",
        "begin_line": 227,
        "end_line": 228,
        "comment": "\t\t/*\nfor (int i = 0; i < hashed.length; i += 2) {\nSystem.err.printf(\"#%02d: %s\\n\", i>>1, (hashed[i] == null) ? \"-\" : hashed[i]);\n}\n"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int last",
        "snippet": "int last = _propsInOrder.length;\n_propsInOrder = Arrays.copyOf(_propsInOrder, last+1);",
        "begin_line": 305,
        "end_line": 306,
        "comment": "                    /*\nfor (int i = 0; i < _hashArea.length; i += 2) {\n    if (_hashArea[i] != null) {\n        System.err.println(\"Property #\"+(i/2)+\" '\"+_hashArea[i]+\"'...\");\n    }\n}\nSystem.err.println(\"And new propr #\"+slot+\" '\"+key+\"'\");\n"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int index",
        "snippet": "int index = 0;\nfor (int i = 1, end = _hashArea.length; i < end; i += 2) {\nint PROBE_START_LINE_229 = 229;",
        "begin_line": 317,
        "end_line": 319,
        "comment": "         order is arbitrary, but stable:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "Object[] f__hash_area_2199_line_229",
        "snippet": "Object[] f__hash_area_2199_line_229 = _hashArea;\nint v_i_2206_line_229 = i;",
        "begin_line": 320,
        "end_line": 321,
        "comment": "         order is arbitrary, but stable:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "Object bean_property_map1_expr32_line_229",
        "snippet": "Object bean_property_map1_expr32_line_229 = f__hash_area_2199_line_229[v_i_2206_line_229];\nint PROBE_END_LINE_229 = 229;",
        "begin_line": 322,
        "end_line": 323,
        "comment": "         order is arbitrary, but stable:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int PROBE_START_LINE_231",
        "snippet": "int PROBE_START_LINE_231 = 231;\ncom.fasterxml.jackson.databind.deser.SettableBeanProperty v_prop_2208_line_231 = prop;",
        "begin_line": 330,
        "end_line": 331,
        "comment": "         order is arbitrary, but stable:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "final int len",
        "snippet": "final int len = _propsInOrder.length;\nArrayList<SettableBeanProperty> newProps = new ArrayList<SettableBeanProperty>(len);",
        "begin_line": 349,
        "end_line": 350,
        "comment": "         Try to retain insertion ordering as well"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int hashSize",
        "snippet": "int hashSize = _hashMask+1;\nint ix = hashSize + (slot>>1) << 1;",
        "begin_line": 565,
        "end_line": 566,
        "comment": "         no? secondary?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "signature": "int PROBE_START_LINE_77",
        "snippet": "int PROBE_START_LINE_77 = 77;\njava.util.TimeZone std_date_format1_expr2_line_77 = TimeZone.getTimeZone(\"UTC\");",
        "begin_line": 79,
        "end_line": 80,
        "comment": "    \n     * By default we use UTC for everything, with Jackson 2.7 and later\n     * (2.6 and earlier relied on GMT)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "signature": "int PROBE_END_LINE_99",
        "snippet": "int PROBE_END_LINE_99 = 99;\nDATE_FORMAT_RFC1123 = new SimpleDateFormat(f_date_format_str_rfc1123_4812_line_99, f_default_locale_4809_line_99);",
        "begin_line": 113,
        "end_line": 114,
        "comment": "        /* Another important thing: let's force use of default timezone for\n         * baseline DataFormat objects\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "signature": "int PROBE_START_LINE_106",
        "snippet": "int PROBE_START_LINE_106 = 106;\njava.text.DateFormat f_date_format_iso8601_no_tz_4817_line_106 = DATE_FORMAT_ISO8601_NO_TZ;",
        "begin_line": 145,
        "end_line": 146,
        "comment": "        /* Another important thing: let's force use of default timezone for\n         * baseline DataFormat objects\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "signature": "int PROBE_END_LINE_106",
        "snippet": "int PROBE_END_LINE_106 = 106;\nf_date_format_iso8601_no_tz_4817_line_106.setTimeZone(f_default_timezone_4808_line_106);",
        "begin_line": 148,
        "end_line": 149,
        "comment": "        /* Another important thing: let's force use of default timezone for\n         * baseline DataFormat objects\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "signature": "int PROBE_START_LINE_37",
        "snippet": "int PROBE_START_LINE_37 = 37;\nClass<? extends Number> p_raw_type_4050_line_37 = rawType;",
        "begin_line": 36,
        "end_line": 37,
        "comment": "    \n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "signature": "boolean number_serializer1_expr6_line_37",
        "snippet": "boolean number_serializer1_expr6_line_37 = p_raw_type_4050_line_37 == BigInteger.class;\nboolean number_serializer1_expr5_line_37 = (number_serializer1_expr6_line_37);",
        "begin_line": 38,
        "end_line": 39,
        "comment": "    \n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_1178",
        "snippet": "int PROBE_START_LINE_1178 = 1178;\nJavaType p_base_type_91_line_1178 = baseType;",
        "begin_line": 1178,
        "end_line": 1179,
        "comment": "    \n     * Method called to find out possible type refinements to use\n     * for deserialization.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
        "signature": "final TypeFactory tf",
        "snippet": "final TypeFactory tf = annotation_introspector1_expr1_line_1179;\n\n// 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to\n//    now-deprecated secondary methods; this because while\n//    direct sub-class not yet retrofitted may only override\n//    those methods. With 2.8 or later we may consider removal\n//    of these methods\n\n\nint PROBE_START_LINE_1189 = 1189;",
        "begin_line": 1186,
        "end_line": 1195,
        "comment": "    \n     * Method called to find out possible type refinements to use\n     * for deserialization.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_1190",
        "snippet": "int PROBE_START_LINE_1190 = 1199;\nClass<?> v_value_class_94_line_1190 = valueClass;",
        "begin_line": 1203,
        "end_line": 1204,
        "comment": "\t\t Ok: start by refining the main type itself; common to all types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
        "signature": "int PROBE_END_LINE_1190",
        "snippet": "int PROBE_END_LINE_1190 = 1199;\nif (annotation_introspector1_expr3_line_1190) {\ntry {\ntype = tf.constructSpecializedType(type, valueClass);",
        "begin_line": 1215,
        "end_line": 1218,
        "comment": "\t\t Ok: start by refining the main type itself; common to all types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
        "signature": "JavaType keyType",
        "snippet": "JavaType keyType = type.getKeyType();\nClass<?> keyClass = findDeserializationKeyType(a, keyType);",
        "begin_line": 1234,
        "end_line": 1235,
        "comment": "\t\t First, key type (for Maps, Map-like types):"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "signature": "int PROBE_START_LINE_46",
        "snippet": "int PROBE_START_LINE_46 = 46;\n\nprotected static final com.fasterxml.jackson.annotation.JsonInclude.Value serialization_config1_expr2_line_46 = JsonInclude.Value\n.empty();",
        "begin_line": 46,
        "end_line": 49,
        "comment": "     since 2.6"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.JdkDeserializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
        "signature": "int PROBE_START_LINE_24",
        "snippet": "int PROBE_START_LINE_24 = 24;\nClass<?>[] v_types_2426_line_24 = types;",
        "begin_line": 25,
        "end_line": 26,
        "comment": "         note: can skip primitive types; other ways to check them:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.JdkDeserializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
        "signature": "String jdk_deserializers1_expr4_line_24",
        "snippet": "String jdk_deserializers1_expr4_line_24 = v_cls_2427_line_24.getName();\nint PROBE_END_LINE_24 = 24;",
        "begin_line": 29,
        "end_line": 30,
        "comment": "         note: can skip primitive types; other ways to check them:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.JdkDeserializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
        "signature": "int PROBE_END_LINE_30",
        "snippet": "int PROBE_END_LINE_30 = 48;\nif (jdk_deserializers1_expr8_line_30) {\nJsonDeserializer<?> d = FromStringDeserializer.findDeserializer(rawType);",
        "begin_line": 47,
        "end_line": 49,
        "comment": "         note: can skip primitive types; other ways to check them:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "signature": "int PROBE_START_LINE_459",
        "snippet": "int PROBE_START_LINE_459 = 459;\nboolean p_default_state_405_line_459 = defaultState;",
        "begin_line": 459,
        "end_line": 460,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "signature": "int PROBE_END_LINE_459",
        "snippet": "int PROBE_END_LINE_459 = 459;\n_defaultState = p_default_state_405_line_459;",
        "begin_line": 461,
        "end_line": 462,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "signature": "int PROBE_START_LINE_460",
        "snippet": "int PROBE_START_LINE_460 = 460;\nint deserialization_feature1_expr3_line_460 = ordinal();",
        "begin_line": 463,
        "end_line": 464,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "signature": "int PROBE_END_LINE_460",
        "snippet": "int PROBE_END_LINE_460 = 460;\n_mask = deserialization_feature1_expr1_line_460;",
        "begin_line": 467,
        "end_line": 468,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_77",
        "snippet": "int PROBE_START_LINE_77 = 77;\ncom.fasterxml.jackson.databind.introspect.POJOPropertiesCollector p_coll_2898_line_77 = coll;",
        "begin_line": 86,
        "end_line": 87,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_80",
        "snippet": "int PROBE_START_LINE_80 = 84;\nMapperConfig<?> f__config_2902_line_80 = _config;",
        "begin_line": 95,
        "end_line": 96,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "boolean basic_bean_description1_expr3_line_80",
        "snippet": "boolean basic_bean_description1_expr3_line_80 = f__config_2902_line_80 == null;\nint PROBE_END_LINE_80 = 84;",
        "begin_line": 97,
        "end_line": 98,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_83",
        "snippet": "int PROBE_START_LINE_83 = 83;\nMapperConfig<?> f__config_2902_line_83 = _config;",
        "begin_line": 103,
        "end_line": 104,
        "comment": "\t\t NOTE: null config only for some pre-constructed types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_85",
        "snippet": "int PROBE_START_LINE_85 = 85;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass p_class_def_2900_line_85 = classDef;",
        "begin_line": 110,
        "end_line": 111,
        "comment": "\t\t NOTE: null config only for some pre-constructed types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_END_LINE_85",
        "snippet": "int PROBE_END_LINE_85 = 85;\n_classInfo = p_class_def_2900_line_85;",
        "begin_line": 112,
        "end_line": 113,
        "comment": "\t\t NOTE: null config only for some pre-constructed types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_102",
        "snippet": "int PROBE_START_LINE_102 = 102;\nMapperConfig<?> f__config_2902_line_102 = _config;",
        "begin_line": 137,
        "end_line": 138,
        "comment": "\t\t NOTE: null config only for some pre-constructed types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_104",
        "snippet": "int PROBE_START_LINE_104 = 104;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass p_class_def_2907_line_104 = classDef;",
        "begin_line": 144,
        "end_line": 145,
        "comment": "\t\t NOTE: null config only for some pre-constructed types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_END_LINE_104",
        "snippet": "int PROBE_END_LINE_104 = 104;\n_classInfo = p_class_def_2907_line_104;",
        "begin_line": 146,
        "end_line": 147,
        "comment": "\t\t NOTE: null config only for some pre-constructed types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_END_LINE_146",
        "snippet": "int PROBE_END_LINE_146 = 146;\nreturn f__properties_2909_line_146;",
        "begin_line": 215,
        "end_line": 216,
        "comment": "    \n     * Factory method to use for constructing an instance to use for purposes\n     * other than building serializers or deserializers; will only have information\n     * on class, not on properties.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_END_LINE_212",
        "snippet": "int PROBE_END_LINE_212 = 212;\nreturn f__class_info_2904_line_212; }\n\n@Override\npublic ObjectIdInfo getObjectIdInfo() { int PROBE_START_LINE_215 = 215;",
        "begin_line": 284,
        "end_line": 288,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_END_LINE_215",
        "snippet": "int PROBE_END_LINE_215 = 215;\nreturn  f__object_id_info_2911_line_215; }\n\n@Override\npublic List<BeanPropertyDefinition> findProperties() {\nint PROBE_START_LINE_219 = 219;",
        "begin_line": 290,
        "end_line": 295,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_300",
        "snippet": "int PROBE_START_LINE_300 = 300;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass f__class_info_2904_line_300 = _classInfo;",
        "begin_line": 426,
        "end_line": 427,
        "comment": "            /* !!! 18-May-2009, tatu: how about enums? Can add support if\n             *  requested; easy enough for devs to add support within\n             *  method.\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "AnnotatedConstructor ac",
        "snippet": "AnnotatedConstructor ac = _classInfo.getDefaultConstructor();\nif (ac == null) {\nreturn null;",
        "begin_line": 436,
        "end_line": 438,
        "comment": "            /* !!! 18-May-2009, tatu: how about enums? Can add support if\n             *  requested; easy enough for devs to add support within\n             *  method.\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "Throwable t",
        "snippet": "Throwable t = e;\nwhile (t.getCause() != null) {\nt = t.getCause();",
        "begin_line": 446,
        "end_line": 448,
        "comment": "            /* !!! 18-May-2009, tatu: how about enums? Can add support if\n             *  requested; easy enough for devs to add support within\n             *  method.\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_349",
        "snippet": "int PROBE_START_LINE_349 = 355;\ncom.fasterxml.jackson.annotation.JsonFormat.Value v_v_2928_line_349 = v;",
        "begin_line": 490,
        "end_line": 491,
        "comment": "           defaults having higher precedence, so start with that"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "boolean basic_bean_description1_expr36_line_349",
        "snippet": "boolean basic_bean_description1_expr36_line_349 = v_v_2928_line_349 != null;\nint PROBE_END_LINE_349 = 355;",
        "begin_line": 492,
        "end_line": 493,
        "comment": "           defaults having higher precedence, so start with that"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/PropertyMetadata.java",
        "signature": "int PROBE_START_LINE_16",
        "snippet": "int PROBE_START_LINE_16 = 16;\n\npublic static final Boolean f_true_830_line_16 = Boolean.TRUE;",
        "begin_line": 16,
        "end_line": 18,
        "comment": "\n * Simple container class used for storing \"additional\" metadata about\n * properties. Carved out to reduce number of distinct properties that\n * actual property implementations and placeholders need to store;\n * since instances are immutable, they can be freely shared.\n * \n * @since 2.3\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/PropertyMetadata.java",
        "signature": "int PROBE_END_LINE_16",
        "snippet": "int PROBE_END_LINE_16 = 16;\n\npublic final static PropertyMetadata STD_REQUIRED = new PropertyMetadata(f_true_830_line_16, null, null, null);",
        "begin_line": 20,
        "end_line": 22,
        "comment": "\n * Simple container class used for storing \"additional\" metadata about\n * properties. Carved out to reduce number of distinct properties that\n * actual property implementations and placeholders need to store;\n * since instances are immutable, they can be freely shared.\n * \n * @since 2.3\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_129",
        "snippet": "int PROBE_START_LINE_129 = 129;\ncom.fasterxml.jackson.databind.PropertyName f__name_3309_line_129 = _name;",
        "begin_line": 151,
        "end_line": 152,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean pojoproperty_builder1_expr5_line_129",
        "snippet": "boolean pojoproperty_builder1_expr5_line_129 = f__name_3309_line_129 == null;\nboolean pojoproperty_builder1_expr3_line_129 = (pojoproperty_builder1_expr5_line_129);",
        "begin_line": 153,
        "end_line": 154,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean pojoproperty_builder1_expr8_line_153",
        "snippet": "boolean pojoproperty_builder1_expr8_line_153 = (pojoproperty_builder1_expr10_line_153);\ncom.fasterxml.jackson.databind.PropertyName pojoproperty_builder1_expr7_line_153 = pojoproperty_builder1_expr8_line_153\n? null\n: _annotationIntrospector.findWrapperName(member);",
        "begin_line": 203,
        "end_line": 206,
        "comment": "\t\t/* 13-Mar-2013, tatu: Accessing via primary member SHOULD work,\n         *   due to annotation merging. However, I have seen some problems\n         *   with this access (for other annotations)... so if this should\n         *   occur, try commenting out full traversal code\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_270",
        "snippet": "int PROBE_START_LINE_270 = 270;\nLinked<AnnotatedMethod> f__setters_3318_line_270 = _setters;",
        "begin_line": 335,
        "end_line": 336,
        "comment": "         One more thing; to avoid having to do it again..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_270",
        "snippet": "int PROBE_END_LINE_270 = 270;\n// Easy with zero or one getters...\nLinked<AnnotatedMethod> curr = f__setters_3318_line_270;",
        "begin_line": 337,
        "end_line": 339,
        "comment": "         One more thing; to avoid having to do it again..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_271",
        "snippet": "int PROBE_START_LINE_271 = 273;\ncom.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedMethod> v_curr_3321_line_271 = curr;",
        "begin_line": 340,
        "end_line": 341,
        "comment": "\t\t Easy with zero or one getters..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_335",
        "snippet": "int PROBE_START_LINE_335 = 337;\ncom.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedField> f__fields_3319_line_335 = _fields;",
        "begin_line": 408,
        "end_line": 409,
        "comment": "         One more thing; to avoid having to do it again..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "AnnotatedField f_value_3323_line_339",
        "snippet": "AnnotatedField f_value_3323_line_339 = f__fields_3319_line_339.value;\nint PROBE_END_LINE_339 = 339;",
        "begin_line": 417,
        "end_line": 418,
        "comment": "         One more thing; to avoid having to do it again..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "AnnotatedField field",
        "snippet": "AnnotatedField field = f_value_3323_line_339;\nint PROBE_START_LINE_340 = 340;",
        "begin_line": 420,
        "end_line": 421,
        "comment": "\t\t If multiple, verify that they do not conflict..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "Linked<AnnotatedField> next",
        "snippet": "Linked<AnnotatedField> next = f_next_3325_line_340;\nfor (; next != null; next = next.next) {\nAnnotatedField nextField = next.value;",
        "begin_line": 425,
        "end_line": 427,
        "comment": "\t\t If multiple, verify that they do not conflict..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "Linked<AnnotatedParameter> curr",
        "snippet": "Linked<AnnotatedParameter> curr = _ctorParameters;\ndo {\nif (curr.value.getOwner() instanceof AnnotatedConstructor) {\nreturn curr.value;",
        "begin_line": 466,
        "end_line": 469,
        "comment": "        /* Hmmh. Checking for constructor parameters is trickier; for one,\n         * we must allow creator and factory method annotations.\n         * If this is the case, constructor parameter has the precedence.\n         * \n         * So, for now, just try finding the first constructor parameter;\n         * if none, first factory method. And don't check for dups, if we must,\n         * can start checking for them later on.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "AnnotatedMember m",
        "snippet": "AnnotatedMember m = getGetter();\nif (m == null) {\nm = getField();",
        "begin_line": 495,
        "end_line": 497,
        "comment": "        /* Hmmh. Checking for constructor parameters is trickier; for one,\n         * we must allow creator and factory method annotations.\n         * If this is the case, constructor parameter has the precedence.\n         * \n         * So, for now, just try finding the first constructor parameter;\n         * if none, first factory method. And don't check for dups, if we must,\n         * can start checking for them later on.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_405",
        "snippet": "int PROBE_END_LINE_405 = 405;\nAnnotatedMember m = pojoproperty_builder1_expr21_line_405;",
        "begin_line": 507,
        "end_line": 508,
        "comment": "        /* Hmmh. Checking for constructor parameters is trickier; for one,\n         * we must allow creator and factory method annotations.\n         * If this is the case, constructor parameter has the precedence.\n         * \n         * So, for now, just try finding the first constructor parameter;\n         * if none, first factory method. And don't check for dups, if we must,\n         * can start checking for them later on.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_406",
        "snippet": "int PROBE_START_LINE_406 = 411;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMember v_m_3326_line_406 = m;",
        "begin_line": 509,
        "end_line": 510,
        "comment": "        /* Hmmh. Checking for constructor parameters is trickier; for one,\n         * we must allow creator and factory method annotations.\n         * If this is the case, constructor parameter has the precedence.\n         * \n         * So, for now, just try finding the first constructor parameter;\n         * if none, first factory method. And don't check for dups, if we must,\n         * can start checking for them later on.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_407",
        "snippet": "int PROBE_END_LINE_407 = 407;\nm = pojoproperty_builder1_expr23_line_407;",
        "begin_line": 516,
        "end_line": 517,
        "comment": "        /* Hmmh. Checking for constructor parameters is trickier; for one,\n         * we must allow creator and factory method annotations.\n         * If this is the case, constructor parameter has the precedence.\n         * \n         * So, for now, just try finding the first constructor parameter;\n         * if none, first factory method. And don't check for dups, if we must,\n         * can start checking for them later on.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_408",
        "snippet": "int PROBE_START_LINE_408 = 410;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMember v_m_3326_line_408 = m;",
        "begin_line": 518,
        "end_line": 519,
        "comment": "        /* Hmmh. Checking for constructor parameters is trickier; for one,\n         * we must allow creator and factory method annotations.\n         * If this is the case, constructor parameter has the precedence.\n         * \n         * So, for now, just try finding the first constructor parameter;\n         * if none, first factory method. And don't check for dups, if we must,\n         * can start checking for them later on.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_409",
        "snippet": "int PROBE_END_LINE_409 = 409;\nm = pojoproperty_builder1_expr25_line_409;",
        "begin_line": 525,
        "end_line": 526,
        "comment": "        /* Hmmh. Checking for constructor parameters is trickier; for one,\n         * we must allow creator and factory method annotations.\n         * If this is the case, constructor parameter has the precedence.\n         * \n         * So, for now, just try finding the first constructor parameter;\n         * if none, first factory method. And don't check for dups, if we must,\n         * can start checking for them later on.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_417",
        "snippet": "int PROBE_START_LINE_417 = 417;\nAnnotatedMember pojoproperty_builder1_expr26_line_417 = getSetter();",
        "begin_line": 537,
        "end_line": 538,
        "comment": "        /* Hmmh. Checking for constructor parameters is trickier; for one,\n         * we must allow creator and factory method annotations.\n         * If this is the case, constructor parameter has the precedence.\n         * \n         * So, for now, just try finding the first constructor parameter;\n         * if none, first factory method. And don't check for dups, if we must,\n         * can start checking for them later on.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean pojoproperty_builder1_expr27_line_418",
        "snippet": "boolean pojoproperty_builder1_expr27_line_418 = v_m_3327_line_418 == null;\nint PROBE_END_LINE_418 = 420;",
        "begin_line": 543,
        "end_line": 544,
        "comment": "        /* Hmmh. Checking for constructor parameters is trickier; for one,\n         * we must allow creator and factory method annotations.\n         * If this is the case, constructor parameter has the precedence.\n         * \n         * So, for now, just try finding the first constructor parameter;\n         * if none, first factory method. And don't check for dups, if we must,\n         * can start checking for them later on.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_419",
        "snippet": "int PROBE_START_LINE_419 = 419;\ncom.fasterxml.jackson.databind.introspect.AnnotatedField pojoproperty_builder1_expr28_line_419 = getField();",
        "begin_line": 546,
        "end_line": 547,
        "comment": "        /* Hmmh. Checking for constructor parameters is trickier; for one,\n         * we must allow creator and factory method annotations.\n         * If this is the case, constructor parameter has the precedence.\n         * \n         * So, for now, just try finding the first constructor parameter;\n         * if none, first factory method. And don't check for dups, if we must,\n         * can start checking for them later on.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_419",
        "snippet": "int PROBE_END_LINE_419 = 419;\nm = pojoproperty_builder1_expr28_line_419;",
        "begin_line": 548,
        "end_line": 549,
        "comment": "        /* Hmmh. Checking for constructor parameters is trickier; for one,\n         * we must allow creator and factory method annotations.\n         * If this is the case, constructor parameter has the precedence.\n         * \n         * So, for now, just try finding the first constructor parameter;\n         * if none, first factory method. And don't check for dups, if we must,\n         * can start checking for them later on.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_421",
        "snippet": "int PROBE_START_LINE_421 = 421;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMember v_m_3327_line_421 = m;",
        "begin_line": 551,
        "end_line": 552,
        "comment": "        /* Hmmh. Checking for constructor parameters is trickier; for one,\n         * we must allow creator and factory method annotations.\n         * If this is the case, constructor parameter has the precedence.\n         * \n         * So, for now, just try finding the first constructor parameter;\n         * if none, first factory method. And don't check for dups, if we must,\n         * can start checking for them later on.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_495",
        "snippet": "int PROBE_START_LINE_495 = 495;\nBoolean pojoproperty_builder1_expr36_line_495 = _findRequired();",
        "begin_line": 649,
        "end_line": 650,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_495",
        "snippet": "int PROBE_END_LINE_495 = 495;\nfinal Boolean b = pojoproperty_builder1_expr36_line_495;",
        "begin_line": 651,
        "end_line": 652,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_496",
        "snippet": "int PROBE_START_LINE_496 = 496;\nString pojoproperty_builder1_expr37_line_496 = _findDescription();",
        "begin_line": 653,
        "end_line": 654,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean pojoproperty_builder1_expr44_line_499",
        "snippet": "boolean pojoproperty_builder1_expr44_line_499 = true;\nif (pojoproperty_builder1_expr41_line_499) {\nString v_def_3336_line_499 = def;",
        "begin_line": 675,
        "end_line": 677,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_499",
        "snippet": "int PROBE_END_LINE_499 = 502;\nif (pojoproperty_builder1_expr40_line_499) {\nint PROBE_START_LINE_500 = 501;",
        "begin_line": 682,
        "end_line": 684,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_507",
        "snippet": "int PROBE_START_LINE_507 = 512;\nBoolean pojoproperty_builder1_expr49_line_507 = fromMemberAnnotations(new WithMember<Boolean>() {\n@Override\npublic Boolean withMember(AnnotatedMember member) {\ncom.fasterxml.jackson.databind.AnnotationIntrospector f__annotation_introspector_3307_line_510 = _annotationIntrospector;",
        "begin_line": 702,
        "end_line": 706,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_516",
        "snippet": "int PROBE_START_LINE_516 = 521;\nString pojoproperty_builder1_expr52_line_516 = fromMemberAnnotations(new WithMember<String>() {\n@Override\npublic String withMember(AnnotatedMember member) {\ncom.fasterxml.jackson.databind.AnnotationIntrospector f__annotation_introspector_3307_line_519 = _annotationIntrospector;",
        "begin_line": 718,
        "end_line": 722,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_525",
        "snippet": "int PROBE_START_LINE_525 = 530;\nInteger pojoproperty_builder1_expr55_line_525 = fromMemberAnnotations(new WithMember<Integer>() {\n@Override\npublic Integer withMember(AnnotatedMember member) {\ncom.fasterxml.jackson.databind.AnnotationIntrospector f__annotation_introspector_3307_line_528 = _annotationIntrospector;",
        "begin_line": 734,
        "end_line": 738,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "ObjectIdInfo info",
        "snippet": "ObjectIdInfo info = pojoproperty_builder1_expr63_line_547;\ncom.fasterxml.jackson.databind.introspect.ObjectIdInfo v_info_3342_line_548 = info;",
        "begin_line": 776,
        "end_line": 777,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "AnnotatedMember a",
        "snippet": "AnnotatedMember a = getAccessor();\n// 16-Apr-2106, tatu: Let's include per-type default inclusion too\n// 17-Aug-2016, tatu: Do NOT include global, or per-type defaults, because\n//    not all of this information (specifically, enclosing type's settings)\n//    is available here\nJsonInclude.Value v = (_annotationIntrospector == null) ?\nnull : _annotationIntrospector.findPropertyInclusion(a);",
        "begin_line": 792,
        "end_line": 798,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean p_expl_name_3347_line_584",
        "snippet": "boolean p_expl_name_3347_line_584 = explName;\nboolean p_visible_3348_line_584 = visible;",
        "begin_line": 830,
        "end_line": 831,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_676",
        "snippet": "int PROBE_END_LINE_676 = 676;\n_ctorParameters = pojoproperty_builder1_expr72_line_676;",
        "begin_line": 948,
        "end_line": 949,
        "comment": "             remove getters, definitely, but also fields if serializing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_678",
        "snippet": "int PROBE_END_LINE_678 = 681;\nif (pojoproperty_builder1_expr73_line_678) {\nint PROBE_START_LINE_679 = 679;",
        "begin_line": 962,
        "end_line": 964,
        "comment": "             remove getters, definitely, but also fields if serializing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_702",
        "snippet": "int PROBE_START_LINE_702 = 702;\ncom.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedField> f__fields_3319_line_702 = _fields;",
        "begin_line": 1000,
        "end_line": 1001,
        "comment": "    \n     * Method called to trim unnecessary entries, such as implicit\n     * getter if there is an explict one available. This is important\n     * for later stages, to avoid unnecessary conflicts.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_702",
        "snippet": "int PROBE_END_LINE_702 = 702;\n_fields = pojoproperty_builder1_expr79_line_702;",
        "begin_line": 1004,
        "end_line": 1005,
        "comment": "    \n     * Method called to trim unnecessary entries, such as implicit\n     * getter if there is an explict one available. This is important\n     * for later stages, to avoid unnecessary conflicts.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_704",
        "snippet": "int PROBE_START_LINE_704 = 704;\ncom.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedMethod> f__setters_3318_line_704 = _setters;",
        "begin_line": 1012,
        "end_line": 1013,
        "comment": "    \n     * Method called to trim unnecessary entries, such as implicit\n     * getter if there is an explict one available. This is important\n     * for later stages, to avoid unnecessary conflicts.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_704",
        "snippet": "int PROBE_END_LINE_704 = 704;\n_setters = pojoproperty_builder1_expr81_line_704;",
        "begin_line": 1016,
        "end_line": 1017,
        "comment": "    \n     * Method called to trim unnecessary entries, such as implicit\n     * getter if there is an explict one available. This is important\n     * for later stages, to avoid unnecessary conflicts.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_705",
        "snippet": "int PROBE_END_LINE_705 = 705;\n_ctorParameters = pojoproperty_builder1_expr82_line_705;",
        "begin_line": 1022,
        "end_line": 1023,
        "comment": "    \n     * Method called to trim unnecessary entries, such as implicit\n     * getter if there is an explict one available. This is important\n     * for later stages, to avoid unnecessary conflicts.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_723",
        "snippet": "int PROBE_START_LINE_723 = 729;\ncom.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedMethod> f__setters_3318_line_723 = _setters;",
        "begin_line": 1049,
        "end_line": 1050,
        "comment": "    \n     * Method called to trim unnecessary entries, such as implicit\n     * getter if there is an explict one available. This is important\n     * for later stages, to avoid unnecessary conflicts.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_736",
        "snippet": "int PROBE_START_LINE_736 = 736;\ncom.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<? extends com.fasterxml.jackson.databind.introspect.AnnotatedMember>[] p_nodes_3374_line_736 = nodes;",
        "begin_line": 1067,
        "end_line": 1068,
        "comment": "    \n     * Method called to trim unnecessary entries, such as implicit\n     * getter if there is an explict one available. This is important\n     * for later stages, to avoid unnecessary conflicts.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "AnnotationMap ann",
        "snippet": "AnnotationMap ann = pojoproperty_builder1_expr89_line_736;\nwhile (true) {\nint PROBE_START_LINE_738 = 738;",
        "begin_line": 1073,
        "end_line": 1075,
        "comment": "    \n     * Method called to trim unnecessary entries, such as implicit\n     * getter if there is an explict one available. This is important\n     * for later stages, to avoid unnecessary conflicts.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_772",
        "snippet": "int PROBE_START_LINE_772 = 773;\ncom.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T> p_node_3380_line_773 = (com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>) (node);",
        "begin_line": 1137,
        "end_line": 1138,
        "comment": "    \n     * Helper method to handle recursive merging of annotations within accessor class,\n     * to ensure no annotations are accidentally dropped within chain when non-visible\n     * and secondary accessors are pruned later on.\n     *<p>\n     * See [databind#868] for more information.\n     *\n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "T f_value_3383_line_773",
        "snippet": "T f_value_3383_line_773 = p_node_3380_line_773.value;\ncom.fasterxml.jackson.databind.introspect.AnnotationMap p_ann_3381_line_773 = ann;",
        "begin_line": 1139,
        "end_line": 1140,
        "comment": "    \n     * Helper method to handle recursive merging of annotations within accessor class,\n     * to ensure no annotations are accidentally dropped within chain when non-visible\n     * and secondary accessors are pruned later on.\n     *<p>\n     * See [databind#868] for more information.\n     *\n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_777",
        "snippet": "int PROBE_START_LINE_777 = 777;\ncom.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T> p_node_3380_line_777 = (com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>) (node);",
        "begin_line": 1154,
        "end_line": 1155,
        "comment": "    \n     * Helper method to handle recursive merging of annotations within accessor class,\n     * to ensure no annotations are accidentally dropped within chain when non-visible\n     * and secondary accessors are pruned later on.\n     *<p>\n     * See [databind#868] for more information.\n     *\n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_790",
        "snippet": "int PROBE_START_LINE_790 = 792;\ncom.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T> p_node_3386_line_790 = (com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>) (node);",
        "begin_line": 1173,
        "end_line": 1174,
        "comment": "    \n     * Helper method to handle recursive merging of annotations within accessor class,\n     * to ensure no annotations are accidentally dropped within chain when non-visible\n     * and secondary accessors are pruned later on.\n     *<p>\n     * See [databind#868] for more information.\n     *\n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_798",
        "snippet": "int PROBE_START_LINE_798 = 800;\ncom.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T> p_node_3387_line_798 = (com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<T>) (node);",
        "begin_line": 1193,
        "end_line": 1194,
        "comment": "    \n     * Helper method to handle recursive merging of annotations within accessor class,\n     * to ensure no annotations are accidentally dropped within chain when non-visible\n     * and secondary accessors are pruned later on.\n     *<p>\n     * See [databind#868] for more information.\n     *\n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_801",
        "snippet": "int PROBE_END_LINE_801 = 801;\nreturn pojoproperty_builder1_expr103_line_801;",
        "begin_line": 1207,
        "end_line": 1208,
        "comment": "    \n     * Helper method to handle recursive merging of annotations within accessor class,\n     * to ensure no annotations are accidentally dropped within chain when non-visible\n     * and secondary accessors are pruned later on.\n     *<p>\n     * See [databind#868] for more information.\n     *\n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
        "signature": "int PROBE_START_LINE_44",
        "snippet": "int PROBE_START_LINE_44 = 44;\ncom.fasterxml.jackson.annotation.JsonTypeInfo.As p_inclusion_3561_line_44 = inclusion;",
        "begin_line": 45,
        "end_line": 46,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
        "signature": "int PROBE_END_LINE_44",
        "snippet": "int PROBE_END_LINE_44 = 44;\n_inclusion = p_inclusion_3561_line_44;",
        "begin_line": 47,
        "end_line": 48,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
        "signature": "int PROBE_START_LINE_49",
        "snippet": "int PROBE_START_LINE_49 = 49;\ncom.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer p_src_3563_line_49 = src;",
        "begin_line": 53,
        "end_line": 54,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "signature": "int PROBE_START_LINE_35",
        "snippet": "int PROBE_START_LINE_35 = 35;\nint p_initial_entries_4784_line_35 = initialEntries;",
        "begin_line": 34,
        "end_line": 35,
        "comment": "\n * Helper for simple bounded maps used for reusing lookup values.\n *<p>\n * Note that serialization behavior is such that contents are NOT serialized,\n * on assumption that all use cases are for caching where persistence\n * does not make sense. The only thing serialized is the cache size of Map.\n *<p>\n * NOTE: since version 2.4.2, this is <b>NOT</b> an LRU-based at all; reason\n * being that it is not possible to use JDK components that do LRU _AND_ perform\n * well wrt synchronization on multi-core systems. So we choose efficient synchronization\n * over potentially more efficient handling of entries.\n *<p>\n * And yes, there are efficient LRU implementations such as\n * <a href=\"https:code.google.com/p/concurrentlinkedhashmap/\">concurrentlinkedhashmap</a>;\n * but at this point we really try to keep external deps to minimum. But perhaps\n * a shaded variant may be used one day.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "signature": "int PROBE_END_LINE_35",
        "snippet": "int PROBE_END_LINE_35 = 35;\n// We'll use concurrency level of 4, seems reasonable\n_map = new ConcurrentHashMap<K,V>(p_initial_entries_4784_line_35, 0.8f, 4);",
        "begin_line": 36,
        "end_line": 38,
        "comment": "\n * Helper for simple bounded maps used for reusing lookup values.\n *<p>\n * Note that serialization behavior is such that contents are NOT serialized,\n * on assumption that all use cases are for caching where persistence\n * does not make sense. The only thing serialized is the cache size of Map.\n *<p>\n * NOTE: since version 2.4.2, this is <b>NOT</b> an LRU-based at all; reason\n * being that it is not possible to use JDK components that do LRU _AND_ perform\n * well wrt synchronization on multi-core systems. So we choose efficient synchronization\n * over potentially more efficient handling of entries.\n *<p>\n * And yes, there are efficient LRU implementations such as\n * <a href=\"https:code.google.com/p/concurrentlinkedhashmap/\">concurrentlinkedhashmap</a>;\n * but at this point we really try to keep external deps to minimum. But perhaps\n * a shaded variant may be used one day.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "signature": "int PROBE_START_LINE_36",
        "snippet": "int PROBE_START_LINE_36 = 36;\nint p_max_entries_4785_line_36 = maxEntries;",
        "begin_line": 39,
        "end_line": 40,
        "comment": "\t\t We'll use concurrency level of 4, seems reasonable"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "signature": "int lrumap1_expr5_line_40",
        "snippet": "int lrumap1_expr5_line_40 = f__map_4786_line_40.size();\nint f__max_entries_4787_line_40 = _maxEntries;",
        "begin_line": 48,
        "end_line": 49,
        "comment": "\t\t We'll use concurrency level of 4, seems reasonable"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "signature": "V lrumap1_expr6_line_48",
        "snippet": "V lrumap1_expr6_line_48 = f__map_4786_line_48.put(p_key_4788_line_48, p_value_4789_line_48);\nint PROBE_END_LINE_48 = 48;",
        "begin_line": 64,
        "end_line": 65,
        "comment": "             double-locking, yes, but safe here; trying to avoid \"clear storms\""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
        "signature": "int PROBE_START_LINE_37",
        "snippet": "int PROBE_START_LINE_37 = 37;\ncom.fasterxml.jackson.databind.introspect.TypeResolutionContext p_ctxt_2816_line_37 = ctxt;",
        "begin_line": 37,
        "end_line": 38,
        "comment": "     no need to persist"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
        "signature": "int PROBE_END_LINE_37",
        "snippet": "int PROBE_END_LINE_37 = 37;\n_typeContext = p_ctxt_2816_line_37;",
        "begin_line": 39,
        "end_line": 40,
        "comment": "     no need to persist"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
        "signature": "int PROBE_END_LINE_65",
        "snippet": "int PROBE_END_LINE_65 = 65;\nreturn f__type_context_2796_line_65;",
        "begin_line": 81,
        "end_line": 82,
        "comment": "    \n     * Accessor for {@link TypeResolutionContext} that is used for resolving\n     * full generic type of this member.\n     * \n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
        "signature": "boolean annotated_member1_expr2_line_70",
        "snippet": "boolean annotated_member1_expr2_line_70 = f__annotations_2818_line_70 == null;\nint PROBE_END_LINE_70 = 72;",
        "begin_line": 89,
        "end_line": 90,
        "comment": "    \n     * Accessor for {@link TypeResolutionContext} that is used for resolving\n     * full generic type of this member.\n     * \n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.BeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/BeanDescription.java",
        "signature": "int PROBE_START_LINE_37",
        "snippet": "int PROBE_START_LINE_37 = 37;\ncom.fasterxml.jackson.databind.JavaType p_type_117_line_37 = type;",
        "begin_line": 37,
        "end_line": 38,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.BeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/BeanDescription.java",
        "signature": "int PROBE_END_LINE_50",
        "snippet": "int PROBE_END_LINE_50 = 50;\nreturn f__type_118_line_50; }\n\npublic Class<?> getBeanClass() { int PROBE_START_LINE_52 = 52;",
        "begin_line": 55,
        "end_line": 58,
        "comment": "    \n     * Method for accessing declared type of bean being introspected,\n     * including full generic type information (from declaration)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
        "signature": "int PROBE_START_LINE_36",
        "snippet": "int PROBE_START_LINE_36 = 36;\ncom.fasterxml.jackson.databind.PropertyMetadata p_md_3028_line_36 = md;",
        "begin_line": 37,
        "end_line": 38,
        "comment": "    \n     * Lazily accessed value for per-property format override definition.\n     * \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
        "signature": "boolean concrete_bean_property_base1_expr3_line_36",
        "snippet": "boolean concrete_bean_property_base1_expr3_line_36 = p_md_3028_line_36 == null;\nboolean concrete_bean_property_base1_expr2_line_36 = (concrete_bean_property_base1_expr3_line_36);",
        "begin_line": 39,
        "end_line": 40,
        "comment": "    \n     * Lazily accessed value for per-property format override definition.\n     * \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
        "signature": "AnnotatedMember member",
        "snippet": "AnnotatedMember member = getMember();\nif (member != null) {\nf = intr.findFormat(member);",
        "begin_line": 79,
        "end_line": 81,
        "comment": "    \n     * Lazily accessed value for per-property format override definition.\n     * \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
        "signature": "int PROBE_START_LINE_36",
        "snippet": "int PROBE_START_LINE_36 = 36;\ncom.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver p_overrides_3429_line_36 = overrides;",
        "begin_line": 36,
        "end_line": 37,
        "comment": "    \n     * Simple mix-in targets defined locally.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
        "signature": "int PROBE_START_LINE_92",
        "snippet": "int PROBE_START_LINE_92 = 92;\ncom.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver f__overrides_3430_line_92 = _overrides;",
        "begin_line": 95,
        "end_line": 96,
        "comment": "    \n     * Mutant factory method that constructs a new instance that has no locally\n     * defined mix-in/target mappings.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_START_LINE_30",
        "snippet": "int PROBE_START_LINE_30 = 30;\nToStringSerializer f_instance_3718_line_30 = ToStringSerializer.instance;",
        "begin_line": 32,
        "end_line": 33,
        "comment": "    \n     * Method called by {@link BasicSerializerFactory} to access\n     * all serializers this class provides.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_30",
        "snippet": "int PROBE_END_LINE_30 = 30;\n// First things that 'toString()' can handle\nfinal ToStringSerializer sls = f_instance_3718_line_30;",
        "begin_line": 34,
        "end_line": 36,
        "comment": "    \n     * Method called by {@link BasicSerializerFactory} to access\n     * all serializers this class provides.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_START_LINE_32",
        "snippet": "int PROBE_START_LINE_32 = 32;\nHashMap<Class<?>, Object> v_sers_4112_line_32 = (HashMap<Class<?>, Object>) (sers);",
        "begin_line": 38,
        "end_line": 39,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_32",
        "snippet": "int PROBE_END_LINE_32 = 32;\nv_sers_4112_line_32.put(java.net.URL.class, v_sls_4113_line_32);",
        "begin_line": 41,
        "end_line": 42,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_START_LINE_33",
        "snippet": "int PROBE_START_LINE_33 = 33;\nHashMap<Class<?>, Object> v_sers_4112_line_33 = (HashMap<Class<?>, Object>) (sers);",
        "begin_line": 43,
        "end_line": 44,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_33",
        "snippet": "int PROBE_END_LINE_33 = 33;\nv_sers_4112_line_33.put(java.net.URI.class, v_sls_4113_line_33);",
        "begin_line": 46,
        "end_line": 47,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_START_LINE_35",
        "snippet": "int PROBE_START_LINE_35 = 35;\nHashMap<Class<?>, Object> v_sers_4112_line_35 = (HashMap<Class<?>, Object>) (sers);",
        "begin_line": 49,
        "end_line": 50,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_36",
        "snippet": "int PROBE_END_LINE_36 = 36;\nv_sers_4112_line_36.put(UUID.class, new UUIDSerializer());",
        "begin_line": 56,
        "end_line": 57,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_37",
        "snippet": "int PROBE_END_LINE_37 = 37;\nv_sers_4112_line_37.put(java.util.regex.Pattern.class, v_sls_4113_line_37);",
        "begin_line": 61,
        "end_line": 62,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_START_LINE_38",
        "snippet": "int PROBE_START_LINE_38 = 38;\nHashMap<Class<?>, Object> v_sers_4112_line_38 = (HashMap<Class<?>, Object>) (sers);",
        "begin_line": 63,
        "end_line": 64,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_38",
        "snippet": "int PROBE_END_LINE_38 = 38;\nv_sers_4112_line_38.put(Locale.class, v_sls_4113_line_38);",
        "begin_line": 66,
        "end_line": 67,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "signature": "int PROBE_START_LINE_49",
        "snippet": "int PROBE_START_LINE_49 = 50;\ncom.fasterxml.jackson.databind.ser.Serializers[] p_all_additional_serializers_1306_line_49 = allAdditionalSerializers;",
        "begin_line": 51,
        "end_line": 52,
        "comment": "    \n     * List of modifiers that can change the way {@link BeanSerializer} instances\n     * are configured and constructed.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "signature": "boolean serializer_factory_config1_expr6_line_49",
        "snippet": "boolean serializer_factory_config1_expr6_line_49 = p_all_additional_serializers_1306_line_49 == null;\nboolean serializer_factory_config1_expr5_line_49 = (serializer_factory_config1_expr6_line_49);",
        "begin_line": 53,
        "end_line": 54,
        "comment": "    \n     * List of modifiers that can change the way {@link BeanSerializer} instances\n     * are configured and constructed.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
        "signature": "int PROBE_START_LINE_32",
        "snippet": "int PROBE_START_LINE_32 = 32;\ncom.fasterxml.jackson.databind.introspect.AnnotationMap[] p_param_annotations_2873_line_32 = paramAnnotations;",
        "begin_line": 32,
        "end_line": 33,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
        "signature": "boolean annotated_with_params1_expr3_line_77",
        "snippet": "boolean annotated_with_params1_expr3_line_77 = f__param_annotations_2874_line_77 != null;\nint PROBE_END_LINE_77 = 81;",
        "begin_line": 85,
        "end_line": 86,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "Set<String> s",
        "snippet": "Set<String> s = new HashSet<String>();\nint PROBE_START_LINE_31 = 31;",
        "begin_line": 28,
        "end_line": 29,
        "comment": "    \n     * Set of well-known \"nasty classes\", deserialization of which is considered dangerous\n     * and should (and is) prevented by default.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "Set<String> v_s_3641_line_31",
        "snippet": "Set<String> v_s_3641_line_31 = s;\nint PROBE_END_LINE_31 = 31;",
        "begin_line": 30,
        "end_line": 31,
        "comment": "    \n     * Set of well-known \"nasty classes\", deserialization of which is considered dangerous\n     * and should (and is) prevented by default.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_32",
        "snippet": "int PROBE_START_LINE_32 = 32;\nSet<String> v_s_3641_line_32 = s;",
        "begin_line": 35,
        "end_line": 36,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_32",
        "snippet": "int PROBE_END_LINE_32 = 32;\nv_s_3641_line_32.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");",
        "begin_line": 37,
        "end_line": 38,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_33",
        "snippet": "int PROBE_START_LINE_33 = 33;\nSet<String> v_s_3641_line_33 = s;",
        "begin_line": 39,
        "end_line": 40,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_33",
        "snippet": "int PROBE_END_LINE_33 = 33;\nv_s_3641_line_33.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");",
        "begin_line": 41,
        "end_line": 42,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_34",
        "snippet": "int PROBE_START_LINE_34 = 34;\nSet<String> v_s_3641_line_34 = s;",
        "begin_line": 43,
        "end_line": 44,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_35",
        "snippet": "int PROBE_START_LINE_35 = 35;\nSet<String> v_s_3641_line_35 = s;",
        "begin_line": 47,
        "end_line": 48,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_35",
        "snippet": "int PROBE_END_LINE_35 = 35;\nv_s_3641_line_35.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");",
        "begin_line": 49,
        "end_line": 50,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_36",
        "snippet": "int PROBE_START_LINE_36 = 36;\nSet<String> v_s_3641_line_36 = s;",
        "begin_line": 51,
        "end_line": 52,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_36",
        "snippet": "int PROBE_END_LINE_36 = 36;\nv_s_3641_line_36.add(\"org.codehaus.groovy.runtime.MethodClosure\");",
        "begin_line": 53,
        "end_line": 54,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_38",
        "snippet": "int PROBE_START_LINE_38 = 38;\nSet<String> v_s_3641_line_38 = s;",
        "begin_line": 59,
        "end_line": 60,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_38",
        "snippet": "int PROBE_END_LINE_38 = 38;\nv_s_3641_line_38.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");",
        "begin_line": 61,
        "end_line": 62,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_39",
        "snippet": "int PROBE_START_LINE_39 = 39;\nSet<String> v_s_3641_line_39 = s;",
        "begin_line": 63,
        "end_line": 64,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_39",
        "snippet": "int PROBE_END_LINE_39 = 39;\nv_s_3641_line_39.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\");",
        "begin_line": 65,
        "end_line": 66,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_41",
        "snippet": "int PROBE_END_LINE_41 = 41;\n// [databind#1680]: may or may not be problem, take no chance\nv_s_3641_line_41.add(\"com.sun.rowset.JdbcRowSetImpl\");",
        "begin_line": 69,
        "end_line": 71,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_43",
        "snippet": "int PROBE_START_LINE_43 = 43;\nSet<String> v_s_3641_line_43 = s;",
        "begin_line": 72,
        "end_line": 73,
        "comment": "\t\t [databind#1680]: may or may not be problem, take no chance"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_43",
        "snippet": "int PROBE_END_LINE_43 = 43;\n// [databind#1737]; JDK provided\nv_s_3641_line_43.add(\"java.util.logging.FileHandler\");",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\t\t [databind#1680]: may or may not be problem, take no chance"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_47",
        "snippet": "int PROBE_END_LINE_47 = 47;\n// [databind#1737]; 3rd party\n//s.add(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\"); // deprecated by [databind#1855]\nv_s_3641_line_47.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");",
        "begin_line": 83,
        "end_line": 86,
        "comment": "\t\t [databind#1737]; JDK provided"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_48",
        "snippet": "int PROBE_START_LINE_48 = 48;\nSet<String> v_s_3641_line_48 = s;",
        "begin_line": 87,
        "end_line": 88,
        "comment": "s.add(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\");  deprecated by [databind#1855]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_49",
        "snippet": "int PROBE_END_LINE_49 = 49;\nv_s_3641_line_49.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");",
        "begin_line": 93,
        "end_line": 94,
        "comment": "s.add(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\");  deprecated by [databind#1855]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_149",
        "snippet": "int PROBE_START_LINE_149 = 149;\ncom.fasterxml.jackson.databind.JavaType p_type_2648_line_149 = type;",
        "begin_line": 157,
        "end_line": 158,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_149",
        "snippet": "int PROBE_END_LINE_149 = 149;\n_type = p_type_2648_line_149;",
        "begin_line": 159,
        "end_line": 160,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_156",
        "snippet": "int PROBE_START_LINE_156 = 157;\ncom.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver f__mix_in_resolver_2661_line_156 = _mixInResolver;",
        "begin_line": 185,
        "end_line": 186,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "boolean annotated_class1_expr6_line_156",
        "snippet": "boolean annotated_class1_expr6_line_156 = f__mix_in_resolver_2661_line_156 == null;\nboolean annotated_class1_expr4_line_156 = (annotated_class1_expr6_line_156);",
        "begin_line": 187,
        "end_line": 188,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_202",
        "snippet": "int PROBE_END_LINE_202 = 202;\nClass<?> raw = annotated_class1_expr20_line_202;",
        "begin_line": 265,
        "end_line": 266,
        "comment": "    \n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_246",
        "snippet": "int PROBE_START_LINE_246 = 246;\ncom.fasterxml.jackson.databind.type.TypeFactory f__type_factory_2660_line_246 = _typeFactory;",
        "begin_line": 324,
        "end_line": 325,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_246",
        "snippet": "int PROBE_END_LINE_246 = 246;\nreturn annotated_class1_expr29_line_246;",
        "begin_line": 330,
        "end_line": 331,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_281",
        "snippet": "int PROBE_START_LINE_281 = 281;\nClass<?> f__class_2656_line_281 = _class;",
        "begin_line": 371,
        "end_line": 372,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_281",
        "snippet": "int PROBE_END_LINE_281 = 281;\nreturn f__class_2656_line_281;",
        "begin_line": 373,
        "end_line": 374,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_306",
        "snippet": "int PROBE_END_LINE_306 = 306;\nreturn f__class_annotations_2663_line_306;",
        "begin_line": 401,
        "end_line": 402,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "boolean annotated_class1_expr31_line_315",
        "snippet": "boolean annotated_class1_expr31_line_315 = !f__creators_resolved_2647_line_315;\nint PROBE_END_LINE_315 = 317;",
        "begin_line": 413,
        "end_line": 414,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_318",
        "snippet": "int PROBE_START_LINE_318 = 318;\ncom.fasterxml.jackson.databind.introspect.AnnotatedConstructor f__default_constructor_2685_line_318 = _defaultConstructor;",
        "begin_line": 418,
        "end_line": 419,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_323",
        "snippet": "int PROBE_START_LINE_323 = 325;\nboolean f__creators_resolved_2647_line_323 = _creatorsResolved;",
        "begin_line": 426,
        "end_line": 427,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "boolean annotated_class1_expr32_line_323",
        "snippet": "boolean annotated_class1_expr32_line_323 = !f__creators_resolved_2647_line_323;\nint PROBE_END_LINE_323 = 325;",
        "begin_line": 428,
        "end_line": 429,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_339",
        "snippet": "int PROBE_START_LINE_339 = 341;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMethodMap f__member_methods_2688_line_339 = _memberMethods;",
        "begin_line": 456,
        "end_line": 457,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "boolean annotated_class1_expr36_line_339",
        "snippet": "boolean annotated_class1_expr36_line_339 = f__member_methods_2688_line_339 == null;\nint PROBE_END_LINE_339 = 341;",
        "begin_line": 458,
        "end_line": 459,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_373",
        "snippet": "int PROBE_START_LINE_373 = 373;\nList<com.fasterxml.jackson.databind.introspect.AnnotatedField> f__fields_2691_line_373 = _fields;",
        "begin_line": 501,
        "end_line": 502,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_373",
        "snippet": "int PROBE_END_LINE_373 = 373;\nreturn f__fields_2691_line_373;",
        "begin_line": 503,
        "end_line": 504,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_381",
        "snippet": "int PROBE_START_LINE_381 = 381;\nBoolean f__non_static_inner_class_2693_line_381 = _nonStaticInnerClass;",
        "begin_line": 512,
        "end_line": 513,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_381",
        "snippet": "int PROBE_END_LINE_381 = 381;\nBoolean B = f__non_static_inner_class_2693_line_381;",
        "begin_line": 514,
        "end_line": 515,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_382",
        "snippet": "int PROBE_START_LINE_382 = 384;\nBoolean v_b_2692_line_382 = B;",
        "begin_line": 516,
        "end_line": 517,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_383",
        "snippet": "int PROBE_START_LINE_383 = 383;\nClass<?> f__class_2656_line_383 = _class;",
        "begin_line": 521,
        "end_line": 522,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "boolean annotated_class1_expr42_line_383",
        "snippet": "boolean annotated_class1_expr42_line_383 = ClassUtil.isNonStaticInnerClass(f__class_2656_line_383);\nint PROBE_END_LINE_383 = 383;",
        "begin_line": 523,
        "end_line": 524,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "boolean annotated_class1_expr43_line_385",
        "snippet": "boolean annotated_class1_expr43_line_385 = v_b_2692_line_385.booleanValue();\nint PROBE_END_LINE_385 = 385;",
        "begin_line": 529,
        "end_line": 530,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "AnnotationMap ca",
        "snippet": "AnnotationMap ca = new AnnotationMap();\nint PROBE_START_LINE_403 = 427;",
        "begin_line": 547,
        "end_line": 548,
        "comment": "    \n     * Initialization method that will recursively collect Jackson\n     * annotations for this class and all super classes and\n     * interfaces.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_413",
        "snippet": "int PROBE_END_LINE_413 = 418;\n// and then from super types\nfor (JavaType type : f__super_types_2658_line_413) {\nint PROBE_START_LINE_415 = 415;",
        "begin_line": 571,
        "end_line": 574,
        "comment": "\t\t\t first, annotations from the class itself:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_426",
        "snippet": "int PROBE_END_LINE_426 = 426;\n/* and finally... any annotations there might be for plain\n* old Object.class: separate because for all other purposes\n* it is just ignored (not included in super types)\n*/\n/* 12-Jul-2009, tatu: Should this be done for interfaces too?\n*   For now, yes, seems useful for some cases, and not harmful for any?\n*/\n_addClassMixIns(v_ca_2694_line_426, Object.class);",
        "begin_line": 588,
        "end_line": 596,
        "comment": "\t\t\t\t and mix mix-in annotations in-between"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_428",
        "snippet": "int PROBE_START_LINE_428 = 428;\ncom.fasterxml.jackson.databind.introspect.AnnotationMap v_ca_2694_line_428 = ca;",
        "begin_line": 598,
        "end_line": 599,
        "comment": "            /* 12-Jul-2009, tatu: Should this be done for interfaces too?\n             *   For now, yes, seems useful for some cases, and not harmful for any?\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_428",
        "snippet": "int PROBE_END_LINE_428 = 428;\nreturn v_ca_2694_line_428;",
        "begin_line": 600,
        "end_line": 601,
        "comment": "            /* 12-Jul-2009, tatu: Should this be done for interfaces too?\n             *   For now, yes, seems useful for some cases, and not harmful for any?\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_452",
        "snippet": "int PROBE_END_LINE_452 = 466;\n// 18-Jun-2016, tatu: Enum constructors will never be useful (unlike\n//    possibly static factory methods); but they can be royal PITA\n//    due to some oddities by JVM; see:\n//    [https://github.com/FasterXML/jackson-module-parameter-names/issues/35]\n//    for more. So, let's just skip them.\nif (annotated_class1_expr55_line_452) {\nint PROBE_START_LINE_453 = 453;",
        "begin_line": 624,
        "end_line": 631,
        "comment": "         Then see which constructors we have"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_453",
        "snippet": "int PROBE_END_LINE_453 = 453;\nClassUtil.Ctor[] declaredCtors = annotated_class1_expr57_line_453;",
        "begin_line": 634,
        "end_line": 635,
        "comment": "            for more. So, let's just skip them."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_454",
        "snippet": "int PROBE_END_LINE_454 = 465;\nfor (ClassUtil.Ctor ctor : v_declared_ctors_2698_line_454) {\nint PROBE_START_LINE_455 = 464;",
        "begin_line": 638,
        "end_line": 640,
        "comment": "            for more. So, let's just skip them."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "boolean annotated_class1_expr75_line_489",
        "snippet": "boolean annotated_class1_expr75_line_489 = f__constructors_2686_line_489 != null;\nint PROBE_END_LINE_489 = 496;",
        "begin_line": 737,
        "end_line": 738,
        "comment": "         AnnotationIntrospector is null if annotations not enabled; if so, can skip:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_492",
        "snippet": "int PROBE_START_LINE_492 = 494;\ncom.fasterxml.jackson.databind.AnnotationIntrospector f__annotation_introspector_2659_line_492 = _annotationIntrospector;",
        "begin_line": 742,
        "end_line": 743,
        "comment": "                 count down to allow safe removal"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_524",
        "snippet": "int PROBE_END_LINE_524 = 526;\nif (annotated_class1_expr92_line_524) {\n_creatorMethods.remove(i);",
        "begin_line": 827,
        "end_line": 829,
        "comment": "                 count down to allow safe removal"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_541",
        "snippet": "int PROBE_START_LINE_541 = 541;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMethodMap annotated_class1_expr95_line_541 = _resolveMemberMethods();",
        "begin_line": 845,
        "end_line": 846,
        "comment": "    \n     * Method for resolving member method information: aggregating all non-static methods\n     * and combining annotations (to implement method-annotation inheritance)\n     * \n     * @param methodFilter Filter used to determine which methods to include\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_541",
        "snippet": "int PROBE_END_LINE_541 = 541;\n_memberMethods = annotated_class1_expr95_line_541;",
        "begin_line": 847,
        "end_line": 848,
        "comment": "    \n     * Method for resolving member method information: aggregating all non-static methods\n     * and combining annotations (to implement method-annotation inheritance)\n     * \n     * @param methodFilter Filter used to determine which methods to include\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "AnnotatedMethodMap memberMethods",
        "snippet": "AnnotatedMethodMap memberMethods = new AnnotatedMethodMap();\nAnnotatedMethodMap mixins = new AnnotatedMethodMap();",
        "begin_line": 853,
        "end_line": 854,
        "comment": "    \n     * Method for resolving member method information: aggregating all non-static methods\n     * and combining annotations (to implement method-annotation inheritance)\n     * \n     * @param methodFilter Filter used to determine which methods to include\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_573",
        "snippet": "int PROBE_START_LINE_573 = 587;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMethodMap v_mixins_2705_line_573 = mixins;",
        "begin_line": 906,
        "end_line": 907,
        "comment": "         14-Feb-2011, tatu: AnnotationIntrospector is null if annotations not enabled; if so, can skip:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_573",
        "snippet": "int PROBE_END_LINE_573 = 587;\nif (annotated_class1_expr105_line_573) {\nIterator<AnnotatedMethod> it = mixins.iterator();",
        "begin_line": 910,
        "end_line": 912,
        "comment": "         14-Feb-2011, tatu: AnnotationIntrospector is null if annotations not enabled; if so, can skip:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_589",
        "snippet": "int PROBE_START_LINE_589 = 589;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMethodMap v_member_methods_2704_line_589 = memberMethods;",
        "begin_line": 927,
        "end_line": 928,
        "comment": "                             Since it's from java.lang.Object, no generics, no need for real type context:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_604",
        "snippet": "int PROBE_START_LINE_604 = 604;\nMap<String, com.fasterxml.jackson.databind.introspect.AnnotatedField> v_found_fields_2708_line_604 = foundFields;",
        "begin_line": 960,
        "end_line": 961,
        "comment": "    \n     * Method that will collect all member (non-static) fields\n     * that are either public, or have at least a single annotation\n     * associated with them.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int annotated_class1_expr114_line_604",
        "snippet": "int annotated_class1_expr114_line_604 = v_found_fields_2708_line_604.size();\nint PROBE_END_LINE_604 = 604;",
        "begin_line": 962,
        "end_line": 963,
        "comment": "    \n     * Method that will collect all member (non-static) fields\n     * that are either public, or have at least a single annotation\n     * associated with them.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_605",
        "snippet": "int PROBE_END_LINE_605 = 605;\nv_f_2709_line_605.addAll(annotated_class1_expr116_line_605);",
        "begin_line": 970,
        "end_line": 971,
        "comment": "    \n     * Method that will collect all member (non-static) fields\n     * that are either public, or have at least a single annotation\n     * associated with them.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_607",
        "snippet": "int PROBE_START_LINE_607 = 607;\nList<com.fasterxml.jackson.databind.introspect.AnnotatedField> v_f_2709_line_607 = f;",
        "begin_line": 973,
        "end_line": 974,
        "comment": "    \n     * Method that will collect all member (non-static) fields\n     * that are either public, or have at least a single annotation\n     * associated with them.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "boolean annotated_class1_expr124_line_640",
        "snippet": "boolean annotated_class1_expr124_line_640 = p_mixin_2717_line_640 == null;\nint PROBE_END_LINE_640 = 642;",
        "begin_line": 1035,
        "end_line": 1036,
        "comment": "    \n     * Helper method for adding any mix-in annotations specified\n     * class might have.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
        "signature": "int PROBE_START_LINE_57",
        "snippet": "int PROBE_START_LINE_57 = 59;\ncom.fasterxml.jackson.annotation.JsonTypeInfo.Id p_id_type_3616_line_57 = idType;",
        "begin_line": 63,
        "end_line": 64,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
        "signature": "boolean std_type_resolver_builder1_expr6_line_107",
        "snippet": "boolean std_type_resolver_builder1_expr6_line_107 = p_base_type_3625_line_107.isPrimitive();\nint PROBE_END_LINE_107 = 109;",
        "begin_line": 133,
        "end_line": 134,
        "comment": "    }"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java",
        "signature": "int PROBE_START_LINE_29",
        "snippet": "int PROBE_START_LINE_29 = 29;\nString p_msg_3957_line_29 = msg;",
        "begin_line": 29,
        "end_line": 30,
        "comment": "\n * Special bogus \"serializer\" that will throw\n * {@link JsonMappingException} if its {@link #serialize}\n * gets invoked. Most commonly registered as handler for unknown types,\n * as well as for catching unintended usage (like trying to use null\n * as Map/Object key).\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "signature": "int PROBE_START_LINE_82",
        "snippet": "int PROBE_START_LINE_82 = 84;\nClass<?> p_raw_4356_line_82 = raw;",
        "begin_line": 82,
        "end_line": 83,
        "comment": "    \n     * Method used by core Jackson classes: NOT to be used by application code:\n     * it does NOT properly handle inspection of super-types, so neither parent\n     * Classes nor implemented Interfaces are accessible with resulting type\n     * instance.\n     *<p>\n     * NOTE: public only because it is called by <code>ObjectMapper</code> which is\n     * not in same package\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "signature": "int PROBE_START_LINE_176",
        "snippet": "int PROBE_START_LINE_176 = 178;\nObject f__type_handler_417_line_176 = _typeHandler;",
        "begin_line": 179,
        "end_line": 180,
        "comment": "         should not get here but..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "signature": "int PROBE_START_LINE_221",
        "snippet": "int PROBE_START_LINE_221 = 221;\ncom.fasterxml.jackson.databind.type.TypeBindings f__bindings_4324_line_221 = _bindings;",
        "begin_line": 243,
        "end_line": 244,
        "comment": "         SimpleType means something not-specialized, so:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "signature": "JavaType superSuper",
        "snippet": "JavaType superSuper = _buildSuperClass(superClass.getSuperclass(), b);\nreturn new SimpleType(superClass, b,\nsuperSuper, null, null, null, false);",
        "begin_line": 324,
        "end_line": 326,
        "comment": "    \n     * Helper method we need to recursively build skeletal representations\n     * of superclasses.\n     * \n     * @since 2.7 -- remove when not needed (2.8?)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "protected final AnnotatedWithParams[] _creators",
        "snippet": "protected final AnnotatedWithParams[] _creators = new AnnotatedWithParams[9];\n\n/**\n* Bitmask of creators that were explicitly marked as creators; false for\n* auto-detected (ones included base on naming and/or visibility, not\n* annotation)\n*\n* @since 2.5\n*/\nprotected int _explicitCreators = 0;",
        "begin_line": 57,
        "end_line": 66,
        "comment": "    \n     * Set of creators we have collected so far\n     * \n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_END_LINE_80",
        "snippet": "int PROBE_END_LINE_80 = 80;\n_beanDesc = p_bean_desc_2247_line_80;",
        "begin_line": 87,
        "end_line": 88,
        "comment": "    /*\n     * ******************************************************** /* Life-cycle\n     * ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_START_LINE_81",
        "snippet": "int PROBE_START_LINE_81 = 81;\nMapperConfig<?> p_config_2248_line_81 = config;",
        "begin_line": 89,
        "end_line": 90,
        "comment": "    /*\n     * ******************************************************** /* Life-cycle\n     * ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "boolean creator_collector1_expr5_line_81",
        "snippet": "boolean creator_collector1_expr5_line_81 = p_config_2248_line_81.canOverrideAccessModifiers();\nint PROBE_END_LINE_81 = 81;",
        "begin_line": 91,
        "end_line": 92,
        "comment": "    /*\n     * ******************************************************** /* Life-cycle\n     * ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_START_LINE_88",
        "snippet": "int PROBE_START_LINE_88 = 89;\nJavaType creator_collector1_expr7_line_88 = _computeDelegateType(_creators[C_DELEGATE], _delegateArgs);",
        "begin_line": 104,
        "end_line": 105,
        "comment": "    /*\n     * ******************************************************** /* Life-cycle\n     * ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_END_LINE_88",
        "snippet": "int PROBE_END_LINE_88 = 89;\nfinal JavaType delegateType = creator_collector1_expr7_line_88;",
        "begin_line": 106,
        "end_line": 107,
        "comment": "    /*\n     * ******************************************************** /* Life-cycle\n     * ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_START_LINE_90",
        "snippet": "int PROBE_START_LINE_90 = 91;\nJavaType creator_collector1_expr9_line_90 = _computeDelegateType(_creators[C_ARRAY_DELEGATE],\n_arrayDelegateArgs);",
        "begin_line": 108,
        "end_line": 110,
        "comment": "    /*\n     * ******************************************************** /* Life-cycle\n     * ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_END_LINE_90",
        "snippet": "int PROBE_END_LINE_90 = 91;\nfinal JavaType arrayDelegateType = creator_collector1_expr9_line_90;",
        "begin_line": 111,
        "end_line": 112,
        "comment": "    /*\n     * ******************************************************** /* Life-cycle\n     * ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_END_LINE_100",
        "snippet": "int PROBE_END_LINE_100 = 100;\nStdValueInstantiator inst = new StdValueInstantiator(p_config_2253_line_100, v_type_2258_line_100);",
        "begin_line": 130,
        "end_line": 131,
        "comment": "         work well, so let's replace by lower-level check:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_START_LINE_101",
        "snippet": "int PROBE_START_LINE_101 = 103;\ncom.fasterxml.jackson.databind.deser.std.StdValueInstantiator v_inst_2260_line_101 = inst;",
        "begin_line": 132,
        "end_line": 133,
        "comment": "         work well, so let's replace by lower-level check:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_END_LINE_101",
        "snippet": "int PROBE_END_LINE_101 = 103;\nv_inst_2260_line_101.configureFromObjectSettings(v_default_ctor_2259_line_101, creator_collector1_expr16_line_101,\ndelegateType, _delegateArgs, _creators[C_PROPS],\n_propertyBasedArgs);",
        "begin_line": 138,
        "end_line": 141,
        "comment": "         work well, so let's replace by lower-level check:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "String name",
        "snippet": "String name = properties[i].getName();\n// Need to consider Injectables, which may not have\n// a name at all, and need to be skipped\nif (name.length() == 0\n&& properties[i].getInjectableValueId() != null) {\ncontinue;",
        "begin_line": 270,
        "end_line": 275,
        "comment": "             Better ensure we have no duplicate names either..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_START_LINE_291",
        "snippet": "int PROBE_START_LINE_291 = 294;\nT p_member_2300_line_291 = member;",
        "begin_line": 402,
        "end_line": 403,
        "comment": "         need to find type..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_END_LINE_291",
        "snippet": "int PROBE_END_LINE_291 = 294;\nif (creator_collector1_expr40_line_291) {\nint PROBE_START_LINE_292 = 293;",
        "begin_line": 411,
        "end_line": 413,
        "comment": "         need to find type..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "T p_member_2300_line_292",
        "snippet": "T p_member_2300_line_292 = member;\njava.lang.reflect.AnnotatedElement creator_collector1_expr44_line_292 = p_member_2300_line_292\n.getAnnotated();",
        "begin_line": 414,
        "end_line": 416,
        "comment": "         need to find type..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_END_LINE_292",
        "snippet": "int PROBE_END_LINE_292 = 293;\nClassUtil.checkAndFixAccess((Member) creator_collector1_expr44_line_292,\n_forceAccess);",
        "begin_line": 417,
        "end_line": 419,
        "comment": "         need to find type..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_START_LINE_26",
        "snippet": "int PROBE_START_LINE_26 = 26;\nMap<String, JsonSerializer<?>> p_all_deserializers_4059_line_26 = (Map<String, JsonSerializer<?>>) (allDeserializers);",
        "begin_line": 28,
        "end_line": 29,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "String number_serializers1_expr2_line_26",
        "snippet": "String number_serializers1_expr2_line_26 = Integer.class.getName();\nint PROBE_END_LINE_26 = 26;",
        "begin_line": 30,
        "end_line": 31,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_START_LINE_27",
        "snippet": "int PROBE_START_LINE_27 = 27;\nMap<String, JsonSerializer<?>> p_all_deserializers_4059_line_27 = (Map<String, JsonSerializer<?>>) (allDeserializers);",
        "begin_line": 33,
        "end_line": 34,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_END_LINE_27",
        "snippet": "int PROBE_END_LINE_27 = 27;\np_all_deserializers_4059_line_27.put(number_serializers1_expr7_line_27, new IntegerSerializer(Integer.TYPE));",
        "begin_line": 37,
        "end_line": 38,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_START_LINE_28",
        "snippet": "int PROBE_START_LINE_28 = 28;\nMap<String, JsonSerializer<?>> p_all_deserializers_4059_line_28 = (Map<String, JsonSerializer<?>>) (allDeserializers);",
        "begin_line": 39,
        "end_line": 40,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "String number_serializers1_expr10_line_28",
        "snippet": "String number_serializers1_expr10_line_28 = Long.class.getName();\nint PROBE_END_LINE_28 = 28;",
        "begin_line": 41,
        "end_line": 42,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_START_LINE_32",
        "snippet": "int PROBE_START_LINE_32 = 32;\nMap<String, JsonSerializer<?>> p_all_deserializers_4059_line_32 = (Map<String, JsonSerializer<?>>) (allDeserializers);",
        "begin_line": 57,
        "end_line": 58,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "Class<Byte> f_type_4061_line_32",
        "snippet": "Class<Byte> f_type_4061_line_32 = Byte.TYPE;\nString number_serializers1_expr21_line_32 = f_type_4061_line_32.getName();",
        "begin_line": 59,
        "end_line": 60,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_END_LINE_32",
        "snippet": "int PROBE_END_LINE_32 = 32;\np_all_deserializers_4059_line_32.put(number_serializers1_expr21_line_32, f_instance_4060_line_32);",
        "begin_line": 62,
        "end_line": 63,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "boolean number_serializers1_expr44_line_60",
        "snippet": "boolean number_serializers1_expr44_line_60 = p_number_type_4068_line_60 == f_int_4073_line_60;\nboolean number_serializers1_expr43_line_60 = (number_serializers1_expr44_line_60);",
        "begin_line": 131,
        "end_line": 132,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "signature": "int PROBE_START_LINE_398",
        "snippet": "int PROBE_START_LINE_398 = 398;\nboolean p_default_state_475_line_398 = defaultState;",
        "begin_line": 398,
        "end_line": 399,
        "comment": "    \n     * Feature that determines whether multiple registrations of same module\n     * should be ignored or not; if enabled, only the first registration call\n     * results in module being called, and possible duplicate calls are silently\n     * ignored; if disabled, no checking is done and all registration calls are\n     * dispatched to module.\n     *<p>\n     * Definition of \"same module\" is based on using {@link Module#getTypeId()};\n     * modules with same non-null <code>type id</code> are considered same for\n     * purposes of duplicate registration. This also avoids having to keep track\n     * of actual module instances; only ids will be kept track of (and only if\n     * this feature is enabled).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "signature": "int PROBE_END_LINE_398",
        "snippet": "int PROBE_END_LINE_398 = 398;\n_defaultState = p_default_state_475_line_398;",
        "begin_line": 400,
        "end_line": 401,
        "comment": "    \n     * Feature that determines whether multiple registrations of same module\n     * should be ignored or not; if enabled, only the first registration call\n     * results in module being called, and possible duplicate calls are silently\n     * ignored; if disabled, no checking is done and all registration calls are\n     * dispatched to module.\n     *<p>\n     * Definition of \"same module\" is based on using {@link Module#getTypeId()};\n     * modules with same non-null <code>type id</code> are considered same for\n     * purposes of duplicate registration. This also avoids having to keep track\n     * of actual module instances; only ids will be kept track of (and only if\n     * this feature is enabled).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "signature": "int PROBE_START_LINE_399",
        "snippet": "int PROBE_START_LINE_399 = 399;\nint mapper_feature1_expr3_line_399 = ordinal();",
        "begin_line": 402,
        "end_line": 403,
        "comment": "    \n     * Feature that determines whether multiple registrations of same module\n     * should be ignored or not; if enabled, only the first registration call\n     * results in module being called, and possible duplicate calls are silently\n     * ignored; if disabled, no checking is done and all registration calls are\n     * dispatched to module.\n     *<p>\n     * Definition of \"same module\" is based on using {@link Module#getTypeId()};\n     * modules with same non-null <code>type id</code> are considered same for\n     * purposes of duplicate registration. This also avoids having to keep track\n     * of actual module instances; only ids will be kept track of (and only if\n     * this feature is enabled).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "signature": "int PROBE_END_LINE_399",
        "snippet": "int PROBE_END_LINE_399 = 399;\n_mask = mapper_feature1_expr1_line_399;",
        "begin_line": 406,
        "end_line": 407,
        "comment": "    \n     * Feature that determines whether multiple registrations of same module\n     * should be ignored or not; if enabled, only the first registration call\n     * results in module being called, and possible duplicate calls are silently\n     * ignored; if disabled, no checking is done and all registration calls are\n     * dispatched to module.\n     *<p>\n     * Definition of \"same module\" is based on using {@link Module#getTypeId()};\n     * modules with same non-null <code>type id</code> are considered same for\n     * purposes of duplicate registration. This also avoids having to keep track\n     * of actual module instances; only ids will be kept track of (and only if\n     * this feature is enabled).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_START_LINE_108",
        "snippet": "int PROBE_START_LINE_108 = 108;\nint deserialization_config1_expr2_line_108 = collectFeatureDefaults(DeserializationFeature.class);",
        "begin_line": 108,
        "end_line": 109,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_END_LINE_108",
        "snippet": "int PROBE_END_LINE_108 = 108;\n_deserFeatures = deserialization_config1_expr2_line_108;",
        "begin_line": 110,
        "end_line": 111,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_START_LINE_109",
        "snippet": "int PROBE_START_LINE_109 = 109;\ncom.fasterxml.jackson.databind.node.JsonNodeFactory f_instance_148_line_109 = JsonNodeFactory.instance;",
        "begin_line": 112,
        "end_line": 113,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_END_LINE_109",
        "snippet": "int PROBE_END_LINE_109 = 109;\n_nodeFactory = f_instance_148_line_109;",
        "begin_line": 114,
        "end_line": 115,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_START_LINE_160",
        "snippet": "int PROBE_START_LINE_160 = 160;\ncom.fasterxml.jackson.databind.DeserializationConfig p_src_167_line_160 = src;",
        "begin_line": 166,
        "end_line": 167,
        "comment": "    \n     * Copy constructor used to create a non-shared instance with given mix-in\n     * annotation definitions and subtype resolver.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_END_LINE_54",
        "snippet": "int PROBE_END_LINE_54 = 54;\n_types = type_bindings1_expr7_line_54;",
        "begin_line": 91,
        "end_line": 92,
        "comment": "    ********************************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_55",
        "snippet": "int PROBE_START_LINE_55 = 57;\nString[] f__names_4411_line_55 = _names;",
        "begin_line": 93,
        "end_line": 94,
        "comment": "    ********************************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int f_length_1177_line_55",
        "snippet": "int f_length_1177_line_55 = f__names_4411_line_55.length;\ncom.fasterxml.jackson.databind.JavaType[] f__types_4412_line_55 = _types;",
        "begin_line": 95,
        "end_line": 96,
        "comment": "    ********************************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_67",
        "snippet": "int PROBE_START_LINE_67 = 67;\ncom.fasterxml.jackson.databind.type.TypeBindings f_empty_4407_line_67 = EMPTY;",
        "begin_line": 123,
        "end_line": 124,
        "comment": "    ********************************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int f_length_1177_line_123",
        "snippet": "int f_length_1177_line_123 = 0;\nif (!type_bindings1_expr20_line_123) {\nf_length_1177_line_123 = vars.length;",
        "begin_line": 200,
        "end_line": 202,
        "comment": "\t\t 30-Oct-2015, tatu: Minor optimization for relatively common cases"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int type_bindings1_expr19_line_123",
        "snippet": "int type_bindings1_expr19_line_123 = type_bindings1_expr20_line_123 ? 0 : f_length_1177_line_123;\nint PROBE_END_LINE_123 = 123;",
        "begin_line": 204,
        "end_line": 205,
        "comment": "\t\t 30-Oct-2015, tatu: Minor optimization for relatively common cases"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "String type_bindings1_expr27_line_128",
        "snippet": "String type_bindings1_expr27_line_128 = type_bindings1_expr28_line_128.getName();\nint PROBE_END_LINE_128 = 129;",
        "begin_line": 218,
        "end_line": 219,
        "comment": "\t\t 30-Oct-2015, tatu: Minor optimization for relatively common cases"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int varLen",
        "snippet": "int varLen = (vars == null) ? 0 : vars.length;\nif (varLen == 0) {\nreturn EMPTY;",
        "begin_line": 245,
        "end_line": 247,
        "comment": "    \n     * Alternate factory method that may be called if it is possible that type\n     * does or does not require type parameters; this is mostly useful for\n     * collection- and map-like types.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_200",
        "snippet": "int PROBE_START_LINE_200 = 200;\nString[] f__unbound_variables_4416_line_200 = _unboundVariables;",
        "begin_line": 292,
        "end_line": 293,
        "comment": "    \n     * Method for creating an instance that has same bindings as this object,\n     * plus an indicator for additional type variable that may be unbound within\n     * this context; this is needed to resolve recursive self-references.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int v_len_4434_line_201",
        "snippet": "int v_len_4434_line_201 = len;\nboolean type_bindings1_expr37_line_201 = v_len_4434_line_201 == 0;",
        "begin_line": 304,
        "end_line": 305,
        "comment": "    \n     * Method for creating an instance that has same bindings as this object,\n     * plus an indicator for additional type variable that may be unbound within\n     * this context; this is needed to resolve recursive self-references.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_245",
        "snippet": "int PROBE_START_LINE_245 = 245;\ncom.fasterxml.jackson.databind.JavaType[] f__types_4412_line_245 = _types;",
        "begin_line": 383,
        "end_line": 384,
        "comment": "/*\n                        throw new IllegalStateException(String.format\n(\"Unresolved ResolvedRecursiveType for parameter '%s' (index #%d; erased type %s)\",\nname, i, t.getRawClass()));\n"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int f_length_1177_line_245",
        "snippet": "int f_length_1177_line_245 = f__types_4412_line_245.length;\nboolean type_bindings1_expr46_line_245 = f_length_1177_line_245 == 0;",
        "begin_line": 385,
        "end_line": 386,
        "comment": "/*\n                        throw new IllegalStateException(String.format\n(\"Unresolved ResolvedRecursiveType for parameter '%s' (index #%d; erased type %s)\",\nname, i, t.getRawClass()));\n"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "boolean type_bindings1_expr45_line_245",
        "snippet": "boolean type_bindings1_expr45_line_245 = (type_bindings1_expr46_line_245);\nint PROBE_END_LINE_245 = 245;",
        "begin_line": 387,
        "end_line": 388,
        "comment": "/*\n                        throw new IllegalStateException(String.format\n(\"Unresolved ResolvedRecursiveType for parameter '%s' (index #%d; erased type %s)\",\nname, i, t.getRawClass()));\n"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_252",
        "snippet": "int PROBE_START_LINE_252 = 252;\ncom.fasterxml.jackson.databind.JavaType[] f__types_4412_line_252 = _types;",
        "begin_line": 396,
        "end_line": 397,
        "comment": "    \n     * Returns number of bindings contained\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int f_length_1177_line_252",
        "snippet": "int f_length_1177_line_252 = f__types_4412_line_252.length;\nint PROBE_END_LINE_252 = 252;",
        "begin_line": 398,
        "end_line": 399,
        "comment": "    \n     * Returns number of bindings contained\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_END_LINE_279",
        "snippet": "int PROBE_END_LINE_279 = 279;\nreturn type_bindings1_expr48_line_279;",
        "begin_line": 436,
        "end_line": 437,
        "comment": "    \n     * Accessor for getting bound types in declaration order\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "boolean type_bindings1_expr49_line_286",
        "snippet": "boolean type_bindings1_expr49_line_286 = f__unbound_variables_4416_line_286 != null;\nint PROBE_END_LINE_286 = 292;",
        "begin_line": 446,
        "end_line": 447,
        "comment": "    \n     * @since 2.3\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_305",
        "snippet": "int PROBE_START_LINE_305 = 305;\nClass<?> p_raw_base_4443_line_305 = rawBase;",
        "begin_line": 465,
        "end_line": 466,
        "comment": "    \n     * Factory method that will create an object that can be used as a key for\n     * caching purposes by {@link TypeFactory}\n     *\n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
        "signature": "int PROBE_START_LINE_26",
        "snippet": "int PROBE_START_LINE_26 = 26;\nClass<?> v_cls_2609_line_26 = cls;",
        "begin_line": 26,
        "end_line": 27,
        "comment": "         Trigger loading of annotations that only JDK 7 has..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
        "signature": "int PROBE_START_LINE_36",
        "snippet": "int PROBE_START_LINE_36 = 38;\nClass<?> p_raw_type_2611_line_36 = rawType;",
        "begin_line": 39,
        "end_line": 40,
        "comment": "         Trigger loading of annotations that only JDK 7 has..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
        "signature": "Transient java7_support_impl1_expr4_line_52",
        "snippet": "Transient java7_support_impl1_expr4_line_52 = p_a_2613_line_52.getAnnotation(Transient.class);\nint PROBE_END_LINE_52 = 52;",
        "begin_line": 61,
        "end_line": 62,
        "comment": "         Trigger loading of annotations that only JDK 7 has..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
        "signature": "Transient t",
        "snippet": "Transient t = java7_support_impl1_expr4_line_52;\nint PROBE_START_LINE_53 = 55;",
        "begin_line": 63,
        "end_line": 64,
        "comment": "         Trigger loading of annotations that only JDK 7 has..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
        "signature": "boolean java7_support_impl1_expr6_line_53",
        "snippet": "boolean java7_support_impl1_expr6_line_53 = v_t_2614_line_53 != null;\nint PROBE_END_LINE_53 = 55;",
        "begin_line": 66,
        "end_line": 67,
        "comment": "         Trigger loading of annotations that only JDK 7 has..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_START_LINE_137",
        "snippet": "int PROBE_START_LINE_137 = 137;\ncom.fasterxml.jackson.databind.JavaType p_type_4694_line_137 = type;",
        "begin_line": 177,
        "end_line": 178,
        "comment": "    \n     * Method for finding all super classes (but not super interfaces) of given class,\n     * starting with the immediate super class and ending in the most distant one.\n     * Class itself is included if <code>addClassItself</code> is true.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_END_LINE_137",
        "snippet": "int PROBE_END_LINE_137 = 137;\nfinal Class<?> cls = class_util1_expr17_line_137;",
        "begin_line": 180,
        "end_line": 181,
        "comment": "    \n     * Method for finding all super classes (but not super interfaces) of given class,\n     * starting with the immediate super class and ending in the most distant one.\n     * Class itself is included if <code>addClassItself</code> is true.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_START_LINE_145",
        "snippet": "int PROBE_START_LINE_145 = 147;\ncom.fasterxml.jackson.databind.JavaType p_type_4694_line_145 = type;",
        "begin_line": 211,
        "end_line": 212,
        "comment": "    \n     * Method for finding all super classes (but not super interfaces) of given class,\n     * starting with the immediate super class and ending in the most distant one.\n     * Class itself is included if <code>addClassItself</code> is true.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_END_LINE_146",
        "snippet": "int PROBE_END_LINE_146 = 146;\n_addSuperTypes(v_int_cls_4699_line_146, p_end_before_4695_line_146, p_result_4696_line_146, true);",
        "begin_line": 221,
        "end_line": 222,
        "comment": "    \n     * Method for finding all super classes (but not super interfaces) of given class,\n     * starting with the immediate super class and ending in the most distant one.\n     * Class itself is included if <code>addClassItself</code> is true.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_START_LINE_178",
        "snippet": "int PROBE_START_LINE_178 = 180;\nClass<?> p_type_4704_line_178 = type;",
        "begin_line": 259,
        "end_line": 260,
        "comment": "    \n     * @return Null if class might be a bean; type String (that identifies\n     *   why it's not a bean) if not\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_START_LINE_944",
        "snippet": "int PROBE_START_LINE_944 = 944;\nClass<?> p_cls_4757_line_944 = cls;",
        "begin_line": 1114,
        "end_line": 1115,
        "comment": "    \n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_START_LINE_951",
        "snippet": "int PROBE_START_LINE_951 = 953;\nClass<?> p_cls_4758_line_951 = cls;",
        "begin_line": 1125,
        "end_line": 1126,
        "comment": "    \n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "boolean class_util1_expr65_line_951",
        "snippet": "boolean class_util1_expr65_line_951 = isObjectOrPrimitive(p_cls_4758_line_951);\nint PROBE_END_LINE_951 = 953;",
        "begin_line": 1127,
        "end_line": 1128,
        "comment": "    \n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "boolean class_util1_expr67_line_963",
        "snippet": "boolean class_util1_expr67_line_963 = class_util1_expr68_line_963 || class_util1_expr69_line_963;\nint PROBE_END_LINE_963 = 965;",
        "begin_line": 1150,
        "end_line": 1151,
        "comment": "    \n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
        "signature": "int PROBE_END_LINE_40",
        "snippet": "int PROBE_END_LINE_40 = 40;\n_field = p_field_2806_line_40;",
        "begin_line": 44,
        "end_line": 45,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "signature": "int PROBE_END_LINE_123",
        "snippet": "int PROBE_END_LINE_123 = 129;\n\n/**\n* Serializer that gets called for values of types for which no\n* serializers can be constructed.\n*<p>\n* The default serializer will simply thrown an exception.\n*/\nprotected JsonSerializer<Object> _unknownTypeSerializer = f_default_unknown_serializer_986_line_129;",
        "begin_line": 127,
        "end_line": 135,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "signature": "int PROBE_END_LINE_138",
        "snippet": "int PROBE_END_LINE_138 = 142;\n\n/**\n* Serializer used to output a null value. Default implementation\n* writes nulls using {@link JsonGenerator#writeNull}.\n*/\nprotected JsonSerializer<Object> _nullValueSerializer = f_instance_989_line_142;",
        "begin_line": 148,
        "end_line": 154,
        "comment": "    \n     * Serializer used to output non-null keys of Maps (which will get\n     * output as JSON Objects), if not null; if null, us the standard\n     * default key serializer.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
        "signature": "int PROBE_START_LINE_93",
        "snippet": "int PROBE_START_LINE_93 = 93;\nMap<?, ?> p_shared_1142_line_93 = shared;",
        "begin_line": 103,
        "end_line": 104,
        "comment": "        ********************************************************\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
        "signature": "boolean annotated_method1_expr2_line_38",
        "snippet": "boolean annotated_method1_expr2_line_38 = p_method_2830_line_38 == null;\nint PROBE_END_LINE_38 = 40;",
        "begin_line": 41,
        "end_line": 42,
        "comment": "    ***************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
        "signature": "int PROBE_START_LINE_217",
        "snippet": "int PROBE_START_LINE_217 = 219;\nClass<?>[] f__param_classes_2848_line_217 = _paramClasses;",
        "begin_line": 229,
        "end_line": 230,
        "comment": "    ***************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_101",
        "snippet": "int PROBE_START_LINE_101 = 101;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_1838_line_101 = ctxt;",
        "begin_line": 122,
        "end_line": 123,
        "comment": "    \n     * Method that {@link DeserializerCache}s call to create a new\n     * deserializer for types other than Collections, Maps, arrays and\n     * enums.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_103",
        "snippet": "int PROBE_END_LINE_103 = 103;\n// We may also have custom overrides:\nJsonDeserializer<Object> custom = bean_deserializer_factory1_expr7_line_103;",
        "begin_line": 133,
        "end_line": 135,
        "comment": "    \n     * Method that {@link DeserializerCache}s call to create a new\n     * deserializer for types other than Collections, Maps, arrays and\n     * enums.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "boolean bean_deserializer_factory1_expr8_line_104",
        "snippet": "boolean bean_deserializer_factory1_expr8_line_104 = v_custom_1842_line_104 != null;\nint PROBE_END_LINE_104 = 106;",
        "begin_line": 138,
        "end_line": 139,
        "comment": "\t\t We may also have custom overrides:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_111",
        "snippet": "int PROBE_START_LINE_111 = 113;\ncom.fasterxml.jackson.databind.JavaType p_type_1839_line_111 = type;",
        "begin_line": 143,
        "end_line": 144,
        "comment": "\t\t We may also have custom overrides:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_119",
        "snippet": "int PROBE_END_LINE_119 = 129;\n/* Or, for abstract types, may have alternate means for resolution\n* (defaulting, materialization)\n*/\n// 29-Nov-2015, tatu: Also, filter out calls to primitive types, they are\n//    not something we could materialize anything for\nif (bean_deserializer_factory1_expr10_line_119) {\nint PROBE_START_LINE_121 = 121;",
        "begin_line": 169,
        "end_line": 176,
        "comment": "\t\t/* One more thing to check: do we have an exception type\n         * (Throwable or its sub-classes)? If so, need slightly\n         * different handling.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_122",
        "snippet": "int PROBE_START_LINE_122 = 128;\ncom.fasterxml.jackson.databind.JavaType v_concrete_type_1843_line_122 = concreteType;",
        "begin_line": 185,
        "end_line": 186,
        "comment": "\t\t\t Let's make it possible to materialize abstract types."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_142",
        "snippet": "int PROBE_START_LINE_142 = 142;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_1838_line_142 = ctxt;",
        "begin_line": 226,
        "end_line": 227,
        "comment": "\t\t Otherwise: could the class be a Bean class? If not, bail out"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_142",
        "snippet": "int PROBE_END_LINE_142 = 142;\n// For checks like [databind#1599]\n_validateSubType(p_ctxt_1838_line_142, p_type_1839_line_142, p_bean_desc_1840_line_142);",
        "begin_line": 230,
        "end_line": 232,
        "comment": "\t\t Otherwise: could the class be a Bean class? If not, bail out"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_144",
        "snippet": "int PROBE_START_LINE_144 = 144;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_1838_line_144 = ctxt;",
        "begin_line": 233,
        "end_line": 234,
        "comment": "\t\t For checks like [databind#1599]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "JavaType builderType",
        "snippet": "JavaType builderType = ctxt.constructType(builderClass);\nBeanDescription builderDesc = ctxt.getConfig().introspectForBuilder(builderType);",
        "begin_line": 251,
        "end_line": 252,
        "comment": "         First: need a BeanDescription for builder class"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "AnnotatedMethod buildMethod",
        "snippet": "AnnotatedMethod buildMethod = builderDesc.findMethod(buildMethodName, null);\nif (buildMethod != null) { // note: can't yet throw error; may be given build method\nif (config.canOverrideAccessModifiers()) {\nClassUtil.checkAndFixAccess(buildMethod.getMember(), config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));",
        "begin_line": 472,
        "end_line": 475,
        "comment": "         and lastly, find build method to use:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "ObjectIdInfo bean_deserializer_factory1_expr45_line_318",
        "snippet": "ObjectIdInfo bean_deserializer_factory1_expr45_line_318 = p_bean_desc_1868_line_318.getObjectIdInfo();\nint PROBE_END_LINE_318 = 318;",
        "begin_line": 503,
        "end_line": 504,
        "comment": "         [JACKSON-440]: may have modifier(s) that wants to modify or replace serializer we just built:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "ObjectIdResolver resolver",
        "snippet": "ObjectIdResolver resolver = ctxt.objectIdResolverInstance(beanDesc.getClassInfo(), objectIdInfo);\n\n// Just one special case: Property-based generator is trickier\nif (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work\nPropertyName propName = objectIdInfo.getPropertyName();",
        "begin_line": 518,
        "end_line": 522,
        "comment": "         [JACKSON-440]: may have modifier(s) that wants to modify or replace serializer we just built:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_430",
        "snippet": "int PROBE_START_LINE_430 = 430;\ncom.fasterxml.jackson.databind.BeanDescription p_bean_desc_1875_line_430 = beanDesc;",
        "begin_line": 621,
        "end_line": 622,
        "comment": "    \n     * Overridable method that constructs a {@link BeanDeserializerBuilder}\n     * which is used to accumulate information needed to create deserializer\n     * instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_448",
        "snippet": "int PROBE_END_LINE_448 = 448;\nfinal boolean hasCreatorProps = bean_deserializer_factory1_expr54_line_448;",
        "begin_line": 660,
        "end_line": 661,
        "comment": "    \n     * Method called to figure out settable properties for the\n     * bean deserializer to use.\n     *<p>\n     * Note: designed to be overridable, and effort is made to keep interface\n     * similar between versions.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_454",
        "snippet": "int PROBE_END_LINE_454 = 456;\n// 01-May-2016, tatu: Which base type to use here gets tricky, since\n//   it may often make most sense to use general type for overrides,\n//   but what we have here may be more specific impl type. But for now\n//   just use it as is.\nJsonIgnoreProperties.Value ignorals = bean_deserializer_factory1_expr56_line_454;",
        "begin_line": 669,
        "end_line": 674,
        "comment": "    \n     * Method called to figure out settable properties for the\n     * bean deserializer to use.\n     *<p>\n     * Note: designed to be overridable, and effort is made to keep interface\n     * similar between versions.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "boolean bean_deserializer_factory1_expr60_line_459",
        "snippet": "boolean bean_deserializer_factory1_expr60_line_459 = v_ignorals_1882_line_459 != null;\nint PROBE_END_LINE_459 = 469;",
        "begin_line": 679,
        "end_line": 680,
        "comment": "           just use it as is."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_485",
        "snippet": "int PROBE_END_LINE_485 = 494;\n// NOTE: we do NOT add @JsonIgnore'd properties into blocked ones if there's any-setter\n// Implicit ones via @JsonIgnore and equivalent?\nif (bean_deserializer_factory1_expr66_line_485) {\nint PROBE_START_LINE_486 = 486;",
        "begin_line": 735,
        "end_line": 739,
        "comment": "\t\t Also, do we have a fallback \"any\" setter?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_486",
        "snippet": "int PROBE_END_LINE_486 = 486;\nCollection<String> ignored2 = bean_deserializer_factory1_expr69_line_486;",
        "begin_line": 743,
        "end_line": 744,
        "comment": "         Implicit ones via @JsonIgnore and equivalent?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_487",
        "snippet": "int PROBE_START_LINE_487 = 493;\nCollection<String> v_ignored_2_1886_line_487 = ignored2;",
        "begin_line": 745,
        "end_line": 746,
        "comment": "         Implicit ones via @JsonIgnore and equivalent?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_488",
        "snippet": "int PROBE_START_LINE_488 = 492;\nCollection<String> v_ignored_2_1886_line_488 = ignored2;",
        "begin_line": 750,
        "end_line": 751,
        "comment": "         Implicit ones via @JsonIgnore and equivalent?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_488",
        "snippet": "int PROBE_END_LINE_488 = 492;\nfor (String propName : v_ignored_2_1886_line_488) {\n// allow ignoral of similarly named JSON property, but do not force;",
        "begin_line": 752,
        "end_line": 754,
        "comment": "         Implicit ones via @JsonIgnore and equivalent?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_495",
        "snippet": "int PROBE_END_LINE_495 = 496;\nfinal boolean useGettersAsSetters = bean_deserializer_factory1_expr71_line_495;",
        "begin_line": 767,
        "end_line": 768,
        "comment": "                     latter means NOT adding this to 'ignored':"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_499",
        "snippet": "int PROBE_START_LINE_499 = 500;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_1876_line_499 = ctxt;",
        "begin_line": 770,
        "end_line": 771,
        "comment": "                     latter means NOT adding this to 'ignored':"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "AnnotatedMethod getter",
        "snippet": "AnnotatedMethod getter = propDef.getGetter();\nClass<?> rawPropertyType = getter.getRawType();",
        "begin_line": 815,
        "end_line": 816,
        "comment": "\t\t\t/* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,\n             *   we need to do linkage (as per [databind#318]), and so need to start with\n             *   other types, and only then create constructor parameter, if any.\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_536",
        "snippet": "int PROBE_START_LINE_536 = 568;\nboolean v_has_creator_props_1881_line_536 = hasCreatorProps;",
        "begin_line": 823,
        "end_line": 824,
        "comment": "\t\t\t/* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,\n             *   we need to do linkage (as per [databind#318]), and so need to start with\n             *   other types, and only then create constructor parameter, if any.\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "boolean bean_deserializer_factory1_expr84_line_536",
        "snippet": "boolean bean_deserializer_factory1_expr84_line_536 = true;\nif (v_has_creator_props_1881_line_536) {\ncom.fasterxml.jackson.databind.introspect.BeanPropertyDefinition v_prop_def_1891_line_536 = propDef;",
        "begin_line": 825,
        "end_line": 827,
        "comment": "\t\t\t/* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,\n             *   we need to do linkage (as per [databind#318]), and so need to start with\n             *   other types, and only then create constructor parameter, if any.\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_536",
        "snippet": "int PROBE_END_LINE_536 = 568;\n// 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types\n//   (since they are never used anyway)\nif (bean_deserializer_factory1_expr83_line_536) {\n/* If property is passed via constructor parameter, we must\n* handle things in special way. Not sure what is the most optimal way...\n* for now, let's just call a (new) method in builder, which does nothing.\n*/\n// but let's call a method just to allow custom builders to be aware...\nfinal String name = propDef.getName();",
        "begin_line": 832,
        "end_line": 841,
        "comment": "\t\t\t/* 18-Oct-2013, tatu: Although constructor parameters have highest precedence,\n             *   we need to do linkage (as per [databind#318]), and so need to start with\n             *   other types, and only then create constructor parameter, if any.\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "CreatorProperty cprop",
        "snippet": "CreatorProperty cprop = null;\nif (creatorProps != null) {\nfor (SettableBeanProperty cp : creatorProps) {\nif (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {\ncprop = (CreatorProperty) cp;",
        "begin_line": 842,
        "end_line": 846,
        "comment": "                 but let's call a method just to allow custom builders to be aware..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "List<String> n",
        "snippet": "List<String> n = new ArrayList<>();\nfor (SettableBeanProperty cp : creatorProps) {\nn.add(cp.getName());",
        "begin_line": 852,
        "end_line": 854,
        "comment": "                 but let's call a method just to allow custom builders to be aware..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
        "signature": "int PROBE_START_LINE_60",
        "snippet": "int PROBE_START_LINE_60 = 60;\nClass<T> p_t_4148_line_60 = (Class<T>) (t);",
        "begin_line": 60,
        "end_line": 61,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
        "signature": "int PROBE_END_LINE_178",
        "snippet": "int PROBE_END_LINE_178 = 178;\nreturn f_default_3465_line_178; }\n\n/**\n* Constructor used for building instance that has minumum visibility\n* levels as indicated by given annotation instance\n*\n* @param ann Annotations to use for determining minimum visibility levels\n*/\npublic Std(JsonAutoDetect ann)\n{\nint PROBE_START_LINE_189 = 189;",
        "begin_line": 187,
        "end_line": 198,
        "comment": "\t\t\n         * This is the canonical base instance, configured with default\n         * visibility values\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
        "signature": "int PROBE_START_LINE_44",
        "snippet": "int PROBE_START_LINE_44 = 44;\ncom.fasterxml.jackson.databind.introspect.AnnotatedWithParams p_owner_2859_line_44 = owner;",
        "begin_line": 44,
        "end_line": 45,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
        "signature": "int PROBE_END_LINE_44",
        "snippet": "int PROBE_END_LINE_44 = 44;\n_owner = p_owner_2859_line_44;",
        "begin_line": 46,
        "end_line": 47,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_START_LINE_152",
        "snippet": "int PROBE_START_LINE_152 = 152;\ncom.fasterxml.jackson.databind.introspect.ClassIntrospector p_ci_1090_line_152 = ci;",
        "begin_line": 154,
        "end_line": 155,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_END_LINE_152",
        "snippet": "int PROBE_END_LINE_152 = 152;\n_classIntrospector = p_ci_1090_line_152;",
        "begin_line": 156,
        "end_line": 157,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_START_LINE_153",
        "snippet": "int PROBE_START_LINE_153 = 153;\ncom.fasterxml.jackson.databind.AnnotationIntrospector p_ai_1091_line_153 = ai;",
        "begin_line": 158,
        "end_line": 159,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_END_LINE_153",
        "snippet": "int PROBE_END_LINE_153 = 153;\n_annotationIntrospector = p_ai_1091_line_153;",
        "begin_line": 160,
        "end_line": 161,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_START_LINE_154",
        "snippet": "int PROBE_START_LINE_154 = 154;\nVisibilityChecker<?> p_vc_1092_line_154 = vc;",
        "begin_line": 162,
        "end_line": 163,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_END_LINE_156",
        "snippet": "int PROBE_END_LINE_156 = 156;\n_typeFactory = p_tf_1094_line_156;",
        "begin_line": 172,
        "end_line": 173,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_START_LINE_157",
        "snippet": "int PROBE_START_LINE_157 = 157;\nTypeResolverBuilder<?> p_typer_1095_line_157 = typer;",
        "begin_line": 174,
        "end_line": 175,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_START_LINE_205",
        "snippet": "int PROBE_START_LINE_205 = 205;\ncom.fasterxml.jackson.databind.ObjectMapper.DefaultTyping p_t_483_line_205 = t;",
        "begin_line": 211,
        "end_line": 212,
        "comment": "        \n         * Definition of what types is this default typer valid for.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_END_LINE_212",
        "snippet": "int PROBE_END_LINE_212 = 212;\nreturn object_mapper1_expr1_line_212;",
        "begin_line": 234,
        "end_line": 235,
        "comment": "        \n         * Definition of what types is this default typer valid for.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_START_LINE_234",
        "snippet": "int PROBE_START_LINE_234 = 236;\ncom.fasterxml.jackson.databind.JavaType p_t_491_line_234 = t;",
        "begin_line": 255,
        "end_line": 256,
        "comment": "        \n         * Method called to check if the default type handler should be\n         * used for given type.\n         * Note: \"natural types\" (String, Boolean, Integer, Double) will never\n         * use typing; that is both due to them being concrete and final,\n         * and since actual serializers and deserializers will also ignore any\n         * attempts to enforce typing.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_START_LINE_256",
        "snippet": "int PROBE_START_LINE_256 = 256;\ncom.fasterxml.jackson.databind.JavaType p_t_491_line_255 = t;",
        "begin_line": 286,
        "end_line": 287,
        "comment": "                                 [databind#88] Should not apply to JSON tree models:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_END_LINE_256",
        "snippet": "int PROBE_END_LINE_256 = 256;\nt = t.getContentType();",
        "begin_line": 292,
        "end_line": 293,
        "comment": "                                 [databind#88] Should not apply to JSON tree models:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "RootNameLookup rootNames",
        "snippet": "RootNameLookup rootNames = new RootNameLookup();\n_serializationConfig = new SerializationConfig(src._serializationConfig, _mixIns, rootNames, _propertyOverrides);",
        "begin_line": 567,
        "end_line": 568,
        "comment": "    \n     * Copy-constructor, mostly used to support {@link #copy}.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "Set<Object> reg",
        "snippet": "Set<Object> reg = src._registeredModuleTypes;\nif (reg == null) {\n_registeredModuleTypes = null;",
        "begin_line": 577,
        "end_line": 579,
        "comment": "         as per [databind#922], [databind#1078] make sure to copy registered modules as appropriate"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "final JsonParser p",
        "snippet": "final JsonParser p = buf.asParser();\nObject result;",
        "begin_line": 3757,
        "end_line": 3758,
        "comment": "             then matching read, inlined 'readValue' with minor mods:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_START_LINE_204",
        "snippet": "int PROBE_START_LINE_204 = 206;\ncom.fasterxml.jackson.databind.JavaType p_type_1988_line_204 = type;",
        "begin_line": 237,
        "end_line": 238,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_START_LINE_207",
        "snippet": "int PROBE_START_LINE_207 = 209;\ncom.fasterxml.jackson.databind.JavaType p_type_1988_line_207 = type;",
        "begin_line": 244,
        "end_line": 245,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "boolean deserializer_cache1_expr8_line_207",
        "snippet": "boolean deserializer_cache1_expr8_line_207 = _hasCustomHandlers(p_type_1988_line_207);\nint PROBE_END_LINE_207 = 209;",
        "begin_line": 246,
        "end_line": 247,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_START_LINE_234",
        "snippet": "int PROBE_START_LINE_234 = 234;\nHashMap<com.fasterxml.jackson.databind.JavaType, JsonDeserializer<Object>> f__incomplete_deserializers_1977_line_234 = _incompleteDeserializers;",
        "begin_line": 293,
        "end_line": 294,
        "comment": "\t\t\t Ok, then: could it be that due to a race condition, deserializer can now be found?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int deserializer_cache1_expr12_line_234",
        "snippet": "int deserializer_cache1_expr12_line_234 = f__incomplete_deserializers_1977_line_234.size();\nint PROBE_END_LINE_234 = 234;",
        "begin_line": 295,
        "end_line": 296,
        "comment": "\t\t\t Ok, then: could it be that due to a race condition, deserializer can now be found?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int v_count_1993_line_236",
        "snippet": "int v_count_1993_line_236 = count;\nboolean deserializer_cache1_expr13_line_236 = v_count_1993_line_236 > 0;",
        "begin_line": 299,
        "end_line": 300,
        "comment": "\t\t\t Ok, then: could it be that due to a race condition, deserializer can now be found?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_START_LINE_244",
        "snippet": "int PROBE_START_LINE_244 = 244;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_1989_line_244 = ctxt;",
        "begin_line": 321,
        "end_line": 322,
        "comment": "             Nope: need to create and possibly cache"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_END_LINE_244",
        "snippet": "int PROBE_END_LINE_244 = 244;\nreturn deserializer_cache1_expr16_line_244;",
        "begin_line": 327,
        "end_line": 328,
        "comment": "             Nope: need to create and possibly cache"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "boolean deserializer_cache1_expr18_line_247",
        "snippet": "boolean deserializer_cache1_expr18_line_247 = v_count_1993_line_247 == 0;\nboolean deserializer_cache1_expr19_line_247 = true;",
        "begin_line": 332,
        "end_line": 333,
        "comment": "             Nope: need to create and possibly cache"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_END_LINE_247",
        "snippet": "int PROBE_END_LINE_247 = 249;\n// also: any deserializers that have been created are complete by now\nif (deserializer_cache1_expr17_line_247) {\nint PROBE_START_LINE_248 = 248;",
        "begin_line": 341,
        "end_line": 344,
        "comment": "             Nope: need to create and possibly cache"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_END_LINE_248",
        "snippet": "int PROBE_END_LINE_248 = 248;\nf__incomplete_deserializers_1977_line_248.clear();",
        "begin_line": 346,
        "end_line": 347,
        "comment": "\t\t\t\t also: any deserializers that have been created are complete by now"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_END_LINE_264",
        "snippet": "int PROBE_END_LINE_264 = 264;\ndeser = deserializer_cache1_expr22_line_264;",
        "begin_line": 369,
        "end_line": 370,
        "comment": "    \n     * Method that handles actual construction (via factory) and caching (both\n     * intermediate and eventual)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "boolean deserializer_cache1_expr27_line_277",
        "snippet": "boolean deserializer_cache1_expr27_line_277 = true;\nif (deserializer_cache1_expr25_line_277) {\nJsonDeserializer<Object> v_deser_1997_line_277 = deser;",
        "begin_line": 387,
        "end_line": 389,
        "comment": "             are what caller is expected to handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_END_LINE_277",
        "snippet": "int PROBE_END_LINE_277 = 277;\n/* cache resulting deserializer? always true for \"plain\" BeanDeserializer\n* (but can be re-defined for sub-classes by using @JsonCachable!)\n*/\n// 27-Mar-2015, tatu: As per [databind#735], avoid caching types with custom value desers\nboolean addToCache = deserializer_cache1_expr24_line_277;",
        "begin_line": 394,
        "end_line": 399,
        "comment": "             are what caller is expected to handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "boolean deserializer_cache1_expr28_line_291",
        "snippet": "boolean deserializer_cache1_expr28_line_291 = v_deser_1997_line_291 instanceof ResolvableDeserializer;\nint PROBE_END_LINE_291 = 295;",
        "begin_line": 403,
        "end_line": 404,
        "comment": "         27-Mar-2015, tatu: As per [databind#735], avoid caching types with custom value desers"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "boolean deserializer_cache1_expr37_line_321",
        "snippet": "boolean deserializer_cache1_expr37_line_321 = false;\nif (!deserializer_cache1_expr35_line_321) {\ndeserializer_cache1_expr36_line_321 = type.isMapLikeType();",
        "begin_line": 470,
        "end_line": 472,
        "comment": "    \n     * Method that does the heavy lifting of checking for per-type annotations,\n     * find out full type, and figure out which actual factory method\n     * to call.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_END_LINE_321",
        "snippet": "int PROBE_END_LINE_321 = 323;\n// First things first: do we need to use abstract type mapping?\nif (deserializer_cache1_expr34_line_321) {\nint PROBE_START_LINE_322 = 322;",
        "begin_line": 479,
        "end_line": 482,
        "comment": "    \n     * Method that does the heavy lifting of checking for per-type annotations,\n     * find out full type, and figure out which actual factory method\n     * to call.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "BeanDescription beanDesc",
        "snippet": "BeanDescription beanDesc = deserializer_cache1_expr39_line_324;\nint PROBE_START_LINE_326 = 327;",
        "begin_line": 496,
        "end_line": 497,
        "comment": "\t\t First things first: do we need to use abstract type mapping?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_END_LINE_333",
        "snippet": "int PROBE_END_LINE_333 = 333;\n// If not, may have further type-modification annotations to check:\nJavaType newType = deserializer_cache1_expr43_line_333;",
        "begin_line": 520,
        "end_line": 522,
        "comment": "\t\t Then: does type define explicit deserializer to use, with annotation(s)?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_END_LINE_340",
        "snippet": "int PROBE_END_LINE_340 = 340;\n// We may also have a Builder type to consider...\nClass<?> builder = deserializer_cache1_expr46_line_340;",
        "begin_line": 536,
        "end_line": 538,
        "comment": "\t\t If not, may have further type-modification annotations to check:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_START_LINE_341",
        "snippet": "int PROBE_START_LINE_341 = 344;\nClass<?> v_builder_2006_line_341 = builder;",
        "begin_line": 539,
        "end_line": 540,
        "comment": "\t\t We may also have a Builder type to consider..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "boolean deserializer_cache1_expr47_line_341",
        "snippet": "boolean deserializer_cache1_expr47_line_341 = v_builder_2006_line_341 != null;\nint PROBE_END_LINE_341 = 344;",
        "begin_line": 541,
        "end_line": 542,
        "comment": "\t\t We may also have a Builder type to consider..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_END_LINE_347",
        "snippet": "int PROBE_END_LINE_347 = 347;\n// Or perhaps a Converter?\nConverter<Object,Object> conv = deserializer_cache1_expr48_line_347;",
        "begin_line": 552,
        "end_line": 554,
        "comment": "\t\t We may also have a Builder type to consider..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ext/Java7Support.java",
        "signature": "Java7Support impl",
        "snippet": "Java7Support impl = null;\ntry {\nint PROBE_START_LINE_23 = 23;",
        "begin_line": 21,
        "end_line": 23,
        "comment": "\n * To support Java7-incomplete platforms, we will offer support for JDK 7\n * annotations through this class, loaded dynamically; if loading fails,\n * support will be missing. This class is the non-JDK-7-dependent API,\n * and {@link Java7SupportImpl} is JDK7-dependent implementation of\n * functionality.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ext/Java7Support.java",
        "signature": "int PROBE_START_LINE_24",
        "snippet": "int PROBE_START_LINE_24 = 24;\nClass<?> v_cls_2602_line_24 = cls;",
        "begin_line": 28,
        "end_line": 29,
        "comment": "\n * To support Java7-incomplete platforms, we will offer support for JDK 7\n * annotations through this class, loaded dynamically; if loading fails,\n * support will be missing. This class is the non-JDK-7-dependent API,\n * and {@link Java7SupportImpl} is JDK7-dependent implementation of\n * functionality.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ext/Java7Support.java",
        "signature": "int PROBE_END_LINE_24",
        "snippet": "int PROBE_END_LINE_24 = 24;\nimpl = (Java7Support) java7_support1_expr4_line_24;",
        "begin_line": 31,
        "end_line": 32,
        "comment": "\n * To support Java7-incomplete platforms, we will offer support for JDK 7\n * annotations through this class, loaded dynamically; if loading fails,\n * support will be missing. This class is the non-JDK-7-dependent API,\n * and {@link Java7SupportImpl} is JDK7-dependent implementation of\n * functionality.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "signature": "int PROBE_START_LINE_420",
        "snippet": "int PROBE_START_LINE_420 = 420;\nboolean p_default_state_981_line_420 = defaultState;",
        "begin_line": 420,
        "end_line": 421,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "signature": "int PROBE_END_LINE_420",
        "snippet": "int PROBE_END_LINE_420 = 420;\n_defaultState = p_default_state_981_line_420;",
        "begin_line": 422,
        "end_line": 423,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "signature": "int PROBE_START_LINE_421",
        "snippet": "int PROBE_START_LINE_421 = 421;\nint serialization_feature1_expr3_line_421 = ordinal();",
        "begin_line": 424,
        "end_line": 425,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "signature": "int PROBE_END_LINE_421",
        "snippet": "int PROBE_END_LINE_421 = 421;\n_mask = serialization_feature1_expr1_line_421;",
        "begin_line": 428,
        "end_line": 429,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-93/result/src/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
        "signature": "int PROBE_START_LINE_36",
        "snippet": "int PROBE_START_LINE_36 = 36;\nboolean p_for_primitive_3982_line_36 = forPrimitive;",
        "begin_line": 36,
        "end_line": 37,
        "comment": "    \n     * Whether type serialized is primitive (boolean) or wrapper\n     * (java.lang.Boolean); if true, former, if false, latter.\n     "
    }
]