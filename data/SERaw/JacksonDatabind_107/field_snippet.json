[
    {
        "class_name": "com.fasterxml.jackson.databind.util.ArrayIterator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ArrayIterator.java",
        "signature": "int PROBE_START_LINE_17",
        "snippet": "int PROBE_START_LINE_17 = 17;\nT[] p_a_5807_line_17 = a;",
        "begin_line": 17,
        "end_line": 18,
        "comment": "\n * Iterator implementation used to efficiently expose contents of an\n * Array as read-only iterator.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ArrayIterator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ArrayIterator.java",
        "signature": "int PROBE_END_LINE_17",
        "snippet": "int PROBE_END_LINE_17 = 17;\n_a = p_a_5807_line_17;",
        "begin_line": 19,
        "end_line": 20,
        "comment": "\n * Iterator implementation used to efficiently expose contents of an\n * Array as read-only iterator.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ArrayIterator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ArrayIterator.java",
        "signature": "int PROBE_END_LINE_22",
        "snippet": "int PROBE_END_LINE_22 = 22;\nreturn array_iterator1_expr2_line_22; }\n\n@Override\npublic T next() {\nif (_index >= _a.length) {\nthrow new NoSuchElementException();",
        "begin_line": 30,
        "end_line": 36,
        "comment": "\n * Iterator implementation used to efficiently expose contents of an\n * Array as read-only iterator.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "protected boolean _cfgConstructorPropertiesImpliesCreator",
        "snippet": "protected boolean _cfgConstructorPropertiesImpliesCreator = true;\n\n/*\n/**********************************************************\n/* Life-cycle\n/**********************************************************\n*/\n\npublic JacksonAnnotationIntrospector() { }\n\n@Override\npublic Version version() {\nreturn com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;",
        "begin_line": 147,
        "end_line": 159,
        "comment": "    \n     * See {@link #setConstructorPropertiesImpliesCreator(boolean)} for\n     * explanation.\n     *<p>\n     * Defaults to true.\n     * \n     * @since 2.7.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "String ns",
        "snippet": "String ns = ann.namespace();\nif (ns != null && ns.length() == 0) {\nns = null;",
        "begin_line": 342,
        "end_line": 344,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_275",
        "snippet": "int PROBE_START_LINE_275 = 277;\ncom.fasterxml.jackson.annotation.JsonIgnoreProperties v_v_3910_line_275 = v;",
        "begin_line": 358,
        "end_line": 359,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_276",
        "snippet": "int PROBE_START_LINE_276 = 276;\ncom.fasterxml.jackson.annotation.JsonIgnoreProperties.Value jackson_annotation_introspector1_expr21_line_276 = JsonIgnoreProperties.Value\n.empty();",
        "begin_line": 363,
        "end_line": 365,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_END_LINE_276",
        "snippet": "int PROBE_END_LINE_276 = 276;\nreturn jackson_annotation_introspector1_expr21_line_276;",
        "begin_line": 366,
        "end_line": 367,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_283",
        "snippet": "int PROBE_START_LINE_283 = 283;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass p_ac_3911_line_283 = ac;",
        "begin_line": 374,
        "end_line": 375,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_END_LINE_283",
        "snippet": "int PROBE_END_LINE_283 = 283;\nJsonIgnoreType ignore = jackson_annotation_introspector1_expr22_line_283;",
        "begin_line": 378,
        "end_line": 379,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "boolean jackson_annotation_introspector1_expr27_line_284",
        "snippet": "boolean jackson_annotation_introspector1_expr27_line_284 = v_ignore_3912_line_284 == null;\nboolean jackson_annotation_introspector1_expr25_line_284 = (jackson_annotation_introspector1_expr27_line_284);",
        "begin_line": 382,
        "end_line": 383,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "boolean jackson_annotation_introspector1_expr26_line_284",
        "snippet": "boolean jackson_annotation_introspector1_expr26_line_284 = false;\nif (!jackson_annotation_introspector1_expr25_line_284) {\njackson_annotation_introspector1_expr26_line_284 = ignore.value();",
        "begin_line": 384,
        "end_line": 386,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_303",
        "snippet": "int PROBE_START_LINE_303 = 303;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass p_ac_3914_line_303 = ac;",
        "begin_line": 411,
        "end_line": 412,
        "comment": "             Empty String is same as not having annotation, to allow overrides"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "boolean jackson_annotation_introspector1_expr33_line_304",
        "snippet": "boolean jackson_annotation_introspector1_expr33_line_304 = v_ann_3915_line_304 == null;\nboolean jackson_annotation_introspector1_expr31_line_304 = (jackson_annotation_introspector1_expr33_line_304);",
        "begin_line": 419,
        "end_line": 420,
        "comment": "             Empty String is same as not having annotation, to allow overrides"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_323",
        "snippet": "int PROBE_START_LINE_323 = 323;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass p_ac_3917_line_323 = ac;",
        "begin_line": 448,
        "end_line": 449,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_335",
        "snippet": "int PROBE_START_LINE_335 = 335;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMember p_m_3920_line_335 = m;",
        "begin_line": 480,
        "end_line": 481,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "List<PropertyName> result",
        "snippet": "List<PropertyName> result = new ArrayList<>(len);\nfor (int i = 0; i < len; ++i) {\nresult.add(PropertyName.construct(strs[i]));",
        "begin_line": 520,
        "end_line": 522,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "boolean jackson_annotation_introspector1_expr51_line_366",
        "snippet": "boolean jackson_annotation_introspector1_expr51_line_366 = v_ann_3926_line_366 != null;\nint PROBE_END_LINE_366 = 368;",
        "begin_line": 547,
        "end_line": 548,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_374",
        "snippet": "int PROBE_START_LINE_374 = 374;\ncom.fasterxml.jackson.databind.introspect.Annotated p_m_3927_line_374 = m;",
        "begin_line": 557,
        "end_line": 558,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "String jackson_annotation_introspector1_expr59_line_384",
        "snippet": "String jackson_annotation_introspector1_expr59_line_384 = null;\nif (!jackson_annotation_introspector1_expr58_line_384) {\njackson_annotation_introspector1_expr59_line_384 = desc.value();",
        "begin_line": 585,
        "end_line": 587,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_556",
        "snippet": "int PROBE_START_LINE_556 = 556;\ncom.fasterxml.jackson.databind.introspect.Annotated p_a_3959_line_556 = a;",
        "begin_line": 892,
        "end_line": 893,
        "comment": "\t\t/* First: let's ensure property is a container type: caller should have\n         * verified but just to be sure\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_557",
        "snippet": "int PROBE_START_LINE_557 = 557;\ncom.fasterxml.jackson.annotation.JsonSubTypes v_t_3960_line_557 = t;",
        "begin_line": 898,
        "end_line": 899,
        "comment": "\t\t/* First: let's ensure property is a container type: caller should have\n         * verified but just to be sure\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "JsonRawValue annRaw",
        "snippet": "JsonRawValue annRaw =  _findAnnotation(a, JsonRawValue.class);\nif ((annRaw != null) && annRaw.value()) {\n// let's construct instance with nominal type:\nClass<?> cls = a.getRawType();",
        "begin_line": 1007,
        "end_line": 1010,
        "comment": "        /* 18-Oct-2010, tatu: [JACKSON-351] @JsonRawValue handled just here, for now;\n         *  if we need to get raw indicator from other sources need to add\n         *  separate accessor within {@link AnnotationIntrospector} interface.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "JsonSerialize ann",
        "snippet": "JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\nif (ann != null) {\n@SuppressWarnings(\"rawtypes\")\nClass<? extends JsonSerializer> serClass = ann.keyUsing();",
        "begin_line": 1019,
        "end_line": 1022,
        "comment": "             let's construct instance with nominal type:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "JsonSerialize ann",
        "snippet": "JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\nif (ann != null) {\n@SuppressWarnings(\"rawtypes\")\nClass<? extends JsonSerializer> serClass = ann.contentUsing();",
        "begin_line": 1033,
        "end_line": 1036,
        "comment": "             let's construct instance with nominal type:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "JsonInclude inc",
        "snippet": "JsonInclude inc = _findAnnotation(a, JsonInclude.class);\nJsonInclude.Value value = (inc == null) ? JsonInclude.Value.empty() : JsonInclude.Value.from(inc);",
        "begin_line": 1061,
        "end_line": 1062,
        "comment": "             let's construct instance with nominal type:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "JsonSerialize ann",
        "snippet": "JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);\nif (ann != null) {\nswitch (ann.include()) {\ncase ALWAYS:\nreturn value.withValueInclusion(JsonInclude.Include.ALWAYS);",
        "begin_line": 1073,
        "end_line": 1077,
        "comment": "         only consider deprecated variant if we didn't have non-deprecated one:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "final JsonSerialize jsonSer",
        "snippet": "final JsonSerialize jsonSer = _findAnnotation(a, JsonSerialize.class);\n\n// Ok: start by refining the main type itself; common to all types\n\nfinal Class<?> serClass = (jsonSer == null) ? null : _classIfExplicit(jsonSer.as());",
        "begin_line": 1123,
        "end_line": 1127,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "JavaType keyType",
        "snippet": "JavaType keyType = type.getKeyType();\nfinal Class<?> keyClass = (jsonSer == null) ? null : _classIfExplicit(jsonSer.keyAs());",
        "begin_line": 1162,
        "end_line": 1163,
        "comment": "         First, key type (for Maps, Map-like types):"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_882",
        "snippet": "int PROBE_START_LINE_882 = 882;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass p_ac_3986_line_882 = ac;",
        "begin_line": 1260,
        "end_line": 1261,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_883",
        "snippet": "int PROBE_START_LINE_883 = 883;\ncom.fasterxml.jackson.annotation.JsonPropertyOrder v_order_3987_line_883 = order;",
        "begin_line": 1266,
        "end_line": 1267,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "String[] jackson_annotation_introspector1_expr121_line_883",
        "snippet": "String[] jackson_annotation_introspector1_expr121_line_883 = null;\nif (!jackson_annotation_introspector1_expr120_line_883) {\njackson_annotation_introspector1_expr121_line_883 = order.value();",
        "begin_line": 1270,
        "end_line": 1272,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "JsonAppend ann",
        "snippet": "JsonAppend ann = _findAnnotation(ac, JsonAppend.class);\nif (ann == null) {\nreturn;",
        "begin_line": 1319,
        "end_line": 1321,
        "comment": "          `true` to have any significance."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "final boolean prepend",
        "snippet": "final boolean prepend = ann.prepend();\nJavaType propType = null;",
        "begin_line": 1323,
        "end_line": 1324,
        "comment": "          `true` to have any significance."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "PropertyName propName",
        "snippet": "PropertyName propName = _propertyName(prop.name(), prop.namespace());\nJavaType type = config.constructType(prop.type());",
        "begin_line": 1383,
        "end_line": 1384,
        "comment": "         can construct the property writer"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "HandlerInstantiator hi",
        "snippet": "HandlerInstantiator hi = config.getHandlerInstantiator();\nVirtualBeanPropertyWriter bpw = (hi == null) ? null\n: hi.virtualPropertyWriterInstance(config, implClass);",
        "begin_line": 1394,
        "end_line": 1396,
        "comment": "         and with that and property definition"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_1002",
        "snippet": "int PROBE_START_LINE_1002 = 1009;\ncom.fasterxml.jackson.annotation.JsonGetter v_jg_4003_line_1002 = jg;",
        "begin_line": 1422,
        "end_line": 1423,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "String s",
        "snippet": "String s = jg.value();\n// 04-May-2018, tatu: Should allow for \"nameless\" `@JsonGetter` too\nif (!s.isEmpty()) {\nreturn PropertyName.construct(s);",
        "begin_line": 1427,
        "end_line": 1430,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_1010",
        "snippet": "int PROBE_START_LINE_1010 = 1010;\ncom.fasterxml.jackson.databind.introspect.Annotated p_a_4001_line_1010 = a;",
        "begin_line": 1434,
        "end_line": 1435,
        "comment": "             04-May-2018, tatu: Should allow for \"nameless\" `@JsonGetter` too"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_END_LINE_1010",
        "snippet": "int PROBE_END_LINE_1010 = 1010;\nJsonProperty pann = jackson_annotation_introspector1_expr134_line_1010;",
        "begin_line": 1438,
        "end_line": 1439,
        "comment": "             04-May-2018, tatu: Should allow for \"nameless\" `@JsonGetter` too"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "boolean jackson_annotation_introspector1_expr136_line_1011",
        "snippet": "boolean jackson_annotation_introspector1_expr136_line_1011 = v_pann_4004_line_1011 != null;\nint PROBE_END_LINE_1011 = 1013;",
        "begin_line": 1442,
        "end_line": 1443,
        "comment": "             04-May-2018, tatu: Should allow for \"nameless\" `@JsonGetter` too"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_1014",
        "snippet": "int PROBE_START_LINE_1014 = 1016;\nboolean v_use_default_4002_line_1014 = useDefault;",
        "begin_line": 1447,
        "end_line": 1448,
        "comment": "             04-May-2018, tatu: Should allow for \"nameless\" `@JsonGetter` too"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "boolean jackson_annotation_introspector1_expr138_line_1014",
        "snippet": "boolean jackson_annotation_introspector1_expr138_line_1014 = false;\nif (!v_use_default_4002_line_1014) {\ncom.fasterxml.jackson.databind.introspect.Annotated p_a_4001_line_1014 = a;",
        "begin_line": 1449,
        "end_line": 1451,
        "comment": "             04-May-2018, tatu: Should allow for \"nameless\" `@JsonGetter` too"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_END_LINE_1014",
        "snippet": "int PROBE_END_LINE_1014 = 1016;\nif (jackson_annotation_introspector1_expr137_line_1014) {\nreturn PropertyName.USE_DEFAULT;",
        "begin_line": 1458,
        "end_line": 1460,
        "comment": "             04-May-2018, tatu: Should allow for \"nameless\" `@JsonGetter` too"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_1022",
        "snippet": "int PROBE_START_LINE_1022 = 1022;\ncom.fasterxml.jackson.databind.introspect.Annotated p_a_4005_line_1022 = a;",
        "begin_line": 1467,
        "end_line": 1468,
        "comment": "             04-May-2018, tatu: Should allow for \"nameless\" `@JsonGetter` too"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java",
        "signature": "int PROBE_END_LINE_44",
        "snippet": "int PROBE_END_LINE_44 = 44;\nreturn class_name_id_resolver1_expr2_line_44;",
        "begin_line": 52,
        "end_line": 53,
        "comment": "         not used with class name - based resolvers"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "signature": "int PROBE_START_LINE_185",
        "snippet": "int PROBE_START_LINE_185 = 185;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass p_base_type_4582_line_185 = baseType;",
        "begin_line": 191,
        "end_line": 192,
        "comment": "                 is it a subtype of root type?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "signature": "int PROBE_END_LINE_189",
        "snippet": "int PROBE_END_LINE_189 = 189;\nNamedType rootType = new NamedType(v_raw_base_4583_line_189, null);",
        "begin_line": 201,
        "end_line": 202,
        "comment": "                 is it a subtype of root type?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "signature": "Collection<NamedType> st",
        "snippet": "Collection<NamedType> st = ai.findSubtypes(annotatedType);\nif (st != null && !st.isEmpty()) {\nfor (NamedType subtype : st) {\nAnnotatedClass subtypeClass = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\nsubtype.getType());",
        "begin_line": 270,
        "end_line": 274,
        "comment": "         if it wasn't, add and check subtypes recursively"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "signature": "int PROBE_START_LINE_257",
        "snippet": "int PROBE_START_LINE_257 = 257;\nMapperConfig<?> p_config_4595_line_257 = config;",
        "begin_line": 288,
        "end_line": 289,
        "comment": "    \n     * Method called to find subtypes for a specific type (class), using\n     * type id as the unique key (in case of conflicts).\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "signature": "int PROBE_END_LINE_257",
        "snippet": "int PROBE_END_LINE_257 = 257;\nfinal AnnotationIntrospector ai = std_subtype_resolver1_expr8_line_257;",
        "begin_line": 292,
        "end_line": 293,
        "comment": "    \n     * Method called to find subtypes for a specific type (class), using\n     * type id as the unique key (in case of conflicts).\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "signature": "boolean std_subtype_resolver1_expr10_line_258",
        "snippet": "boolean std_subtype_resolver1_expr10_line_258 = p_named_type_4594_line_258.hasName();\nboolean std_subtype_resolver1_expr9_line_258 = !std_subtype_resolver1_expr10_line_258;",
        "begin_line": 296,
        "end_line": 297,
        "comment": "    \n     * Method called to find subtypes for a specific type (class), using\n     * type id as the unique key (in case of conflicts).\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "signature": "int PROBE_END_LINE_258",
        "snippet": "int PROBE_END_LINE_258 = 263;\nif (std_subtype_resolver1_expr9_line_258) {\nint PROBE_START_LINE_259 = 259;",
        "begin_line": 298,
        "end_line": 300,
        "comment": "    \n     * Method called to find subtypes for a specific type (class), using\n     * type id as the unique key (in case of conflicts).\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "int PROBE_END_LINE_127",
        "snippet": "int PROBE_END_LINE_127 = 130;\n// 26-Mar-2015, tatu: As per [databind#735], need to be careful\nreturn collection_deserializer1_expr6_line_127\n;",
        "begin_line": 158,
        "end_line": 161,
        "comment": "     Important: do NOT cache if polymorphic values"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "JsonDeserializer<Object> delegateDeser",
        "snippet": "JsonDeserializer<Object> delegateDeser = null;\nint PROBE_START_LINE_150 = 170;",
        "begin_line": 180,
        "end_line": 181,
        "comment": "         May need to resolve types for delegate-based creators:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "boolean collection_deserializer1_expr9_line_150",
        "snippet": "boolean collection_deserializer1_expr9_line_150 = f__value_instantiator_2757_line_150 != null;\nint PROBE_END_LINE_150 = 170;",
        "begin_line": 183,
        "end_line": 184,
        "comment": "         May need to resolve types for delegate-based creators:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "int PROBE_END_LINE_151",
        "snippet": "int PROBE_END_LINE_151 = 169;\nif (collection_deserializer1_expr10_line_151) {\nJavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());",
        "begin_line": 190,
        "end_line": 192,
        "comment": "         May need to resolve types for delegate-based creators:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "int PROBE_END_LINE_180",
        "snippet": "int PROBE_END_LINE_180 = 180;\n// May have a content converter\nvalueDeser = collection_deserializer1_expr14_line_180;",
        "begin_line": 239,
        "end_line": 241,
        "comment": "\t\t also, often value deserializer is resolved here:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "int PROBE_START_LINE_188",
        "snippet": "int PROBE_START_LINE_188 = 188;\nTypeDeserializer f__value_type_deserializer_2756_line_188 = _valueTypeDeserializer;",
        "begin_line": 263,
        "end_line": 264,
        "comment": "\t\t May have a content converter"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "int PROBE_START_LINE_189",
        "snippet": "int PROBE_START_LINE_189 = 191;\ncom.fasterxml.jackson.databind.jsontype.TypeDeserializer v_value_type_deser_2773_line_189 = valueTypeDeser;",
        "begin_line": 268,
        "end_line": 269,
        "comment": "\t\t and finally, type deserializer needs context as well"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "boolean collection_deserializer1_expr18_line_189",
        "snippet": "boolean collection_deserializer1_expr18_line_189 = v_value_type_deser_2773_line_189 != null;\nint PROBE_END_LINE_189 = 191;",
        "begin_line": 270,
        "end_line": 271,
        "comment": "\t\t and finally, type deserializer needs context as well"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "int PROBE_END_LINE_192",
        "snippet": "int PROBE_END_LINE_192 = 192;\nNullValueProvider nuller = collection_deserializer1_expr20_line_192;",
        "begin_line": 287,
        "end_line": 288,
        "comment": "\t\t and finally, type deserializer needs context as well"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "int PROBE_START_LINE_193",
        "snippet": "int PROBE_START_LINE_193 = 201;\nBoolean v_unwrap_single_2769_line_193 = unwrapSingle;",
        "begin_line": 289,
        "end_line": 290,
        "comment": "\t\t and finally, type deserializer needs context as well"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "int PROBE_END_LINE_193",
        "snippet": "int PROBE_END_LINE_193 = 201;\nif ( collection_deserializer1_expr21_line_193\n) {\nint PROBE_START_LINE_199 = 200;",
        "begin_line": 297,
        "end_line": 300,
        "comment": "\t\t and finally, type deserializer needs context as well"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
        "signature": "JsonDeserializer<Object> v_delegate_deser_2768_line_199",
        "snippet": "JsonDeserializer<Object> v_delegate_deser_2768_line_199 = delegateDeser;\nJsonDeserializer<?> v_value_deser_2771_line_199 = valueDeser;",
        "begin_line": 301,
        "end_line": 302,
        "comment": "\t\t and finally, type deserializer needs context as well"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
        "signature": "int PROBE_START_LINE_967",
        "snippet": "int PROBE_START_LINE_967 = 967;\ncom.fasterxml.jackson.databind.BeanProperty p_prop_3081_line_967 = prop;",
        "begin_line": 1000,
        "end_line": 1001,
        "comment": "    \n     * Helper method that can be used to see if specified property has annotation\n     * indicating that a converter is to be used for contained values (contents\n     * of structured types; array/List/Map values)\n     * \n     * @param existingDeserializer (optional) configured content\n     *    serializer if one already exists.\n     * \n     * @since 2.2\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
        "signature": "AnnotatedMember std_deserializer1_expr10_line_967",
        "snippet": "AnnotatedMember std_deserializer1_expr10_line_967 = p_prop_3081_line_967.getMember();\nint PROBE_END_LINE_967 = 967;",
        "begin_line": 1002,
        "end_line": 1003,
        "comment": "    \n     * Helper method that can be used to see if specified property has annotation\n     * indicating that a converter is to be used for contained values (contents\n     * of structured types; array/List/Map values)\n     * \n     * @param existingDeserializer (optional) configured content\n     *    serializer if one already exists.\n     * \n     * @since 2.2\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
        "signature": "AnnotatedMember member",
        "snippet": "AnnotatedMember member = std_deserializer1_expr10_line_967;\nint PROBE_START_LINE_968 = 978;",
        "begin_line": 1004,
        "end_line": 1005,
        "comment": "    \n     * Helper method that can be used to see if specified property has annotation\n     * indicating that a converter is to be used for contained values (contents\n     * of structured types; array/List/Map values)\n     * \n     * @param existingDeserializer (optional) configured content\n     *    serializer if one already exists.\n     * \n     * @since 2.2\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
        "signature": "JavaType delegateType",
        "snippet": "JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());\nif (existingDeserializer == null) {\nexistingDeserializer = ctxt.findContextualValueDeserializer(delegateType, prop);",
        "begin_line": 1023,
        "end_line": 1025,
        "comment": "    \n     * Helper method that can be used to see if specified property has annotation\n     * indicating that a converter is to be used for contained values (contents\n     * of structured types; array/List/Map values)\n     * \n     * @param existingDeserializer (optional) configured content\n     *    serializer if one already exists.\n     * \n     * @since 2.2\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
        "signature": "boolean std_deserializer1_expr14_line_1001",
        "snippet": "boolean std_deserializer1_expr14_line_1001 = p_prop_3087_line_1001 != null;\nint PROBE_END_LINE_1001 = 1003;",
        "begin_line": 1057,
        "end_line": 1058,
        "comment": "    \n     * Helper method that may be used to find if this deserializer has specific\n     * {@link JsonFormat} settings, either via property, or through type-specific\n     * defaulting.\n     *\n     * @param typeForDefaults Type (erased) used for finding default format settings, if any\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
        "signature": "int PROBE_START_LINE_1005",
        "snippet": "int PROBE_START_LINE_1005 = 1005;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_3086_line_1005 = ctxt;",
        "begin_line": 1071,
        "end_line": 1072,
        "comment": "    \n     * Helper method that may be used to find if this deserializer has specific\n     * {@link JsonFormat} settings, either via property, or through type-specific\n     * defaulting.\n     *\n     * @param typeForDefaults Type (erased) used for finding default format settings, if any\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
        "signature": "int PROBE_START_LINE_1066",
        "snippet": "int PROBE_START_LINE_1066 = 1066;\nJsonDeserializer<?> p_value_deser_3099_line_1066 = valueDeser;",
        "begin_line": 1190,
        "end_line": 1191,
        "comment": "    \n     * Method called to find {@link NullValueProvider} for a contents of a structured\n     * primary property (Collection, Map, array), using\n     * \"content nulls\" setting. If no provider found (not defined),\n     * will return given value deserializer (which is a null value provider itself).\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
        "signature": "int PROBE_START_LINE_33",
        "snippet": "int PROBE_START_LINE_33 = 35;\nConstructor<?> p_constructor_3428_line_33 = constructor;",
        "begin_line": 35,
        "end_line": 36,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
        "signature": "boolean annotated_constructor1_expr2_line_33",
        "snippet": "boolean annotated_constructor1_expr2_line_33 = p_constructor_3428_line_33 == null;\nint PROBE_END_LINE_33 = 35;",
        "begin_line": 37,
        "end_line": 38,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
        "signature": "int PROBE_START_LINE_88",
        "snippet": "int PROBE_START_LINE_88 = 88;\nConstructor<?> f__constructor_3431_line_88 = _constructor;",
        "begin_line": 100,
        "end_line": 101,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
        "signature": "int annotated_constructor1_expr3_line_88",
        "snippet": "int annotated_constructor1_expr3_line_88 = annotated_constructor1_expr4_line_88.length;\nint PROBE_END_LINE_88 = 88;",
        "begin_line": 103,
        "end_line": 104,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
        "signature": "int f_length_1316_line_95",
        "snippet": "int f_length_1316_line_95 = v_types_3435_line_95.length;\nboolean annotated_constructor1_expr9_line_95 = p_index_3434_line_95 >= f_length_1316_line_95;",
        "begin_line": 119,
        "end_line": 120,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
        "signature": "Type[] types",
        "snippet": "Type[] types = annotated_constructor1_expr10_line_100;\nint PROBE_START_LINE_101 = 103;",
        "begin_line": 139,
        "end_line": 140,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
        "signature": "int p_index_3436_line_101",
        "snippet": "int p_index_3436_line_101 = index;\njava.lang.reflect.Type[] v_types_3437_line_101 = types;",
        "begin_line": 141,
        "end_line": 142,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_48",
        "snippet": "int PROBE_END_LINE_48 = 48;\n\nprotected final static TypeBindings EMPTY_BINDINGS = type_factory1_expr3_line_48;",
        "begin_line": 60,
        "end_line": 62,
        "comment": "    \n     * Globally shared singleton. Not accessed directly; non-core\n     * code should use per-ObjectMapper instance (via configuration objects).\n     * Core Jackson code uses {@link #defaultInstance} for accessing it.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_67",
        "snippet": "int PROBE_START_LINE_67 = 67;\n\nprivate static final Class<Boolean> f_type_3779_line_67 = Boolean.TYPE;",
        "begin_line": 81,
        "end_line": 83,
        "comment": "       parts of processing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_67",
        "snippet": "int PROBE_END_LINE_67 = 67;\n\nprivate final static Class<?> CLS_BOOL = f_type_3779_line_67;",
        "begin_line": 85,
        "end_line": 87,
        "comment": "       parts of processing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_68",
        "snippet": "int PROBE_END_LINE_68 = 68;\n\nprivate final static Class<?> CLS_INT = f_type_3781_line_68;",
        "begin_line": 92,
        "end_line": 94,
        "comment": "       parts of processing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_78",
        "snippet": "int PROBE_START_LINE_78 = 78;\n\nprotected static final Class<?> f_cls_bool_5598_line_78 = CLS_BOOL;",
        "begin_line": 109,
        "end_line": 111,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_86",
        "snippet": "int PROBE_END_LINE_86 = 86;\n\n// @since 2.7\nprotected final static SimpleType CORE_TYPE_OBJECT = new SimpleType(f_cls_object_5594_line_86);",
        "begin_line": 145,
        "end_line": 148,
        "comment": "\t and as to String... well, for now, ignore its super types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_88",
        "snippet": "int PROBE_START_LINE_88 = 94;\n\nprotected static final Class<?> f_cls_comparable_5595_line_94 = CLS_COMPARABLE;",
        "begin_line": 150,
        "end_line": 152,
        "comment": "\t @since 2.7"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_88",
        "snippet": "int PROBE_END_LINE_88 = 94;\n\n/**\n* Cache {@link Comparable} because it is both parameteric (relatively costly to\n* resolve) and mostly useless (no special handling), better handle directly\n*\n* @since 2.7\n*/\nprotected final static SimpleType CORE_TYPE_COMPARABLE = new SimpleType(f_cls_comparable_5595_line_94);",
        "begin_line": 154,
        "end_line": 162,
        "comment": "\t @since 2.7"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_211",
        "snippet": "int PROBE_END_LINE_211 = 211;\nreturn f_instance_5591_line_211; }\n\n/**\n* Method that will clear up any cached type definitions that may\n* be cached by this {@link TypeFactory} instance.\n* This method should not be commonly used, that is, only use it\n* if you know there is a problem with retention of type definitions;",
        "begin_line": 300,
        "end_line": 307,
        "comment": "    \n     * Method used to access the globally shared instance, which has\n     * no custom configuration. Used by <code>ObjectMapper</code> to\n     * get the default factory when constructed.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int type_factory1_expr27_line_274",
        "snippet": "int type_factory1_expr27_line_274 = p_class_name_5622_line_274.indexOf('.');\nboolean type_factory1_expr26_line_274 = type_factory1_expr27_line_274 < 0;",
        "begin_line": 374,
        "end_line": 375,
        "comment": "    \n     * Low-level lookup method moved from {@link com.fasterxml.jackson.databind.util.ClassUtil},\n     * to allow for overriding of lookup functionality in environments like OSGi.\n     *\n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_274",
        "snippet": "int PROBE_END_LINE_274 = 279;\nif (type_factory1_expr26_line_274) {\nClass<?> prim = _findPrimitive(className);",
        "begin_line": 376,
        "end_line": 378,
        "comment": "    \n     * Low-level lookup method moved from {@link com.fasterxml.jackson.databind.util.ClassUtil},\n     * to allow for overriding of lookup functionality in environments like OSGi.\n     *\n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "Throwable prob",
        "snippet": "Throwable prob = null;\nint PROBE_START_LINE_282 = 282;",
        "begin_line": 384,
        "end_line": 385,
        "comment": "         Two-phase lookup: first using context ClassLoader; then default"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "ClassLoader v_loader_5624_line_288",
        "snippet": "ClassLoader v_loader_5624_line_288 = loader;\nClass<?> type_factory1_expr35_line_288 = classForName(p_class_name_5622_line_288, true,\nv_loader_5624_line_288);",
        "begin_line": 408,
        "end_line": 410,
        "comment": "         Two-phase lookup: first using context ClassLoader; then default"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "JavaType superType",
        "snippet": "JavaType superType = baseType.findSuperType(superClass);\nif (superType == null) {\n// Most likely, caller did not verify sub/super-type relationship\nif (!superClass.isAssignableFrom(rawBase)) {\nthrow new IllegalArgumentException(String.format(\n\"Class %s not a super-type of %s\", superClass.getName(), baseType));",
        "begin_line": 744,
        "end_line": 749,
        "comment": "         simple optimization to avoid costly introspection if type-erased type does NOT differ"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "JavaType t",
        "snippet": "JavaType t = result.findSuperType(Map.class);\nJavaType realKT = t.getKeyType();",
        "begin_line": 1088,
        "end_line": 1089,
        "comment": "            type being resolved was non-generic (i.e.element type was ignored)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "JavaType realVT",
        "snippet": "JavaType realVT = t.getContentType();\nif (!realVT.equals(valueType)) {\nthrow new IllegalArgumentException(String.format(\n\"Non-generic Map class %s did not resolve to something with value type %s but %s \",\nClassUtil.nameOf(mapClass), valueType, realVT));",
        "begin_line": 1095,
        "end_line": 1099,
        "comment": "            type being resolved was non-generic (i.e.element type was ignored)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_833",
        "snippet": "int PROBE_START_LINE_833 = 833;\ncom.fasterxml.jackson.databind.type.MapType v_result_5682_line_833 = result;",
        "begin_line": 1102,
        "end_line": 1103,
        "comment": "            type being resolved was non-generic (i.e.element type was ignored)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int len",
        "snippet": "int len = parameterClasses.length;\nJavaType[] pt = new JavaType[len];",
        "begin_line": 1215,
        "end_line": 1216,
        "comment": "    \n     * Factory method for constructing {@link JavaType} that\n     * represents a parameterized type. For example, to represent\n     * type <code>List&lt;Set&lt;Integer>></code>, you could\n     * call\n     *<pre>\n     *  JavaType inner = TypeFactory.constructParametricType(Set.class, Set.class, Integer.class);\n     *  return TypeFactory.constructParametricType(ArrayList.class, List.class, inner);\n     *</pre>\n     *<p>\n     * The reason for first two arguments to be separate is that parameterization may\n     * apply to a super-type. For example, if generic type was instead to be\n     * constructed for <code>ArrayList&lt;Integer></code>, the usual call would be:\n     *<pre>\n     *  TypeFactory.constructParametricType(ArrayList.class, List.class, Integer.class);\n     *</pre>\n     * since parameterization is applied to {@link java.util.List}.\n     * In most cases distinction does not matter, but there are types where it does;\n     * one such example is parameterization of types that implement {@link java.util.Iterator}.\n     *<p>\n     * NOTE: type modifiers are NOT called on constructed type.\n     * \n     * @param parametrized Actual full type\n     * @param parameterClasses Type parameters to apply\n     *\n     * @since 2.5 NOTE: was briefly deprecated for 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "boolean type_factory1_expr81_line_1086",
        "snippet": "boolean type_factory1_expr81_line_1086 = p_raw_class_5711_line_1086 == Properties.class;\nint PROBE_END_LINE_1086 = 1102;",
        "begin_line": 1359,
        "end_line": 1360,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_1089",
        "snippet": "int PROBE_START_LINE_1089 = 1089;\ncom.fasterxml.jackson.databind.type.TypeBindings p_bindings_5712_line_1089 = bindings;",
        "begin_line": 1365,
        "end_line": 1366,
        "comment": "\t\t 28-May-2015, tatu: Properties are special, as per [databind#810]; fake \"correct\" parameter sig"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "List<JavaType> type_factory1_expr82_line_1089",
        "snippet": "List<JavaType> type_factory1_expr82_line_1089 = p_bindings_5712_line_1089.getTypeParameters();\nint PROBE_END_LINE_1089 = 1089;",
        "begin_line": 1367,
        "end_line": 1368,
        "comment": "\t\t 28-May-2015, tatu: Properties are special, as per [databind#810]; fake \"correct\" parameter sig"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "List<JavaType> typeParams",
        "snippet": "List<JavaType> typeParams = type_factory1_expr82_line_1089;\nint PROBE_START_LINE_1091 = 1101;",
        "begin_line": 1369,
        "end_line": 1370,
        "comment": "\t\t 28-May-2015, tatu: Properties are special, as per [databind#810]; fake \"correct\" parameter sig"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_1096",
        "snippet": "int PROBE_START_LINE_1096 = 1096;\nList<com.fasterxml.jackson.databind.JavaType> v_type_params_5715_line_1096 = typeParams;",
        "begin_line": 1380,
        "end_line": 1381,
        "comment": "\t\t\t ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_1096",
        "snippet": "int PROBE_END_LINE_1096 = 1096;\nkt = type_factory1_expr84_line_1096;",
        "begin_line": 1384,
        "end_line": 1385,
        "comment": "\t\t\t ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_1097",
        "snippet": "int PROBE_START_LINE_1097 = 1097;\nList<com.fasterxml.jackson.databind.JavaType> v_type_params_5715_line_1097 = typeParams;",
        "begin_line": 1386,
        "end_line": 1387,
        "comment": "\t\t\t ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_1103",
        "snippet": "int PROBE_END_LINE_1103 = 1103;\nreturn type_factory1_expr88_line_1103;",
        "begin_line": 1407,
        "end_line": 1408,
        "comment": "\t\t\t ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_1109",
        "snippet": "int PROBE_START_LINE_1109 = 1109;\ncom.fasterxml.jackson.databind.type.TypeBindings p_bindings_5719_line_1109 = bindings;",
        "begin_line": 1414,
        "end_line": 1415,
        "comment": "\t\t\t ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_1113",
        "snippet": "int PROBE_START_LINE_1113 = 1113;\ncom.fasterxml.jackson.databind.JavaType type_factory1_expr91_line_1113 = _unknownType();",
        "begin_line": 1426,
        "end_line": 1427,
        "comment": "         ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int type_factory1_expr93_line_1114",
        "snippet": "int type_factory1_expr93_line_1114 = v_type_params_5722_line_1114.size();\nboolean type_factory1_expr92_line_1114 = type_factory1_expr93_line_1114 == 1;",
        "begin_line": 1433,
        "end_line": 1434,
        "comment": "         ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_1114",
        "snippet": "int PROBE_END_LINE_1114 = 1118;\nif (type_factory1_expr92_line_1114) {\nct = typeParams.get(0);",
        "begin_line": 1435,
        "end_line": 1437,
        "comment": "         ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_1119",
        "snippet": "int PROBE_START_LINE_1119 = 1119;\nClass<?> p_raw_class_5718_line_1119 = rawClass;",
        "begin_line": 1443,
        "end_line": 1444,
        "comment": "         ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_1119",
        "snippet": "int PROBE_END_LINE_1119 = 1119;\nreturn type_factory1_expr96_line_1119;",
        "begin_line": 1452,
        "end_line": 1453,
        "comment": "         ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "signature": "int PROBE_START_LINE_27",
        "snippet": "int PROBE_START_LINE_27 = 30;\n\nprotected static final com.fasterxml.jackson.databind.cfg.ConfigOverride mapper_config_base1_expr1_line_30 = ConfigOverride\n.empty();",
        "begin_line": 30,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "signature": "int PROBE_END_LINE_27",
        "snippet": "int PROBE_END_LINE_27 = 30;\n\n/**\n* @since 2.9\n*/\nprotected final static ConfigOverride EMPTY_OVERRIDE = mapper_config_base1_expr1_line_30;",
        "begin_line": 35,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "signature": "int PROBE_END_LINE_133",
        "snippet": "int PROBE_END_LINE_133 = 133;\n_configOverrides = p_config_overrides_1379_line_133;",
        "begin_line": 164,
        "end_line": 165,
        "comment": "\t\t default to \"no attributes\""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "signature": "int PROBE_START_LINE_603",
        "snippet": "int PROBE_START_LINE_603 = 603;\ncom.fasterxml.jackson.databind.cfg.ConfigOverrides f__config_overrides_1387_line_603 = _configOverrides;",
        "begin_line": 707,
        "end_line": 708,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "signature": "int PROBE_END_LINE_603",
        "snippet": "int PROBE_END_LINE_603 = 603;\nConfigOverride override = mapper_config_base1_expr11_line_603;",
        "begin_line": 712,
        "end_line": 713,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/NamedType.java",
        "signature": "int PROBE_START_LINE_19",
        "snippet": "int PROBE_START_LINE_19 = 19;\nClass<?> p_c_4451_line_19 = c;",
        "begin_line": 19,
        "end_line": 20,
        "comment": "\n * Simple container class for types with optional logical name, used\n * as external identifier\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/NamedType.java",
        "signature": "int PROBE_END_LINE_19",
        "snippet": "int PROBE_END_LINE_19 = 19;\n_class = p_c_4451_line_19;",
        "begin_line": 21,
        "end_line": 22,
        "comment": "\n * Simple container class for types with optional logical name, used\n * as external identifier\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/NamedType.java",
        "signature": "int PROBE_START_LINE_20",
        "snippet": "int PROBE_START_LINE_20 = 20;\nClass<?> p_c_4451_line_20 = c;",
        "begin_line": 23,
        "end_line": 24,
        "comment": "\n * Simple container class for types with optional logical name, used\n * as external identifier\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/NamedType.java",
        "signature": "String named_type1_expr3_line_20",
        "snippet": "String named_type1_expr3_line_20 = p_c_4451_line_20.getName();\nint named_type1_expr2_line_20 = named_type1_expr3_line_20.hashCode();",
        "begin_line": 25,
        "end_line": 26,
        "comment": "\n * Simple container class for types with optional logical name, used\n * as external identifier\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/NamedType.java",
        "signature": "int PROBE_END_LINE_20",
        "snippet": "int PROBE_END_LINE_20 = 20;\n_hashCode = named_type1_expr2_line_20;",
        "begin_line": 27,
        "end_line": 28,
        "comment": "\n * Simple container class for types with optional logical name, used\n * as external identifier\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "signature": "int PROBE_START_LINE_84",
        "snippet": "int PROBE_START_LINE_84 = 85;\ncom.fasterxml.jackson.databind.deser.Deserializers[] p_all_additional_deserializers_1301_line_84 = allAdditionalDeserializers;",
        "begin_line": 88,
        "end_line": 89,
        "comment": "    \n     * Copy-constructor that will create an instance that contains defined\n     * set of additional deserializer providers.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "signature": "boolean deserializer_factory_config1_expr9_line_84",
        "snippet": "boolean deserializer_factory_config1_expr9_line_84 = p_all_additional_deserializers_1301_line_84 == null;\nboolean deserializer_factory_config1_expr8_line_84 = (deserializer_factory_config1_expr9_line_84);",
        "begin_line": 90,
        "end_line": 91,
        "comment": "    \n     * Copy-constructor that will create an instance that contains defined\n     * set of additional deserializer providers.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LinkedNode",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/LinkedNode.java",
        "signature": "int PROBE_START_LINE_16",
        "snippet": "int PROBE_START_LINE_16 = 16;\nT p_value_5979_line_16 = value;",
        "begin_line": 16,
        "end_line": 17,
        "comment": "\n * Node of a forward-only linked list.\n * \n * @author tatu\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LinkedNode",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/LinkedNode.java",
        "signature": "int PROBE_END_LINE_16",
        "snippet": "int PROBE_END_LINE_16 = 16;\nthis.value = p_value_5979_line_16;",
        "begin_line": 18,
        "end_line": 19,
        "comment": "\n * Node of a forward-only linked list.\n * \n * @author tatu\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/MapLikeType.java",
        "signature": "int PROBE_START_LINE_41",
        "snippet": "int PROBE_START_LINE_41 = 41;\ncom.fasterxml.jackson.databind.JavaType p_key_t_5378_line_41 = keyT;",
        "begin_line": 41,
        "end_line": 42,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/MapLikeType.java",
        "signature": "int PROBE_END_LINE_41",
        "snippet": "int PROBE_END_LINE_41 = 41;\n_keyType = p_key_t_5378_line_41;",
        "begin_line": 43,
        "end_line": 44,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/MapLikeType.java",
        "signature": "int PROBE_START_LINE_150",
        "snippet": "int PROBE_START_LINE_150 = 150;\ncom.fasterxml.jackson.databind.JavaType p_src_5401_line_150 = src;",
        "begin_line": 156,
        "end_line": 157,
        "comment": "    \n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/MapLikeType.java",
        "signature": "JavaType type",
        "snippet": "JavaType type = map_like_type1_expr4_line_150;\nint PROBE_START_LINE_151 = 151;",
        "begin_line": 160,
        "end_line": 161,
        "comment": "    \n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/MapLikeType.java",
        "signature": "JavaType map_like_type1_expr5_line_151",
        "snippet": "JavaType map_like_type1_expr5_line_151 = p_src_5401_line_151.getKeyType();\nint PROBE_END_LINE_151 = 151;",
        "begin_line": 163,
        "end_line": 164,
        "comment": "    \n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/MapLikeType.java",
        "signature": "boolean map_like_type1_expr6_line_153",
        "snippet": "boolean map_like_type1_expr6_line_153 = v_type_5402_line_153 instanceof MapLikeType;\nint PROBE_END_LINE_153 = 160;",
        "begin_line": 168,
        "end_line": 169,
        "comment": "    \n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/MapLikeType.java",
        "signature": "int PROBE_END_LINE_163",
        "snippet": "int PROBE_END_LINE_163 = 163;\nJavaType ct = map_like_type1_expr12_line_163;",
        "begin_line": 209,
        "end_line": 210,
        "comment": "\t\t \"withKeyType()\" not part of JavaType, hence must verify:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/MapLikeType.java",
        "signature": "boolean map_like_type1_expr13_line_164",
        "snippet": "boolean map_like_type1_expr13_line_164 = v_ct_5406_line_164 != f__value_type_5384_line_164;\nint PROBE_END_LINE_164 = 166;",
        "begin_line": 214,
        "end_line": 215,
        "comment": "\t\t \"withKeyType()\" not part of JavaType, hence must verify:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/MapLikeType.java",
        "signature": "int PROBE_START_LINE_168",
        "snippet": "int PROBE_START_LINE_168 = 168;\ncom.fasterxml.jackson.databind.JavaType v_type_5402_line_168 = type;",
        "begin_line": 220,
        "end_line": 221,
        "comment": "\t\t \"withKeyType()\" not part of JavaType, hence must verify:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/MapLikeType.java",
        "signature": "int PROBE_START_LINE_225",
        "snippet": "int PROBE_START_LINE_225 = 225;\ncom.fasterxml.jackson.databind.JavaType f__value_type_5384_line_225 = _valueType;",
        "begin_line": 283,
        "end_line": 284,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/MapLikeType.java",
        "signature": "int PROBE_START_LINE_240",
        "snippet": "int PROBE_START_LINE_240 = 241;\nboolean map_like_type1_expr17_line_240 = super.hasHandlers();",
        "begin_line": 301,
        "end_line": 302,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/MapLikeType.java",
        "signature": "boolean map_like_type1_expr18_line_240",
        "snippet": "boolean map_like_type1_expr18_line_240 = false;\nif (!map_like_type1_expr17_line_240) {\ncom.fasterxml.jackson.databind.JavaType f__value_type_5384_line_240 = _valueType;",
        "begin_line": 303,
        "end_line": 305,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.MapType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/MapType.java",
        "signature": "int PROBE_START_LINE_40",
        "snippet": "int PROBE_START_LINE_40 = 40;\nClass<?> p_raw_type_5429_line_40 = rawType;",
        "begin_line": 40,
        "end_line": 41,
        "comment": "    \n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
        "signature": "int PROBE_START_LINE_21",
        "snippet": "int PROBE_START_LINE_21 = 21;\n\nstatic final char[] uuidserializer1_expr1_line_21 = \"0123456789abcdef\".toCharArray();",
        "begin_line": 21,
        "end_line": 23,
        "comment": "\n * Specialized {@link JsonSerializer} to output {@link java.util.UUID}s.\n * Beyond optimized access and writing of textual representation (which\n * is the default handling in most cases), it will alternatively\n * allow serialization using raw binary output (as 16-byte block)\n * if underlying data format has efficient means to access that.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "signature": "int PROBE_END_LINE_23",
        "snippet": "int PROBE_END_LINE_23 = 29;\n\n/**\n* Special placeholder value that indicates that name to use should be\n* based on the standard heuristics. This can be different from returning\n* null, as null means \"no information available, whereas this value\n* indicates explicit defaulting.\n*/\npublic final static PropertyName USE_DEFAULT = new PropertyName(f___use_default_1005_line_29, null);",
        "begin_line": 27,
        "end_line": 35,
        "comment": "\n * Simple value class used for containing names of properties as defined\n * by annotations (and possibly other configuration sources).\n * \n * @since 2.1\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "signature": "int PROBE_START_LINE_92",
        "snippet": "int PROBE_START_LINE_92 = 94;\nString p_simple_name_1013_line_92 = simpleName;",
        "begin_line": 111,
        "end_line": 112,
        "comment": "    \n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "signature": "boolean property_name1_expr7_line_92",
        "snippet": "boolean property_name1_expr7_line_92 = p_simple_name_1013_line_92 == null;\nboolean property_name1_expr8_line_92 = false;",
        "begin_line": 113,
        "end_line": 114,
        "comment": "    \n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "signature": "int property_name1_expr9_line_92",
        "snippet": "int property_name1_expr9_line_92 = simpleName.length();\nproperty_name1_expr8_line_92 = property_name1_expr9_line_92 == 0;",
        "begin_line": 116,
        "end_line": 117,
        "comment": "    \n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "signature": "int PROBE_END_LINE_114",
        "snippet": "int PROBE_END_LINE_114 = 114;\nString interned = property_name1_expr14_line_114;",
        "begin_line": 157,
        "end_line": 158,
        "comment": "    \n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
        "signature": "int PROBE_START_LINE_67",
        "snippet": "int PROBE_START_LINE_67 = 67;\nMap<Class<?>, com.fasterxml.jackson.databind.cfg.MutableConfigOverride> p_overrides_1256_line_67 = (Map<Class<?>, com.fasterxml.jackson.databind.cfg.MutableConfigOverride>) (overrides);",
        "begin_line": 69,
        "end_line": 70,
        "comment": "                 !!! TODO: change to (ALWAYS, ALWAYS)?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
        "signature": "int PROBE_END_LINE_67",
        "snippet": "int PROBE_END_LINE_67 = 67;\n_overrides = p_overrides_1256_line_67;",
        "begin_line": 71,
        "end_line": 72,
        "comment": "                 !!! TODO: change to (ALWAYS, ALWAYS)?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
        "signature": "MutableConfigOverride override",
        "snippet": "MutableConfigOverride override = _overrides.get(type);\nif (override == null) {\noverride = new MutableConfigOverride();",
        "begin_line": 127,
        "end_line": 129,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBase.java",
        "signature": "int PROBE_END_LINE_87",
        "snippet": "int PROBE_END_LINE_87 = 87;\nreturn f__bindings_5363_line_87;",
        "begin_line": 116,
        "end_line": 117,
        "comment": "    \n     * Copy-constructor used when refining/upgrading type instances.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBase.java",
        "signature": "int PROBE_START_LINE_92",
        "snippet": "int PROBE_START_LINE_92 = 92;\ncom.fasterxml.jackson.databind.type.TypeBindings f__bindings_5363_line_92 = _bindings;",
        "begin_line": 122,
        "end_line": 123,
        "comment": "    \n     * Copy-constructor used when refining/upgrading type instances.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/CollectionType.java",
        "signature": "int PROBE_START_LINE_40",
        "snippet": "int PROBE_START_LINE_40 = 41;\nClass<?> p_raw_type_5354_line_40 = rawType;",
        "begin_line": 40,
        "end_line": 41,
        "comment": "    \n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/CollectionType.java",
        "signature": "int PROBE_START_LINE_76",
        "snippet": "int PROBE_START_LINE_76 = 77;\nClass<?> f__class_457_line_76 = _class;",
        "begin_line": 88,
        "end_line": 89,
        "comment": "                 !!! TODO: Wrong, does have supertypes, but:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_131",
        "snippet": "int PROBE_START_LINE_131 = 131;\nboolean p_for_serialization_4095_line_131 = forSerialization;",
        "begin_line": 156,
        "end_line": 157,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_132",
        "snippet": "int PROBE_START_LINE_132 = 132;\ncom.fasterxml.jackson.databind.JavaType p_type_4096_line_132 = type;",
        "begin_line": 160,
        "end_line": 161,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr5_line_134",
        "snippet": "boolean pojoproperties_collector1_expr5_line_134 = p_mutator_prefix_4098_line_134 == null;\nboolean pojoproperties_collector1_expr3_line_134 = (pojoproperties_collector1_expr5_line_134);",
        "begin_line": 170,
        "end_line": 171,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_134",
        "snippet": "int PROBE_END_LINE_134 = 134;\n_mutatorPrefix = pojoproperties_collector1_expr2_line_134;",
        "begin_line": 175,
        "end_line": 176,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_135",
        "snippet": "int PROBE_START_LINE_135 = 141;\nMapperConfig<?> p_config_4094_line_135 = config;",
        "begin_line": 177,
        "end_line": 178,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_170",
        "snippet": "int PROBE_END_LINE_170 = 170;\n// make sure we return a copy, so caller can remove entries if need be:\nMap<String, POJOPropertyBuilder> props = pojoproperties_collector1_expr11_line_170;",
        "begin_line": 237,
        "end_line": 239,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_228",
        "snippet": "int PROBE_START_LINE_228 = 230;\nboolean f__collected_4110_line_228 = _collected;",
        "begin_line": 309,
        "end_line": 310,
        "comment": "             otherwise we won't greatly care"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr15_line_228",
        "snippet": "boolean pojoproperties_collector1_expr15_line_228 = !f__collected_4110_line_228;\nint PROBE_END_LINE_228 = 230;",
        "begin_line": 311,
        "end_line": 312,
        "comment": "             otherwise we won't greatly care"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr16_line_231",
        "snippet": "boolean pojoproperties_collector1_expr16_line_231 = f__any_setter_field_4112_line_231 != null;\nint PROBE_END_LINE_231 = 237;",
        "begin_line": 318,
        "end_line": 319,
        "comment": "             otherwise we won't greatly care"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr17_line_243",
        "snippet": "boolean pojoproperties_collector1_expr17_line_243 = !f__collected_4110_line_243;\nint PROBE_END_LINE_243 = 245;",
        "begin_line": 334,
        "end_line": 335,
        "comment": "             otherwise we won't greatly care"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_261",
        "snippet": "int PROBE_START_LINE_261 = 261;\nHashSet<String> f__ignored_property_names_4114_line_261 = _ignoredPropertyNames;",
        "begin_line": 358,
        "end_line": 359,
        "comment": "    \n     * Accessor for set of properties that are explicitly marked to be ignored\n     * via per-property markers (but NOT class annotations).\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_270",
        "snippet": "int PROBE_START_LINE_270 = 270;\ncom.fasterxml.jackson.databind.AnnotationIntrospector f__annotation_introspector_4107_line_270 = _annotationIntrospector;",
        "begin_line": 370,
        "end_line": 371,
        "comment": "    \n     * Accessor to find out whether type specified requires inclusion\n     * of Object Identifier.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_270",
        "snippet": "int PROBE_END_LINE_270 = 270;\nObjectIdInfo info = pojoproperties_collector1_expr19_line_270;",
        "begin_line": 375,
        "end_line": 376,
        "comment": "    \n     * Accessor to find out whether type specified requires inclusion\n     * of Object Identifier.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_271",
        "snippet": "int PROBE_START_LINE_271 = 273;\ncom.fasterxml.jackson.databind.introspect.ObjectIdInfo v_info_4115_line_271 = info;",
        "begin_line": 377,
        "end_line": 378,
        "comment": "    \n     * Accessor to find out whether type specified requires inclusion\n     * of Object Identifier.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr20_line_271",
        "snippet": "boolean pojoproperties_collector1_expr20_line_271 = v_info_4115_line_271 != null;\nint PROBE_END_LINE_271 = 273;",
        "begin_line": 379,
        "end_line": 380,
        "comment": "    \n     * Accessor to find out whether type specified requires inclusion\n     * of Object Identifier.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr21_line_286",
        "snippet": "boolean pojoproperties_collector1_expr21_line_286 = !f__collected_4110_line_286;\nint PROBE_END_LINE_286 = 288;",
        "begin_line": 401,
        "end_line": 402,
        "comment": "     for unit tests:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_308",
        "snippet": "int PROBE_START_LINE_308 = 308;\nLinkedHashMap<String, com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder> v_props_4117_line_308 = props;",
        "begin_line": 427,
        "end_line": 428,
        "comment": "    \n     * Internal method that will collect actual property information.\n     *\n     * @since 2.6\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_312",
        "snippet": "int PROBE_END_LINE_312 = 314;\n// 25-Jan-2016, tatu: Avoid introspecting (constructor-)creators for non-static\n//    inner classes, see [databind#1502]\nif (pojoproperties_collector1_expr26_line_312) {\nint PROBE_START_LINE_313 = 313;",
        "begin_line": 440,
        "end_line": 444,
        "comment": "\t\t First: gather basic data"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_313",
        "snippet": "int PROBE_END_LINE_313 = 313;\n_addCreators(v_props_4117_line_313);",
        "begin_line": 446,
        "end_line": 447,
        "comment": "            inner classes, see [databind#1502]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_315",
        "snippet": "int PROBE_START_LINE_315 = 315;\nLinkedHashMap<String, com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder> v_props_4117_line_315 = props;",
        "begin_line": 449,
        "end_line": 450,
        "comment": "            inner classes, see [databind#1502]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_319",
        "snippet": "int PROBE_END_LINE_319 = 319;\n// Remove ignored properties, first; this MUST precede annotation merging\n// since logic relies on knowing exactly which accessor has which annotation\n_removeUnwantedProperties(v_props_4117_line_319);",
        "begin_line": 456,
        "end_line": 459,
        "comment": "            inner classes, see [databind#1502]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_321",
        "snippet": "int PROBE_START_LINE_321 = 321;\nLinkedHashMap<String, com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder> v_props_4117_line_321 = props;",
        "begin_line": 460,
        "end_line": 461,
        "comment": "         since logic relies on knowing exactly which accessor has which annotation"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_321",
        "snippet": "int PROBE_END_LINE_321 = 321;\n// and then remove unneeded accessors (wrt read-only, read-write)\n_removeUnwantedAccessor(v_props_4117_line_321);",
        "begin_line": 462,
        "end_line": 464,
        "comment": "         since logic relies on knowing exactly which accessor has which annotation"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_324",
        "snippet": "int PROBE_START_LINE_324 = 324;\nLinkedHashMap<String, com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder> v_props_4117_line_324 = props;",
        "begin_line": 466,
        "end_line": 467,
        "comment": "\t\t and then remove unneeded accessors (wrt read-only, read-write)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_324",
        "snippet": "int PROBE_END_LINE_324 = 324;\n// Rename remaining properties\n_renameProperties(v_props_4117_line_324);",
        "begin_line": 468,
        "end_line": 470,
        "comment": "\t\t and then remove unneeded accessors (wrt read-only, read-write)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_329",
        "snippet": "int PROBE_START_LINE_329 = 331;\nLinkedHashMap<String, com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder> v_props_4117_line_329 = props;",
        "begin_line": 472,
        "end_line": 473,
        "comment": "\t\t Rename remaining properties"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_329",
        "snippet": "int PROBE_END_LINE_329 = 331;\n// then merge annotations, to simplify further processing\n// 26-Sep-2017, tatu: Before 2.9.2 was done earlier but that prevented some of\n//   annotations from getting properly merged\nfor (POJOPropertyBuilder property : pojoproperties_collector1_expr33_line_329) {\nint PROBE_START_LINE_330 = 330;",
        "begin_line": 476,
        "end_line": 481,
        "comment": "\t\t Rename remaining properties"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_334",
        "snippet": "int PROBE_START_LINE_334 = 334;\nPropertyNamingStrategy pojoproperties_collector1_expr35_line_334 = _findNamingStrategy();",
        "begin_line": 488,
        "end_line": 489,
        "comment": "           annotations from getting properly merged"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_334",
        "snippet": "int PROBE_END_LINE_334 = 334;\n// And use custom naming strategy, if applicable...\nPropertyNamingStrategy naming = pojoproperties_collector1_expr35_line_334;",
        "begin_line": 490,
        "end_line": 492,
        "comment": "           annotations from getting properly merged"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr36_line_335",
        "snippet": "boolean pojoproperties_collector1_expr36_line_335 = v_naming_4119_line_335 != null;\nint PROBE_END_LINE_335 = 337;",
        "begin_line": 495,
        "end_line": 496,
        "comment": "\t\t And use custom naming strategy, if applicable..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_350",
        "snippet": "int PROBE_END_LINE_350 = 352;\n/* and, if required, apply wrapper name: note, MUST be done after\n* annotations are merged.\n*/\nif (pojoproperties_collector1_expr39_line_350) {\n_renameWithWrappers(props);",
        "begin_line": 522,
        "end_line": 527,
        "comment": "\t\t/* Sort by visibility (explicit over implicit); drop all but first\n         * of member type (getter, setter etc) if there is visibility\n         * difference\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_355",
        "snippet": "int PROBE_START_LINE_355 = 355;\nLinkedHashMap<String, com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder> v_props_4117_line_355 = props;",
        "begin_line": 530,
        "end_line": 531,
        "comment": "\t\t/* and, if required, apply wrapper name: note, MUST be done after\n         * annotations are merged.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_355",
        "snippet": "int PROBE_END_LINE_355 = 355;\n// well, almost last: there's still ordering...\n_sortProperties(v_props_4117_line_355);",
        "begin_line": 532,
        "end_line": 534,
        "comment": "\t\t/* and, if required, apply wrapper name: note, MUST be done after\n         * annotations are merged.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_356",
        "snippet": "int PROBE_START_LINE_356 = 356;\nLinkedHashMap<String, com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder> v_props_4117_line_356 = props;",
        "begin_line": 535,
        "end_line": 536,
        "comment": "\t\t well, almost last: there's still ordering..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_371",
        "snippet": "int PROBE_START_LINE_371 = 371;\nAnnotationIntrospector f__annotation_introspector_4107_line_371 = _annotationIntrospector;",
        "begin_line": 553,
        "end_line": 554,
        "comment": "    \n     * Method for collecting basic information on all fields found\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr43_line_376",
        "snippet": "boolean pojoproperties_collector1_expr43_line_376 = !f__for_serialization_4102_line_376;\nboolean pojoproperties_collector1_expr44_line_376 = true;",
        "begin_line": 559,
        "end_line": 560,
        "comment": "    \n     * Method for collecting basic information on all fields found\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_377",
        "snippet": "int PROBE_START_LINE_377 = 377;\nMapperConfig<?> f__config_4099_line_377 = _config;",
        "begin_line": 576,
        "end_line": 577,
        "comment": "\t\t/* 28-Mar-2013, tatu: For deserialization we may also want to remove\n         *   final fields, as often they won't make very good mutators...\n         *   (although, maybe surprisingly, JVM _can_ force setting of such fields!)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_377",
        "snippet": "int PROBE_END_LINE_377 = 377;\nfinal boolean transientAsIgnoral = pojoproperties_collector1_expr46_line_377;",
        "begin_line": 581,
        "end_line": 582,
        "comment": "\t\t/* 28-Mar-2013, tatu: For deserialization we may also want to remove\n         *   final fields, as often they won't make very good mutators...\n         *   (although, maybe surprisingly, JVM _can_ force setting of such fields!)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_379",
        "snippet": "int PROBE_START_LINE_379 = 448;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass f__class_def_4104_line_379 = _classDef;",
        "begin_line": 584,
        "end_line": 585,
        "comment": "\t\t/* 28-Mar-2013, tatu: For deserialization we may also want to remove\n         *   final fields, as often they won't make very good mutators...\n         *   (although, maybe surprisingly, JVM _can_ force setting of such fields!)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_379",
        "snippet": "int PROBE_END_LINE_379 = 448;\nfor (AnnotatedField f : pojoproperties_collector1_expr47_line_379) {\nint PROBE_START_LINE_380 = 380;",
        "begin_line": 588,
        "end_line": 590,
        "comment": "\t\t/* 28-Mar-2013, tatu: For deserialization we may also want to remove\n         *   final fields, as often they won't make very good mutators...\n         *   (although, maybe surprisingly, JVM _can_ force setting of such fields!)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_390",
        "snippet": "int PROBE_START_LINE_390 = 396;\nBoolean f_true_966_line_390 = Boolean.TRUE;",
        "begin_line": 613,
        "end_line": 614,
        "comment": "\t\t\t @JsonValue?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_390",
        "snippet": "int PROBE_END_LINE_390 = 396;\n// @JsonAnySetter?\nif (pojoproperties_collector1_expr51_line_390) {\nif (_anySetterField == null) {\n_anySetterField = new LinkedList<AnnotatedMember>();",
        "begin_line": 620,
        "end_line": 624,
        "comment": "\t\t\t @JsonValue?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_397",
        "snippet": "int PROBE_START_LINE_397 = 399;\nString v_impl_name_4129_line_397 = implName;",
        "begin_line": 629,
        "end_line": 630,
        "comment": "\t\t\t @JsonAnySetter?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_402",
        "snippet": "int PROBE_END_LINE_402 = 411;\nif (f__for_serialization_4102_line_402) {\n/* 18-Aug-2011, tatu: As per existing unit tests, we should only\n*   use serialization annotation (@JsonSerialize) when serializing\n*   fields, and similarly for deserialize-only annotations... so\n*   no fallbacks in this particular case.\n*/\npn = ai.findNameForSerialization(f);",
        "begin_line": 644,
        "end_line": 651,
        "comment": "\t\t\t @JsonAnySetter?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_410",
        "snippet": "int PROBE_START_LINE_410 = 410;\ncom.fasterxml.jackson.databind.AnnotationIntrospector v_ai_4123_line_410 = ai;",
        "begin_line": 653,
        "end_line": 654,
        "comment": "                /* 18-Aug-2011, tatu: As per existing unit tests, we should only\n                 *   use serialization annotation (@JsonSerialize) when serializing\n                 *   fields, and similarly for deserialize-only annotations... so\n                 *   no fallbacks in this particular case.\n                 "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_410",
        "snippet": "int PROBE_END_LINE_410 = 410;\npn = pojoproperties_collector1_expr55_line_410;",
        "begin_line": 658,
        "end_line": 659,
        "comment": "                /* 18-Aug-2011, tatu: As per existing unit tests, we should only\n                 *   use serialization annotation (@JsonSerialize) when serializing\n                 *   fields, and similarly for deserialize-only annotations... so\n                 *   no fallbacks in this particular case.\n                 "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_412",
        "snippet": "int PROBE_START_LINE_412 = 412;\ncom.fasterxml.jackson.databind.PropertyName v_pn_4130_line_412 = pn;",
        "begin_line": 661,
        "end_line": 662,
        "comment": "                /* 18-Aug-2011, tatu: As per existing unit tests, we should only\n                 *   use serialization annotation (@JsonSerialize) when serializing\n                 *   fields, and similarly for deserialize-only annotations... so\n                 *   no fallbacks in this particular case.\n                 "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr57_line_412",
        "snippet": "boolean pojoproperties_collector1_expr57_line_412 = v_pn_4130_line_412 != null;\nboolean pojoproperties_collector1_expr56_line_412 = (pojoproperties_collector1_expr57_line_412);",
        "begin_line": 663,
        "end_line": 664,
        "comment": "                /* 18-Aug-2011, tatu: As per existing unit tests, we should only\n                 *   use serialization annotation (@JsonSerialize) when serializing\n                 *   fields, and similarly for deserialize-only annotations... so\n                 *   no fallbacks in this particular case.\n                 "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_412",
        "snippet": "int PROBE_END_LINE_412 = 412;\nboolean hasName = pojoproperties_collector1_expr56_line_412;",
        "begin_line": 665,
        "end_line": 666,
        "comment": "                /* 18-Aug-2011, tatu: As per existing unit tests, we should only\n                 *   use serialization annotation (@JsonSerialize) when serializing\n                 *   fields, and similarly for deserialize-only annotations... so\n                 *   no fallbacks in this particular case.\n                 "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_413",
        "snippet": "int PROBE_START_LINE_413 = 413;\nboolean v_has_name_4131_line_413 = hasName;",
        "begin_line": 667,
        "end_line": 668,
        "comment": "                /* 18-Aug-2011, tatu: As per existing unit tests, we should only\n                 *   use serialization annotation (@JsonSerialize) when serializing\n                 *   fields, and similarly for deserialize-only annotations... so\n                 *   no fallbacks in this particular case.\n                 "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_415",
        "snippet": "int PROBE_START_LINE_415 = 418;\nboolean v_name_explicit_4132_line_415 = nameExplicit;",
        "begin_line": 672,
        "end_line": 673,
        "comment": "                /* 18-Aug-2011, tatu: As per existing unit tests, we should only\n                 *   use serialization annotation (@JsonSerialize) when serializing\n                 *   fields, and similarly for deserialize-only annotations... so\n                 *   no fallbacks in this particular case.\n                 "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_425",
        "snippet": "int PROBE_START_LINE_425 = 425;\ncom.fasterxml.jackson.databind.AnnotationIntrospector v_ai_4123_line_425 = ai;",
        "begin_line": 706,
        "end_line": 707,
        "comment": "\t\t\t having explicit name means that field is visible; otherwise need to check the rules"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr64_line_425",
        "snippet": "boolean pojoproperties_collector1_expr64_line_425 = v_ai_4123_line_425.hasIgnoreMarker(v_f_4128_line_425);\nint PROBE_END_LINE_425 = 425;",
        "begin_line": 709,
        "end_line": 710,
        "comment": "\t\t\t having explicit name means that field is visible; otherwise need to check the rules"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_443",
        "snippet": "int PROBE_START_LINE_443 = 446;\nboolean v_prune_final_fields_4124_line_443 = pruneFinalFields;",
        "begin_line": 729,
        "end_line": 730,
        "comment": "                    \"default\" `transient`"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean v_ignored_4134_line_443",
        "snippet": "boolean v_ignored_4134_line_443 = ignored;\npojoproperties_collector1_expr69_line_443 = !v_ignored_4134_line_443;",
        "begin_line": 738,
        "end_line": 739,
        "comment": "                    \"default\" `transient`"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_443",
        "snippet": "int PROBE_END_LINE_443 = 446;\n/* [databind#190]: this is the place to prune final fields, if they are not\n*  to be used as mutators. Must verify they are not explicitly included.\n*  Also: if 'ignored' is set, need to included until a later point, to\n*  avoid losing ignoral information.\n*/\nif (pojoproperties_collector1_expr66_line_443) {\ncontinue;",
        "begin_line": 745,
        "end_line": 752,
        "comment": "                    \"default\" `transient`"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_457",
        "snippet": "int PROBE_START_LINE_457 = 459;\nboolean f__use_annotations_4106_line_457 = _useAnnotations;",
        "begin_line": 774,
        "end_line": 775,
        "comment": "    \n     * Method for collecting basic information on constructor(s) found\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr72_line_457",
        "snippet": "boolean pojoproperties_collector1_expr72_line_457 = !f__use_annotations_4106_line_457;\nint PROBE_END_LINE_457 = 459;",
        "begin_line": 776,
        "end_line": 777,
        "comment": "    \n     * Method for collecting basic information on constructor(s) found\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr81_line_469",
        "snippet": "boolean pojoproperties_collector1_expr81_line_469 = f__creator_properties_4137_line_469 == null;\nint PROBE_END_LINE_469 = 471;",
        "begin_line": 814,
        "end_line": 815,
        "comment": "\t\t can be null if annotation processing is disabled..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr100_line_534",
        "snippet": "boolean pojoproperties_collector1_expr100_line_534 = v_arg_count_4151_line_534 == 1;\nint PROBE_END_LINE_534 = 545;",
        "begin_line": 941,
        "end_line": 942,
        "comment": "\t\t\t/* For methods, handling differs between getters and setters; and\n             * we will also only consider entries that either follow the bean\n             * naming convention or are explicitly marked: just being visible\n             * is not enough (unlike with fields)\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_553",
        "snippet": "int PROBE_START_LINE_553 = 555;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMethod p_m_4153_line_553 = m;",
        "begin_line": 962,
        "end_line": 963,
        "comment": "\t\t\t/* For methods, handling differs between getters and setters; and\n             * we will also only consider entries that either follow the bean\n             * naming convention or are explicitly marked: just being visible\n             * is not enough (unlike with fields)\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_553",
        "snippet": "int PROBE_END_LINE_553 = 555;\n// Very first thing: skip if not returning any value\nif (pojoproperties_collector1_expr102_line_553) {\nreturn;",
        "begin_line": 966,
        "end_line": 969,
        "comment": "\t\t\t/* For methods, handling differs between getters and setters; and\n             * we will also only consider entries that either follow the bean\n             * naming convention or are explicitly marked: just being visible\n             * is not enough (unlike with fields)\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_567",
        "snippet": "int PROBE_START_LINE_567 = 573;\nBoolean f_true_966_line_567 = Boolean.TRUE;",
        "begin_line": 989,
        "end_line": 990,
        "comment": "         @JsonAnyGetter?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_567",
        "snippet": "int PROBE_END_LINE_567 = 573;\n// @JsonValue?\nif (pojoproperties_collector1_expr106_line_567) {\nif (_jsonValueAccessors == null) {\n_jsonValueAccessors = new LinkedList<>();",
        "begin_line": 996,
        "end_line": 1000,
        "comment": "         @JsonAnyGetter?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr110_line_578",
        "snippet": "boolean pojoproperties_collector1_expr110_line_578 = v_pn_4155_line_578 != null;\nboolean pojoproperties_collector1_expr109_line_578 = (pojoproperties_collector1_expr110_line_578);",
        "begin_line": 1017,
        "end_line": 1018,
        "comment": "\t\t @JsonValue?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_END_LINE_578",
        "snippet": "int PROBE_END_LINE_578 = 578;\nboolean nameExplicit = pojoproperties_collector1_expr109_line_578;",
        "begin_line": 1019,
        "end_line": 1020,
        "comment": "\t\t @JsonValue?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr116_line_585",
        "snippet": "boolean pojoproperties_collector1_expr116_line_585 = v_impl_name_4157_line_585 == null;\nint PROBE_END_LINE_585 = 593;",
        "begin_line": 1050,
        "end_line": 1051,
        "comment": "\t\t @JsonValue?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_586",
        "snippet": "int PROBE_START_LINE_586 = 586;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMethod p_m_4153_line_586 = m;",
        "begin_line": 1053,
        "end_line": 1054,
        "comment": "\t\t @JsonValue?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "String pojoproperties_collector1_expr118_line_586",
        "snippet": "String pojoproperties_collector1_expr118_line_586 = m.getName();\nboolean f__std_bean_naming_4100_line_586 = _stdBeanNaming;",
        "begin_line": 1055,
        "end_line": 1056,
        "comment": "\t\t @JsonValue?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "int PROBE_START_LINE_587",
        "snippet": "int PROBE_START_LINE_587 = 589;\nString v_impl_name_4157_line_587 = implName;",
        "begin_line": 1061,
        "end_line": 1062,
        "comment": "\t\t @JsonValue?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "signature": "boolean pojoproperties_collector1_expr119_line_587",
        "snippet": "boolean pojoproperties_collector1_expr119_line_587 = v_impl_name_4157_line_587 == null;\nint PROBE_END_LINE_587 = 589;",
        "begin_line": 1063,
        "end_line": 1064,
        "comment": "\t\t @JsonValue?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_64",
        "snippet": "int PROBE_START_LINE_64 = 64;\nHashMap<String, Class<? extends java.util.Map>> f__map_fallbacks_1481_line_64 = (HashMap<String, Class<? extends java.util.Map>>) (_mapFallbacks);",
        "begin_line": 92,
        "end_line": 93,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "String basic_deserializer_factory1_expr10_line_64",
        "snippet": "String basic_deserializer_factory1_expr10_line_64 = Map.class.getName();\nint PROBE_END_LINE_64 = 64;",
        "begin_line": 94,
        "end_line": 95,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_69",
        "snippet": "int PROBE_START_LINE_69 = 70;\nHashMap<String, Class<? extends java.util.Map>> f__map_fallbacks_1481_line_69 = (HashMap<String, Class<? extends java.util.Map>>) (_mapFallbacks);",
        "begin_line": 113,
        "end_line": 114,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "String basic_deserializer_factory1_expr26_line_69",
        "snippet": "String basic_deserializer_factory1_expr26_line_69 = java.util.concurrent.ConcurrentNavigableMap.class.getName();\nint PROBE_END_LINE_69 = 70;",
        "begin_line": 115,
        "end_line": 116,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_193",
        "snippet": "int PROBE_END_LINE_193 = 193;\nJavaType next = basic_deserializer_factory1_expr56_line_193;",
        "begin_line": 275,
        "end_line": 276,
        "comment": "         first, general mappings"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_195",
        "snippet": "int PROBE_START_LINE_195 = 195;\ncom.fasterxml.jackson.databind.JavaType p_type_1492_line_195 = type;",
        "begin_line": 282,
        "end_line": 283,
        "comment": "         first, general mappings"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_215",
        "snippet": "int PROBE_START_LINE_215 = 215;\ncom.fasterxml.jackson.databind.JavaType p_type_1495_line_215 = type;",
        "begin_line": 305,
        "end_line": 306,
        "comment": "    \n     * Method that will find abstract type mapping for specified type, doing a single\n     * lookup through registered abstract type resolvers; will not do recursive lookups.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_216",
        "snippet": "int PROBE_END_LINE_216 = 223;\nif (basic_deserializer_factory1_expr59_line_216) {\nfor (AbstractTypeResolver resolver : _factoryConfig.abstractTypeResolvers()) {\nJavaType concrete = resolver.findTypeMapping(config, type);",
        "begin_line": 314,
        "end_line": 317,
        "comment": "    \n     * Method that will find abstract type mapping for specified type, doing a single\n     * lookup through registered abstract type resolvers; will not do recursive lookups.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_243",
        "snippet": "int PROBE_START_LINE_243 = 243;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_1497_line_243 = ctxt;",
        "begin_line": 342,
        "end_line": 343,
        "comment": "    \n     * Value instantiator is created both based on creator annotations,\n     * and on optional externally provided instantiators (registered through\n     * module interface).\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "final DeserializationConfig config",
        "snippet": "final DeserializationConfig config = basic_deserializer_factory1_expr60_line_243;\n\nValueInstantiator instantiator = null;",
        "begin_line": 346,
        "end_line": 348,
        "comment": "    \n     * Value instantiator is created both based on creator annotations,\n     * and on optional externally provided instantiators (registered through\n     * module interface).\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_247",
        "snippet": "int PROBE_START_LINE_247 = 247;\ncom.fasterxml.jackson.databind.BeanDescription p_bean_desc_1498_line_247 = beanDesc;",
        "begin_line": 349,
        "end_line": 350,
        "comment": "    \n     * Value instantiator is created both based on creator annotations,\n     * and on optional externally provided instantiators (registered through\n     * module interface).\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "AnnotatedClass basic_deserializer_factory1_expr61_line_247",
        "snippet": "AnnotatedClass basic_deserializer_factory1_expr61_line_247 = p_bean_desc_1498_line_247.getClassInfo();\nint PROBE_END_LINE_247 = 247;",
        "begin_line": 351,
        "end_line": 352,
        "comment": "    \n     * Value instantiator is created both based on creator annotations,\n     * and on optional externally provided instantiators (registered through\n     * module interface).\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_252",
        "snippet": "int PROBE_START_LINE_252 = 259;\ncom.fasterxml.jackson.databind.deser.ValueInstantiator v_instantiator_1500_line_252 = instantiator;",
        "begin_line": 371,
        "end_line": 372,
        "comment": "\t\t Check @JsonValueInstantiator before anything else"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr65_line_252",
        "snippet": "boolean basic_deserializer_factory1_expr65_line_252 = v_instantiator_1500_line_252 == null;\nint PROBE_END_LINE_252 = 259;",
        "begin_line": 373,
        "end_line": 374,
        "comment": "\t\t Check @JsonValueInstantiator before anything else"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_289",
        "snippet": "int PROBE_END_LINE_289 = 289;\nClass<?> raw = basic_deserializer_factory1_expr72_line_289;",
        "begin_line": 444,
        "end_line": 445,
        "comment": "\t\t Sanity check: does the chosen ValueInstantiator have incomplete creators?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_290",
        "snippet": "int PROBE_START_LINE_290 = 292;\nClass<?> v_raw_1505_line_290 = raw;",
        "begin_line": 446,
        "end_line": 447,
        "comment": "\t\t Sanity check: does the chosen ValueInstantiator have incomplete creators?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr73_line_290",
        "snippet": "boolean basic_deserializer_factory1_expr73_line_290 = v_raw_1505_line_290 == JsonLocation.class;\nint PROBE_END_LINE_290 = 292;",
        "begin_line": 448,
        "end_line": 449,
        "comment": "\t\t Sanity check: does the chosen ValueInstantiator have incomplete creators?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_294",
        "snippet": "int PROBE_START_LINE_294 = 305;\nClass<?> v_raw_1505_line_294 = raw;",
        "begin_line": 453,
        "end_line": 454,
        "comment": "\t\t Sanity check: does the chosen ValueInstantiator have incomplete creators?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr78_line_298",
        "snippet": "boolean basic_deserializer_factory1_expr78_line_298 = basic_deserializer_factory1_expr79_line_298 == v_raw_1505_line_298;\nint PROBE_END_LINE_298 = 300;",
        "begin_line": 474,
        "end_line": 475,
        "comment": "\t\t [databind#1868]: empty List/Set/Map"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_301",
        "snippet": "int PROBE_START_LINE_301 = 305;\nClass<?> v_raw_1505_line_301 = raw;",
        "begin_line": 480,
        "end_line": 481,
        "comment": "\t\t [databind#1868]: empty List/Set/Map"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_318",
        "snippet": "int PROBE_END_LINE_318 = 318;\nAnnotationIntrospector intr = basic_deserializer_factory1_expr86_line_318;",
        "begin_line": 512,
        "end_line": 513,
        "comment": "    \n     * Method that will construct standard default {@link ValueInstantiator}\n     * using annotations (like @JsonCreator) and visibility rules\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_321",
        "snippet": "int PROBE_START_LINE_321 = 321;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_1509_line_321 = ctxt;",
        "begin_line": 515,
        "end_line": 516,
        "comment": "    \n     * Method that will construct standard default {@link ValueInstantiator}\n     * using annotations (like @JsonCreator) and visibility rules\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "DeserializationConfig basic_deserializer_factory1_expr87_line_321",
        "snippet": "DeserializationConfig basic_deserializer_factory1_expr87_line_321 = p_ctxt_1509_line_321.getConfig();\nint PROBE_END_LINE_321 = 321;",
        "begin_line": 517,
        "end_line": 518,
        "comment": "    \n     * Method that will construct standard default {@link ValueInstantiator}\n     * using annotations (like @JsonCreator) and visibility rules\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "final DeserializationConfig config",
        "snippet": "final DeserializationConfig config = basic_deserializer_factory1_expr87_line_321;\nint PROBE_START_LINE_322 = 323;",
        "begin_line": 520,
        "end_line": 521,
        "comment": "\t\t need to construct suitable visibility checker:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_333",
        "snippet": "int PROBE_END_LINE_333 = 334;\n/* 24-Sep-2014, tatu: Tricky part first; need to merge resolved property information\n*  (which has creator parameters sprinkled around) with actual creator\n*  declarations (which are needed to access creator annotation, amongst other things).\n*  Easiest to combine that info first, then pass it to remaining processing.\n*/\n/* 15-Mar-2015, tatu: Alas, this won't help with constructors that only have implicit\n*   names. Those will need to be resolved later on.\n*/\nMap<AnnotatedWithParams,BeanPropertyDefinition[]> creatorDefs = basic_deserializer_factory1_expr91_line_333;",
        "begin_line": 534,
        "end_line": 543,
        "comment": "\t\t need to construct suitable visibility checker:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_337",
        "snippet": "int PROBE_END_LINE_337 = 337;\n// Important: first add factory methods; then constructors, so\n// latter can override former!\n_addDeserializerFactoryMethods(p_ctxt_1509_line_337, p_bean_desc_1510_line_337, v_vchecker_1514_line_337, v_intr_1512_line_337, v_creators_1511_line_337, v_creator_defs_1515_line_337);",
        "begin_line": 551,
        "end_line": 554,
        "comment": "        /* 15-Mar-2015, tatu: Alas, this won't help with constructors that only have implicit\n         *   names. Those will need to be resolved later on.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_339",
        "snippet": "int PROBE_START_LINE_339 = 341;\ncom.fasterxml.jackson.databind.BeanDescription p_bean_desc_1510_line_339 = beanDesc;",
        "begin_line": 555,
        "end_line": 556,
        "comment": "         latter can override former!"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_348",
        "snippet": "int PROBE_END_LINE_348 = 348;\nMap<AnnotatedWithParams,BeanPropertyDefinition[]> result = basic_deserializer_factory1_expr97_line_348;",
        "begin_line": 588,
        "end_line": 589,
        "comment": "\t\t constructors only usable on concrete types:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_349",
        "snippet": "int PROBE_END_LINE_349 = 372;\nfor (BeanPropertyDefinition propDef : basic_deserializer_factory1_expr98_line_349) {\nint PROBE_START_LINE_350 = 350;",
        "begin_line": 594,
        "end_line": 596,
        "comment": "\t\t constructors only usable on concrete types:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_448",
        "snippet": "int PROBE_START_LINE_448 = 450;\ncom.fasterxml.jackson.annotation.JsonCreator.Mode f_disabled_1536_line_448 = Mode.DISABLED;",
        "begin_line": 757,
        "end_line": 758,
        "comment": "         21-Sep-2017, tatu: First let's handle explicitly annotated ones"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_484",
        "snippet": "int PROBE_END_LINE_484 = 506;\n// some single-arg factory methods (String, number) are auto-detected\nif (basic_deserializer_factory1_expr123_line_484) {\nint PROBE_START_LINE_485 = 485;",
        "begin_line": 836,
        "end_line": 839,
        "comment": "\t\t And only if and when those handled, consider potentially visible ones"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr150_line_551",
        "snippet": "boolean basic_deserializer_factory1_expr150_line_551 = v_non_annotated_param_index_1543_line_551 < 0;\nint PROBE_END_LINE_551 = 553;",
        "begin_line": 981,
        "end_line": 982,
        "comment": "                    /*\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                    ++explicitNameCount;\n                    "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_552",
        "snippet": "int PROBE_START_LINE_552 = 552;\nint v_i_1548_line_552 = i;",
        "begin_line": 992,
        "end_line": 993,
        "comment": "                /*\n                if (isCreator && (name != null && !name.isEmpty())) {\n                    ++implicitWithCreatorCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n                "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_552",
        "snippet": "int PROBE_END_LINE_552 = 552;\nnonAnnotatedParamIndex = v_i_1548_line_552;",
        "begin_line": 994,
        "end_line": 995,
        "comment": "                /*\n                if (isCreator && (name != null && !name.isEmpty())) {\n                    ++implicitWithCreatorCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n                "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int v_implicit_with_creator_count_1546_line_556",
        "snippet": "int v_implicit_with_creator_count_1546_line_556 = implicitWithCreatorCount;\nint basic_deserializer_factory1_expr151_line_556 = v_explicit_name_count_1545_line_556\n+ v_implicit_with_creator_count_1546_line_556;",
        "begin_line": 1001,
        "end_line": 1003,
        "comment": "                /*\n                if (isCreator && (name != null && !name.isEmpty())) {\n                    ++implicitWithCreatorCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n                "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_558",
        "snippet": "int PROBE_START_LINE_558 = 586;\nint v_explicit_name_count_1545_line_558 = explicitNameCount;",
        "begin_line": 1006,
        "end_line": 1007,
        "comment": "                /*\n                if (isCreator && (name != null && !name.isEmpty())) {\n                    ++implicitWithCreatorCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n                "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr156_line_558",
        "snippet": "boolean basic_deserializer_factory1_expr156_line_558 = v_inject_count_1547_line_558 > 0;\nbasic_deserializer_factory1_expr155_line_558 = (basic_deserializer_factory1_expr156_line_558);",
        "begin_line": 1013,
        "end_line": 1014,
        "comment": "                /*\n                if (isCreator && (name != null && !name.isEmpty())) {\n                    ++implicitWithCreatorCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n                "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_558",
        "snippet": "int PROBE_END_LINE_558 = 586;\n// Ok: if named or injectable, we have more work to do\nif (basic_deserializer_factory1_expr152_line_558) {\n// simple case; everything covered:\nif ((namedCount + injectCount) == argCount) {\ncreators.addPropertyCreator(ctor, false, properties);",
        "begin_line": 1018,
        "end_line": 1023,
        "comment": "                /*\n                if (isCreator && (name != null && !name.isEmpty())) {\n                    ++implicitWithCreatorCount;\n                    properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n                "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean useProps",
        "snippet": "boolean useProps = (paramName != null) || (injectId != null);\nif (!useProps && (paramDef != null)) {\n// One more thing: if implicit name matches property with a getter\n// or field, we'll consider it property-based as well\n\n// 25-May-2018, tatu: as per [databind#2051], looks like we have to get\n//    not implicit name, but name with possible strategy-based-rename\n//            paramName = candidate.findImplicitParamName(0);",
        "begin_line": 1206,
        "end_line": 1213,
        "comment": "         If there's injection or explicit name, should be properties-based"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_758",
        "snippet": "int PROBE_START_LINE_758 = 761;\ncom.fasterxml.jackson.databind.introspect.BeanPropertyDefinition p_prop_def_1569_line_758 = propDef;",
        "begin_line": 1236,
        "end_line": 1237,
        "comment": "         problems with \"unresolved\" constructor property"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr169_line_758",
        "snippet": "boolean basic_deserializer_factory1_expr169_line_758 = true;\nif (basic_deserializer_factory1_expr167_line_758) {\nbasic_deserializer_factory1_expr169_line_758 = propDef.isExplicitlyNamed();",
        "begin_line": 1240,
        "end_line": 1242,
        "comment": "         problems with \"unresolved\" constructor property"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr165_line_758",
        "snippet": "boolean basic_deserializer_factory1_expr165_line_758 = (basic_deserializer_factory1_expr166_line_758);\nboolean basic_deserializer_factory1_expr164_line_758 = basic_deserializer_factory1_expr165_line_758\n|| (intr.findInjectableValue(creator.getParameter(0)) != null);",
        "begin_line": 1246,
        "end_line": 1248,
        "comment": "         problems with \"unresolved\" constructor property"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "final int argCount",
        "snippet": "final int argCount = ctor.getParameterCount();\nSettableBeanProperty[] properties = new SettableBeanProperty[argCount];",
        "begin_line": 1290,
        "end_line": 1291,
        "comment": "             as per earlier notes, only end up here if no properties associated with creator"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "final AnnotatedParameter param",
        "snippet": "final AnnotatedParameter param = ctor.getParameter(i);\nfinal PropertyName name = _findParamName(param, intr);",
        "begin_line": 1293,
        "end_line": 1294,
        "comment": "             as per earlier notes, only end up here if no properties associated with creator"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "BasicBeanDescription bbd",
        "snippet": "BasicBeanDescription bbd = (BasicBeanDescription) beanDesc;\n// Also: add properties, to keep error messages complete wrt known properties...\nfor (SettableBeanProperty prop : foundProps) {\nPropertyName pn = prop.getFullName();",
        "begin_line": 1313,
        "end_line": 1316,
        "comment": "         found one and only one visible? Ship it!"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "final int argCount",
        "snippet": "final int argCount = factory.getParameterCount();\nif (creatorMode == null) {\n// Only potentially accept 1-argument factory methods\nif ((argCount == 1) && vchecker.isCreatorVisible(factory)) {\nnonAnnotated.add(CreatorCandidate.construct(intr, factory, null));",
        "begin_line": 1343,
        "end_line": 1347,
        "comment": "\t\t 21-Sep-2017, tatu: First let's handle explicitly annotated ones"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_878",
        "snippet": "int PROBE_START_LINE_878 = 880;\nint v_expl_count_1583_line_878 = explCount;",
        "begin_line": 1378,
        "end_line": 1379,
        "comment": "             zero-arg method factory methods fine, as long as explicit"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_882",
        "snippet": "int PROBE_END_LINE_882 = 975;\n// And then implicitly found\nfor (CreatorCandidate candidate : v_non_annotated_1582_line_882) {\nfinal int argCount = candidate.paramCount();",
        "begin_line": 1388,
        "end_line": 1391,
        "comment": "\t\t And only if and when those handled, consider potentially visible ones"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr191_line_995",
        "snippet": "boolean basic_deserializer_factory1_expr191_line_995 = v_type_1590_line_995 == long.class;\nboolean basic_deserializer_factory1_expr192_line_995 = false;",
        "begin_line": 1558,
        "end_line": 1559,
        "comment": "\t\t otherwise either 'simple' number, String, or general delegate:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_995",
        "snippet": "int PROBE_END_LINE_995 = 1000;\nif (basic_deserializer_factory1_expr190_line_995) {\nif (isCreator || isVisible) {\ncreators.addLongCreator(ctor, isCreator);",
        "begin_line": 1565,
        "end_line": 1568,
        "comment": "\t\t otherwise either 'simple' number, String, or general delegate:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_1001",
        "snippet": "int PROBE_START_LINE_1001 = 1006;\nClass<?> v_type_1590_line_1001 = type;",
        "begin_line": 1572,
        "end_line": 1573,
        "comment": "\t\t otherwise either 'simple' number, String, or general delegate:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_1014",
        "snippet": "int PROBE_START_LINE_1014 = 1017;\nboolean p_is_creator_1588_line_1014 = isCreator;",
        "begin_line": 1604,
        "end_line": 1605,
        "comment": "\t\t otherwise either 'simple' number, String, or general delegate:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "final DeserializationConfig config",
        "snippet": "final DeserializationConfig config = basic_deserializer_factory1_expr202_line_1164;\n\nint PROBE_START_LINE_1167 = 1167;",
        "begin_line": 1771,
        "end_line": 1773,
        "comment": "\t\t Very first thing: is deserializer hard-coded for elements?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "TypeDeserializer basic_deserializer_factory1_expr203_line_1167",
        "snippet": "TypeDeserializer basic_deserializer_factory1_expr203_line_1167 = v_content_type_1608_line_1167.getTypeHandler();\nint PROBE_END_LINE_1167 = 1167;",
        "begin_line": 1775,
        "end_line": 1776,
        "comment": "\t\t Very first thing: is deserializer hard-coded for elements?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_1170",
        "snippet": "int PROBE_START_LINE_1170 = 1170;\ncom.fasterxml.jackson.databind.DeserializationConfig v_config_1610_line_1170 = config;",
        "begin_line": 1785,
        "end_line": 1786,
        "comment": "\t\t but if not, may still be possible to find:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_1170",
        "snippet": "int PROBE_END_LINE_1170 = 1170;\ncontentTypeDeser = basic_deserializer_factory1_expr205_line_1170;",
        "begin_line": 1790,
        "end_line": 1791,
        "comment": "\t\t but if not, may still be possible to find:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_1175",
        "snippet": "int PROBE_START_LINE_1175 = 1183;\nJsonDeserializer<?> v_deser_1612_line_1175 = deser;",
        "begin_line": 1800,
        "end_line": 1801,
        "comment": "\t\t 23-Nov-2010, tatu: Custom deserializer?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr209_line_1177",
        "snippet": "boolean basic_deserializer_factory1_expr209_line_1177 = v_content_deser_1609_line_1177 == null;\nint PROBE_END_LINE_1177 = 1182;",
        "begin_line": 1812,
        "end_line": 1813,
        "comment": "\t\t 23-Nov-2010, tatu: Custom deserializer?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_1179",
        "snippet": "int PROBE_START_LINE_1179 = 1181;\nClass<?> v_collection_class_1613_line_1179 = collectionClass;",
        "begin_line": 1815,
        "end_line": 1816,
        "comment": "\t\t 23-Nov-2010, tatu: Custom deserializer?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_1179",
        "snippet": "int PROBE_END_LINE_1179 = 1181;\n// One special type: EnumSet:\nif (basic_deserializer_factory1_expr210_line_1179) {\ndeser = new EnumSetDeserializer(contentType, null);",
        "begin_line": 1819,
        "end_line": 1822,
        "comment": "\t\t 23-Nov-2010, tatu: Custom deserializer?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_1194",
        "snippet": "int PROBE_START_LINE_1194 = 1230;\nJsonDeserializer<?> v_deser_1612_line_1194 = deser;",
        "begin_line": 1827,
        "end_line": 1828,
        "comment": "\t\t\t\t One special type: EnumSet:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_1209",
        "snippet": "int PROBE_START_LINE_1209 = 1229;\nJsonDeserializer<?> v_deser_1612_line_1209 = deser;",
        "begin_line": 1884,
        "end_line": 1885,
        "comment": "\t\t\t\t\t But if so, also need to re-check creators..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_1242",
        "snippet": "int PROBE_START_LINE_1242 = 1242;\ncom.fasterxml.jackson.databind.JavaType p_type_1616_line_1242 = type;",
        "begin_line": 1951,
        "end_line": 1952,
        "comment": "\t\t allow post-processing it too"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "TypeDeserializer basic_deserializer_factory1_expr240_line_1302",
        "snippet": "TypeDeserializer basic_deserializer_factory1_expr240_line_1302 = v_content_type_1627_line_1302.getTypeHandler();\nint PROBE_END_LINE_1302 = 1302;",
        "begin_line": 2054,
        "end_line": 2055,
        "comment": "\t\t Ok: need a key deserializer (null indicates 'default' here)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_1309",
        "snippet": "int PROBE_START_LINE_1309 = 1310;\ncom.fasterxml.jackson.databind.type.MapType p_type_1623_line_1309 = type;",
        "begin_line": 2073,
        "end_line": 2074,
        "comment": "\t\t but if not, may still be possible to find:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_1309",
        "snippet": "int PROBE_END_LINE_1309 = 1310;\n// 23-Nov-2010, tatu: Custom deserializer?\nJsonDeserializer<?> deser = basic_deserializer_factory1_expr243_line_1309;",
        "begin_line": 2080,
        "end_line": 2082,
        "comment": "\t\t but if not, may still be possible to find:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "boolean basic_deserializer_factory1_expr244_line_1312",
        "snippet": "boolean basic_deserializer_factory1_expr244_line_1312 = v_deser_1631_line_1312 == null;\nint PROBE_END_LINE_1312 = 1382;",
        "begin_line": 2086,
        "end_line": 2087,
        "comment": "\t\t 23-Nov-2010, tatu: Custom deserializer?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_1314",
        "snippet": "int PROBE_START_LINE_1314 = 1314;\ncom.fasterxml.jackson.databind.type.MapType p_type_1623_line_1314 = type;",
        "begin_line": 2089,
        "end_line": 2090,
        "comment": "\t\t 23-Nov-2010, tatu: Custom deserializer?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
        "signature": "int PROBE_START_LINE_54",
        "snippet": "int PROBE_START_LINE_54 = 54;\nBoolean p_use_timestamp_5042_line_54 = useTimestamp;",
        "begin_line": 54,
        "end_line": 55,
        "comment": "    \n     * If {@link #_customFormat} is used, we will try to reuse instances in simplest\n     * possible form; thread-safe, but without overhead of <code>ThreadLocal</code>\n     * (not from code, but wrt retaining of possibly large number of format instances\n     * over all threads, properties with custom formats).\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
        "signature": "int PROBE_END_LINE_54",
        "snippet": "int PROBE_END_LINE_54 = 54;\n_useTimestamp = p_use_timestamp_5042_line_54;",
        "begin_line": 56,
        "end_line": 57,
        "comment": "    \n     * If {@link #_customFormat} is used, we will try to reuse instances in simplest\n     * possible form; thread-safe, but without overhead of <code>ThreadLocal</code>\n     * (not from code, but wrt retaining of possibly large number of format instances\n     * over all threads, properties with custom formats).\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
        "signature": "int PROBE_END_LINE_29",
        "snippet": "int PROBE_END_LINE_29 = 34;\n\n/**\n* Default singleton instance that construct \"standard\" node instances:\n* given that this class is stateless, a globally shared singleton\n* can be used.\n*/\npublic final static JsonNodeFactory instance = f_decimals_normalized_4686_line_34;",
        "begin_line": 33,
        "end_line": 40,
        "comment": "     with 2.2"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_71",
        "snippet": "int PROBE_START_LINE_71 = 71;\nHashMap<String, JsonSerializer<?>> v_concrete_4716_line_71 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 72,
        "end_line": 73,
        "comment": "    \n     * Actually it may not make much sense to eagerly instantiate all\n     * kinds of serializers: so this Map actually contains class references,\n     * not instances\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "String basic_serializer_factory1_expr4_line_71",
        "snippet": "String basic_serializer_factory1_expr4_line_71 = String.class.getName();\nint PROBE_END_LINE_71 = 71;",
        "begin_line": 74,
        "end_line": 75,
        "comment": "    \n     * Actually it may not make much sense to eagerly instantiate all\n     * kinds of serializers: so this Map actually contains class references,\n     * not instances\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_72",
        "snippet": "int PROBE_START_LINE_72 = 72;\nToStringSerializer f_instance_4718_line_72 = ToStringSerializer.instance;",
        "begin_line": 80,
        "end_line": 81,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_73",
        "snippet": "int PROBE_START_LINE_73 = 73;\nHashMap<String, JsonSerializer<?>> v_concrete_4716_line_73 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 84,
        "end_line": 85,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_73",
        "snippet": "int PROBE_END_LINE_73 = 73;\nv_concrete_4716_line_73.put(basic_serializer_factory1_expr8_line_73, v_sls_4717_line_73);",
        "begin_line": 88,
        "end_line": 89,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_74",
        "snippet": "int PROBE_START_LINE_74 = 74;\nHashMap<String, JsonSerializer<?>> v_concrete_4716_line_74 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 90,
        "end_line": 91,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "String basic_serializer_factory1_expr11_line_74",
        "snippet": "String basic_serializer_factory1_expr11_line_74 = StringBuilder.class.getName();\ncom.fasterxml.jackson.databind.ser.std.ToStringSerializer v_sls_4717_line_74 = sls;",
        "begin_line": 92,
        "end_line": 93,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_74",
        "snippet": "int PROBE_END_LINE_74 = 74;\nv_concrete_4716_line_74.put(basic_serializer_factory1_expr11_line_74, v_sls_4717_line_74);",
        "begin_line": 94,
        "end_line": 95,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_75",
        "snippet": "int PROBE_START_LINE_75 = 75;\nHashMap<String, JsonSerializer<?>> v_concrete_4716_line_75 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 96,
        "end_line": 97,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "String basic_serializer_factory1_expr14_line_75",
        "snippet": "String basic_serializer_factory1_expr14_line_75 = Character.class.getName();\ncom.fasterxml.jackson.databind.ser.std.ToStringSerializer v_sls_4717_line_75 = sls;",
        "begin_line": 98,
        "end_line": 99,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_75",
        "snippet": "int PROBE_END_LINE_75 = 75;\nv_concrete_4716_line_75.put(basic_serializer_factory1_expr14_line_75, v_sls_4717_line_75);",
        "begin_line": 100,
        "end_line": 101,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_76",
        "snippet": "int PROBE_START_LINE_76 = 76;\nHashMap<String, JsonSerializer<?>> v_concrete_4716_line_76 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 102,
        "end_line": 103,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_76",
        "snippet": "int PROBE_END_LINE_76 = 76;\nv_concrete_4716_line_76.put(basic_serializer_factory1_expr17_line_76, v_sls_4717_line_76);",
        "begin_line": 107,
        "end_line": 108,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_79",
        "snippet": "int PROBE_START_LINE_79 = 79;\nHashMap<String, JsonSerializer<?>> v_concrete_4716_line_79 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 110,
        "end_line": 111,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "String basic_serializer_factory1_expr34_line_85",
        "snippet": "String basic_serializer_factory1_expr34_line_85 = BigDecimal.class.getName();\nint PROBE_END_LINE_85 = 85;",
        "begin_line": 135,
        "end_line": 136,
        "comment": "\t\t Other numbers, more complicated"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
        "signature": "int PROBE_START_LINE_264",
        "snippet": "int PROBE_START_LINE_264 = 264;\ncom.fasterxml.jackson.databind.deser.ValueInstantiator p_inst_2041_line_264 = inst;",
        "begin_line": 307,
        "end_line": 308,
        "comment": "    \n     * Method called by deserializer factory, when a \"creator property\"\n     * (something that is passed via constructor- or factory method argument;\n     * instead of setter or field).\n     *<p>\n     * Default implementation does not do anything; we may need to revisit this\n     * decision if these properties need to be available through accessors.\n     * For now, however, we just have to ensure that we don't try to resolve\n     * types that masked setter/field has (see [JACKSON-700] for details).\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
        "signature": "int PROBE_START_LINE_307",
        "snippet": "int PROBE_START_LINE_307 = 307;\ncom.fasterxml.jackson.databind.deser.SettableAnyProperty f__any_setter_2049_line_307 = _anySetter;",
        "begin_line": 353,
        "end_line": 354,
        "comment": "    \n     * Method that allows accessing all properties that this\n     * builder currently contains.\n     *<p>\n     * Note that properties are returned in order that properties\n     * are ordered (explictly, or by rule), which is the serialization\n     * order.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
        "signature": "int PROBE_START_LINE_311",
        "snippet": "int PROBE_START_LINE_311 = 311;\ncom.fasterxml.jackson.databind.deser.ValueInstantiator f__value_instantiator_2042_line_311 = _valueInstantiator;",
        "begin_line": 360,
        "end_line": 361,
        "comment": "    \n     * Method that allows accessing all properties that this\n     * builder currently contains.\n     *<p>\n     * Note that properties are returned in order that properties\n     * are ordered (explictly, or by rule), which is the serialization\n     * order.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
        "signature": "int PROBE_END_LINE_311",
        "snippet": "int PROBE_END_LINE_311 = 311;\nreturn f__value_instantiator_2042_line_311;",
        "begin_line": 362,
        "end_line": 363,
        "comment": "    \n     * Method that allows accessing all properties that this\n     * builder currently contains.\n     *<p>\n     * Note that properties are returned in order that properties\n     * are ordered (explictly, or by rule), which is the serialization\n     * order.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
        "signature": "int PROBE_END_LINE_315",
        "snippet": "int PROBE_END_LINE_315 = 315;\nreturn f__injectables_2050_line_315;",
        "begin_line": 369,
        "end_line": 370,
        "comment": "    \n     * Method that allows accessing all properties that this\n     * builder currently contains.\n     *<p>\n     * Note that properties are returned in order that properties\n     * are ordered (explictly, or by rule), which is the serialization\n     * order.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
        "signature": "Collection<SettableBeanProperty> props",
        "snippet": "Collection<SettableBeanProperty> props = _properties.values();\n_fixAccess(props);",
        "begin_line": 520,
        "end_line": 521,
        "comment": "         And if so, we can try building the deserializer"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.TypeResolutionContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/TypeResolutionContext.java",
        "signature": "int PROBE_START_LINE_25",
        "snippet": "int PROBE_START_LINE_25 = 25;\ncom.fasterxml.jackson.databind.type.TypeFactory p_tf_4382_line_25 = tf;",
        "begin_line": 25,
        "end_line": 26,
        "comment": "\n * Interface that defines API used by members (like {@link AnnotatedMethod})\n * to dynamically resolve types they have.\n *\n * @since 2.7\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.TypeResolutionContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/TypeResolutionContext.java",
        "signature": "int PROBE_END_LINE_25",
        "snippet": "int PROBE_END_LINE_25 = 25;\n_typeFactory = p_tf_4382_line_25;",
        "begin_line": 27,
        "end_line": 28,
        "comment": "\n * Interface that defines API used by members (like {@link AnnotatedMethod})\n * to dynamically resolve types they have.\n *\n * @since 2.7\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "signature": "int PROBE_START_LINE_42",
        "snippet": "int PROBE_START_LINE_42 = 45;\n\nprotected static final com.fasterxml.jackson.annotation.JsonInclude.Value mapper_config1_expr1_line_45 = JsonInclude.Value\n.empty();",
        "begin_line": 48,
        "end_line": 51,
        "comment": "\n * Interface that defines functionality accessible through both\n * serialization and deserialization configuration objects;\n * accessors to mode-independent configuration settings\n * and such.\n * In addition, shared features are defined\n * in {@link MapperFeature}.\n *<p>\n * Small part of implementation is included here by aggregating\n * {@link BaseSettings} instance that contains configuration\n * that is shared between different types of instances.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "signature": "int PROBE_END_LINE_47",
        "snippet": "int PROBE_END_LINE_47 = 50;\n\n/**\n* @since 2.7\n*/\nprotected final static JsonFormat.Value EMPTY_FORMAT = mapper_config1_expr2_line_50;",
        "begin_line": 65,
        "end_line": 70,
        "comment": "\t\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "signature": "int PROBE_START_LINE_70",
        "snippet": "int PROBE_START_LINE_70 = 70;\ncom.fasterxml.jackson.databind.cfg.BaseSettings p_base_1319_line_70 = base;",
        "begin_line": 90,
        "end_line": 91,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "signature": "Class<F> p_enum_class_1328_line_99",
        "snippet": "Class<F> p_enum_class_1328_line_99 = (Class<F>) (enumClass);\nF[] mapper_config1_expr4_line_99 = p_enum_class_1328_line_99.getEnumConstants();",
        "begin_line": 141,
        "end_line": 142,
        "comment": "    \n     * Method that calculates bit set (flags) of all features that\n     * are enabled by default.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "signature": "int PROBE_START_LINE_161",
        "snippet": "int PROBE_START_LINE_161 = 161;\ncom.fasterxml.jackson.databind.MapperFeature f_use_annotations_1337_line_161 = MapperFeature.USE_ANNOTATIONS;",
        "begin_line": 225,
        "end_line": 226,
        "comment": "    \n     * Method for determining whether annotation processing is enabled or not\n     * (default settings are typically that it is enabled; must explicitly disable).\n     * \n     * @return True if annotation processing is enabled; false if not\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "signature": "boolean mapper_config1_expr15_line_236",
        "snippet": "boolean mapper_config1_expr15_line_236 = isEnabled(f_use_annotations_1337_line_236);\nint PROBE_END_LINE_236 = 238;",
        "begin_line": 319,
        "end_line": 320,
        "comment": "    \n     * Method for getting {@link AnnotationIntrospector} configured\n     * to introspect annotation values used for configuration.\n     *<p>\n     * Non-final since it is actually overridden by sub-classes (for now?)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "int PROBE_END_LINE_117",
        "snippet": "int PROBE_END_LINE_117 = 125;\n\n/**\n* Index of property (within all property of a bean); assigned\n* when all properties have been collected. Order of entries\n* is arbitrary, but once indexes are assigned they are not\n* changed.\n*<p>\n* TODO: should try to make immutable if at all possible\n*/\nprotected int _propertyIndex = settable_bean_property1_expr3_line_125;",
        "begin_line": 125,
        "end_line": 135,
        "comment": "    \n     * Helper object used for checking whether this property is to\n     * be included in the active view, if property is view-specific;\n     * null otherwise.\n     *<p>\n     * TODO: should try to make immutable.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "int PROBE_START_LINE_150",
        "snippet": "int PROBE_START_LINE_150 = 154;\ncom.fasterxml.jackson.databind.PropertyName p_prop_name_2385_line_150 = propName;",
        "begin_line": 155,
        "end_line": 156,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "boolean settable_bean_property1_expr9_line_150",
        "snippet": "boolean settable_bean_property1_expr9_line_150 = p_prop_name_2385_line_150 == null;\nint PROBE_END_LINE_150 = 154;",
        "begin_line": 157,
        "end_line": 158,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "int PROBE_START_LINE_153",
        "snippet": "int PROBE_START_LINE_153 = 153;\ncom.fasterxml.jackson.databind.PropertyName p_prop_name_2385_line_153 = propName;",
        "begin_line": 167,
        "end_line": 168,
        "comment": "           is not unbounded, unlike potential JSON names."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "int PROBE_END_LINE_231",
        "snippet": "int PROBE_END_LINE_231 = 231;\n_valueDeserializer = (JsonDeserializer<Object>) p_deser_2405_line_231;",
        "begin_line": 311,
        "end_line": 312,
        "comment": "    \n     * Copy-with-deserializer-change constructor for sub-classes to use.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "int PROBE_END_LINE_233",
        "snippet": "int PROBE_END_LINE_233 = 233;\n_viewMatcher = f__view_matcher_2395_line_233;",
        "begin_line": 317,
        "end_line": 318,
        "comment": "    \n     * Copy-with-deserializer-change constructor for sub-classes to use.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "int PROBE_START_LINE_235",
        "snippet": "int PROBE_START_LINE_235 = 237;\ncom.fasterxml.jackson.databind.deser.NullValueProvider p_nuller_2406_line_235 = nuller;",
        "begin_line": 319,
        "end_line": 320,
        "comment": "    \n     * Copy-with-deserializer-change constructor for sub-classes to use.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "JsonDeserializer<Object> f_missing_value_deserializer_2379_line_235",
        "snippet": "JsonDeserializer<Object> f_missing_value_deserializer_2379_line_235 = MISSING_VALUE_DESERIALIZER;\nboolean settable_bean_property1_expr17_line_235 = p_nuller_2406_line_235 == f_missing_value_deserializer_2379_line_235;",
        "begin_line": 321,
        "end_line": 322,
        "comment": "    \n     * Copy-with-deserializer-change constructor for sub-classes to use.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "int PROBE_START_LINE_306",
        "snippet": "int PROBE_START_LINE_306 = 310;\nClass<?>[] p_views_2416_line_306 = views;",
        "begin_line": 402,
        "end_line": 403,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "signature": "int settable_bean_property1_expr20_line_317",
        "snippet": "int settable_bean_property1_expr20_line_317 = -1;\nboolean settable_bean_property1_expr19_line_317 = f__property_index_2380_line_317 != settable_bean_property1_expr20_line_317;",
        "begin_line": 419,
        "end_line": 420,
        "comment": "    \n     * Method used to assign index for property.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
        "signature": "int PROBE_START_LINE_40",
        "snippet": "int PROBE_START_LINE_40 = 42;\nHashMap<Class<?>, java.lang.annotation.Annotation> f__annotations_3716_line_40 = (HashMap<Class<?>, java.lang.annotation.Annotation>) (_annotations);",
        "begin_line": 41,
        "end_line": 42,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
        "signature": "boolean annotation_map1_expr2_line_63",
        "snippet": "boolean annotation_map1_expr2_line_63 = f__annotations_3716_line_63 != null;\nint PROBE_END_LINE_63 = 69;",
        "begin_line": 70,
        "end_line": 71,
        "comment": "    \n     * Helper method that can be used for a \"bulk\" check to see if at least\n     * one of given annotation types is included within this map.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "int PROBE_START_LINE_75",
        "snippet": "int PROBE_START_LINE_75 = 75;\ncom.fasterxml.jackson.databind.JavaType p_base_type_4650_line_75 = baseType;",
        "begin_line": 76,
        "end_line": 77,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "int PROBE_END_LINE_75",
        "snippet": "int PROBE_END_LINE_75 = 75;\n_baseType = p_base_type_4650_line_75;",
        "begin_line": 78,
        "end_line": 79,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "int PROBE_START_LINE_76",
        "snippet": "int PROBE_START_LINE_76 = 76;\ncom.fasterxml.jackson.databind.jsontype.TypeIdResolver p_id_res_4651_line_76 = idRes;",
        "begin_line": 80,
        "end_line": 81,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "int PROBE_END_LINE_76",
        "snippet": "int PROBE_END_LINE_76 = 76;\n_idResolver = p_id_res_4651_line_76;",
        "begin_line": 82,
        "end_line": 83,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "String type_deserializer_base1_expr1_line_77",
        "snippet": "String type_deserializer_base1_expr1_line_77 = ClassUtil.nonNullString(p_type_property_name_4652_line_77);\nint PROBE_END_LINE_77 = 77;",
        "begin_line": 86,
        "end_line": 87,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "int PROBE_START_LINE_78",
        "snippet": "int PROBE_START_LINE_78 = 78;\nboolean p_type_id_visible_4653_line_78 = typeIdVisible;",
        "begin_line": 89,
        "end_line": 90,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "int PROBE_END_LINE_78",
        "snippet": "int PROBE_END_LINE_78 = 78;\n_typeIdVisible = p_type_id_visible_4653_line_78;",
        "begin_line": 91,
        "end_line": 92,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "int PROBE_START_LINE_81",
        "snippet": "int PROBE_START_LINE_81 = 81;\ncom.fasterxml.jackson.databind.JavaType p_default_impl_4654_line_81 = defaultImpl;",
        "begin_line": 95,
        "end_line": 96,
        "comment": "         defaults are fine, although shouldn't need much concurrency"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "int PROBE_START_LINE_149",
        "snippet": "int PROBE_START_LINE_149 = 149;\nMap<String, JsonDeserializer<Object>> f__deserializers_4657_line_149 = _deserializers;",
        "begin_line": 197,
        "end_line": 198,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "boolean type_deserializer_base1_expr7_line_150",
        "snippet": "boolean type_deserializer_base1_expr7_line_150 = v_deser_4665_line_150 == null;\nint PROBE_END_LINE_150 = 197;",
        "begin_line": 206,
        "end_line": 207,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "signature": "int PROBE_START_LINE_191",
        "snippet": "int PROBE_START_LINE_191 = 191;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_4663_line_191 = ctxt;",
        "begin_line": 290,
        "end_line": 291,
        "comment": "                      now it should improve things."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
        "signature": "int PROBE_START_LINE_28",
        "snippet": "int PROBE_START_LINE_28 = 28;\ncom.fasterxml.jackson.databind.AnnotationIntrospector p_intr_3517_line_28 = intr;",
        "begin_line": 36,
        "end_line": 37,
        "comment": "       Collected state"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
        "signature": "int PROBE_END_LINE_28",
        "snippet": "int PROBE_END_LINE_28 = 28;\n_mixInResolver = annotated_field_collector1_expr2_line_28;",
        "begin_line": 47,
        "end_line": 48,
        "comment": "       Collected state"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
        "signature": "int PROBE_END_LINE_36",
        "snippet": "int PROBE_END_LINE_36 = 36;\nreturn annotated_field_collector1_expr5_line_36;",
        "begin_line": 65,
        "end_line": 66,
        "comment": "       Collected state"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
        "signature": "int PROBE_END_LINE_41",
        "snippet": "int PROBE_END_LINE_41 = 41;\nMap<String,FieldBuilder> foundFields = annotated_field_collector1_expr7_line_41;",
        "begin_line": 76,
        "end_line": 77,
        "comment": "       Collected state"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
        "signature": "int PROBE_START_LINE_42",
        "snippet": "int PROBE_START_LINE_42 = 44;\nMap<String, com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector.FieldBuilder> v_found_fields_3529_line_42 = foundFields;",
        "begin_line": 78,
        "end_line": 79,
        "comment": "       Collected state"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
        "signature": "boolean annotated_field_collector1_expr8_line_42",
        "snippet": "boolean annotated_field_collector1_expr8_line_42 = v_found_fields_3529_line_42 == null;\nint PROBE_END_LINE_42 = 44;",
        "begin_line": 80,
        "end_line": 81,
        "comment": "       Collected state"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
        "signature": "int PROBE_START_LINE_45",
        "snippet": "int PROBE_START_LINE_45 = 45;\nMap<String, com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector.FieldBuilder> v_found_fields_3529_line_45 = foundFields;",
        "begin_line": 85,
        "end_line": 86,
        "comment": "       Collected state"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
        "signature": "List<AnnotatedField> result",
        "snippet": "List<AnnotatedField> result = new ArrayList<>(annotated_field_collector1_expr10_line_45);\nint PROBE_START_LINE_46 = 48;",
        "begin_line": 89,
        "end_line": 90,
        "comment": "       Collected state"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
        "signature": "JavaType parent",
        "snippet": "JavaType parent = annotated_field_collector1_expr14_line_58;\nint PROBE_START_LINE_59 = 61;",
        "begin_line": 120,
        "end_line": 121,
        "comment": "         other cases is to see if there is a super class or not."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
        "signature": "int PROBE_START_LINE_60",
        "snippet": "int PROBE_START_LINE_60 = 60;\nMap<String, com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector.FieldBuilder> p_fields_3534_line_60 = fields;",
        "begin_line": 126,
        "end_line": 127,
        "comment": "         other cases is to see if there is a super class or not."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
        "signature": "int PROBE_END_LINE_64",
        "snippet": "int PROBE_END_LINE_64 = 65;\n// Let's add super-class' fields first, then ours.\nfields = annotated_field_collector1_expr17_line_64;",
        "begin_line": 145,
        "end_line": 147,
        "comment": "         other cases is to see if there is a super class or not."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/MappingJsonFactory.java",
        "signature": "int PROBE_START_LINE_30",
        "snippet": "int PROBE_START_LINE_30 = 32;\ncom.fasterxml.jackson.databind.ObjectMapper p_mapper_600_line_30 = mapper;",
        "begin_line": 30,
        "end_line": 31,
        "comment": "\n * Sub-class of {@link JsonFactory} that will create a proper\n * {@link ObjectCodec} to allow seam-less conversions between\n * JSON content and Java objects (POJOs).\n * The only addition to regular {@link JsonFactory} currently\n * is that {@link ObjectMapper} is constructed and passed as\n * the codec to use.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/MappingJsonFactory.java",
        "signature": "boolean mapping_json_factory1_expr2_line_30",
        "snippet": "boolean mapping_json_factory1_expr2_line_30 = p_mapper_600_line_30 == null;\nint PROBE_END_LINE_30 = 32;",
        "begin_line": 32,
        "end_line": 33,
        "comment": "\n * Sub-class of {@link JsonFactory} that will create a proper\n * {@link ObjectCodec} to allow seam-less conversions between\n * JSON content and Java objects (POJOs).\n * The only addition to regular {@link JsonFactory} currently\n * is that {@link ObjectMapper} is constructed and passed as\n * the codec to use.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_START_LINE_38",
        "snippet": "int PROBE_START_LINE_38 = 38;\ncom.fasterxml.jackson.databind.introspect.TypeResolutionContext p_tc_3448_line_38 = tc;",
        "begin_line": 39,
        "end_line": 40,
        "comment": "       Collected state"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_END_LINE_46",
        "snippet": "int PROBE_END_LINE_46 = 47;\n// Constructor also always members of resolved class, parent == resolution context\nreturn annotated_creator_collector1_expr2_line_46;",
        "begin_line": 54,
        "end_line": 56,
        "comment": "       Collected state"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_START_LINE_56",
        "snippet": "int PROBE_START_LINE_56 = 56;\ncom.fasterxml.jackson.databind.JavaType p_type_3454_line_56 = type;",
        "begin_line": 65,
        "end_line": 66,
        "comment": "        TypeResolutionContext typeContext = new TypeResolutionContext.Basic(_typeFactory, _type.getBindings());"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_END_LINE_56",
        "snippet": "int PROBE_END_LINE_56 = 56;\nList<AnnotatedConstructor> constructors = annotated_creator_collector1_expr4_line_56;",
        "begin_line": 70,
        "end_line": 71,
        "comment": "        TypeResolutionContext typeContext = new TypeResolutionContext.Basic(_typeFactory, _type.getBindings());"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_START_LINE_63",
        "snippet": "int PROBE_START_LINE_63 = 80;\ncom.fasterxml.jackson.databind.AnnotationIntrospector f__intr_3458_line_63 = _intr;",
        "begin_line": 80,
        "end_line": 81,
        "comment": "        TypeResolutionContext typeContext = new TypeResolutionContext.Basic(_typeFactory, _type.getBindings());"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "boolean annotated_creator_collector1_expr7_line_64",
        "snippet": "boolean annotated_creator_collector1_expr7_line_64 = f__default_constructor_3459_line_64 != null;\nint PROBE_END_LINE_64 = 68;",
        "begin_line": 91,
        "end_line": 92,
        "comment": "         AnnotationIntrospector is null if annotations not enabled; if so, can skip:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_END_LINE_65",
        "snippet": "int PROBE_END_LINE_65 = 67;\nif (annotated_creator_collector1_expr8_line_65) {\n_defaultConstructor = null;",
        "begin_line": 99,
        "end_line": 101,
        "comment": "         AnnotationIntrospector is null if annotations not enabled; if so, can skip:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_START_LINE_71",
        "snippet": "int PROBE_START_LINE_71 = 73;\ncom.fasterxml.jackson.databind.AnnotationIntrospector f__intr_3458_line_71 = _intr;",
        "begin_line": 106,
        "end_line": 107,
        "comment": "             count down to allow safe removal"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int v_i_3460_line_71",
        "snippet": "int v_i_3460_line_71 = i;\ncom.fasterxml.jackson.databind.introspect.AnnotatedConstructor annotated_creator_collector1_expr11_line_71 = v_constructors_3456_line_71\n.get(v_i_3460_line_71);",
        "begin_line": 109,
        "end_line": 111,
        "comment": "             count down to allow safe removal"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_START_LINE_76",
        "snippet": "int PROBE_START_LINE_76 = 78;\ncom.fasterxml.jackson.databind.AnnotationIntrospector f__intr_3458_line_76 = _intr;",
        "begin_line": 120,
        "end_line": 121,
        "comment": "             count down to allow safe removal"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int v_i_3461_line_76",
        "snippet": "int v_i_3461_line_76 = i;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMethod annotated_creator_collector1_expr14_line_76 = v_factories_3457_line_76\n.get(v_i_3461_line_76);",
        "begin_line": 123,
        "end_line": 125,
        "comment": "             count down to allow safe removal"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_END_LINE_76",
        "snippet": "int PROBE_END_LINE_76 = 78;\nif (annotated_creator_collector1_expr13_line_76) {\nfactories.remove(i);",
        "begin_line": 128,
        "end_line": 130,
        "comment": "             count down to allow safe removal"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_START_LINE_81",
        "snippet": "int PROBE_START_LINE_81 = 81;\ncom.fasterxml.jackson.databind.introspect.AnnotatedConstructor f__default_constructor_3459_line_81 = _defaultConstructor;",
        "begin_line": 134,
        "end_line": 135,
        "comment": "             count down to allow safe removal"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_END_LINE_100",
        "snippet": "int PROBE_END_LINE_100 = 115;\n// 18-Jun-2016, tatu: Enum constructors will never be useful (unlike\n//    possibly static factory methods); but they can be royal PITA\n//    due to some oddities by JVM; see:\n//    [https://github.com/FasterXML/jackson-module-parameter-names/issues/35]\n//    for more. So, let's just skip them.\nif (annotated_creator_collector1_expr16_line_100) {\nint PROBE_START_LINE_101 = 101;",
        "begin_line": 157,
        "end_line": 164,
        "comment": "    \n     * Helper method for locating constructors (and matching mix-in overrides)\n     * we might want to use; this is needed in order to mix information between\n     * the two and construct resulting {@link AnnotatedConstructor}s\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_END_LINE_101",
        "snippet": "int PROBE_END_LINE_101 = 101;\nClassUtil.Ctor[] declaredCtors = annotated_creator_collector1_expr18_line_101;",
        "begin_line": 169,
        "end_line": 170,
        "comment": "            for more. So, let's just skip them."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_END_LINE_102",
        "snippet": "int PROBE_END_LINE_102 = 114;\nfor (ClassUtil.Ctor ctor : v_declared_ctors_3466_line_102) {\nint PROBE_START_LINE_103 = 105;",
        "begin_line": 173,
        "end_line": 175,
        "comment": "            for more. So, let's just skip them."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int annotated_creator_collector1_expr24_line_106",
        "snippet": "int annotated_creator_collector1_expr24_line_106 = v_ctor_3467_line_106.getParamCount();\nboolean annotated_creator_collector1_expr23_line_106 = annotated_creator_collector1_expr24_line_106 == 0;",
        "begin_line": 187,
        "end_line": 188,
        "comment": "            for more. So, let's just skip them."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_END_LINE_106",
        "snippet": "int PROBE_END_LINE_106 = 113;\nif (annotated_creator_collector1_expr23_line_106) {\nint PROBE_START_LINE_107 = 107;",
        "begin_line": 189,
        "end_line": 191,
        "comment": "            for more. So, let's just skip them."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_END_LINE_107",
        "snippet": "int PROBE_END_LINE_107 = 107;\ndefaultCtor = v_ctor_3467_line_107;",
        "begin_line": 193,
        "end_line": 194,
        "comment": "            for more. So, let's just skip them."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_START_LINE_109",
        "snippet": "int PROBE_START_LINE_109 = 111;\nList<com.fasterxml.jackson.databind.util.ClassUtil.Ctor> v_ctors_3465_line_109 = ctors;",
        "begin_line": 196,
        "end_line": 197,
        "comment": "            for more. So, let's just skip them."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "boolean annotated_creator_collector1_expr25_line_109",
        "snippet": "boolean annotated_creator_collector1_expr25_line_109 = v_ctors_3465_line_109 == null;\nint PROBE_END_LINE_109 = 111;",
        "begin_line": 198,
        "end_line": 199,
        "comment": "            for more. So, let's just skip them."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_START_LINE_112",
        "snippet": "int PROBE_START_LINE_112 = 112;\nList<com.fasterxml.jackson.databind.util.ClassUtil.Ctor> v_ctors_3465_line_112 = ctors;",
        "begin_line": 203,
        "end_line": 204,
        "comment": "            for more. So, let's just skip them."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "boolean annotated_creator_collector1_expr30_line_121",
        "snippet": "boolean annotated_creator_collector1_expr30_line_121 = v_default_ctor_3464_line_121 == null;\nint PROBE_END_LINE_121 = 123;",
        "begin_line": 225,
        "end_line": 226,
        "comment": "            for more. So, let's just skip them."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_START_LINE_126",
        "snippet": "int PROBE_START_LINE_126 = 126;\nList<com.fasterxml.jackson.databind.util.ClassUtil.Ctor> v_ctors_3465_line_126 = ctors;",
        "begin_line": 233,
        "end_line": 234,
        "comment": "\t\t\t Nothing found? Short-circuit"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_START_LINE_127",
        "snippet": "int PROBE_START_LINE_127 = 127;\nint v_ctor_count_3469_line_127 = ctorCount;",
        "begin_line": 238,
        "end_line": 239,
        "comment": "\t\t\t Nothing found? Short-circuit"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_START_LINE_129",
        "snippet": "int PROBE_START_LINE_129 = 129;\nList<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor> v_result_3468_line_129 = result;",
        "begin_line": 243,
        "end_line": 244,
        "comment": "\t\t\t Nothing found? Short-circuit"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "boolean annotated_creator_collector1_expr36_line_134",
        "snippet": "boolean annotated_creator_collector1_expr36_line_134 = p_primary_mix_in_3463_line_134 != null;\nint PROBE_END_LINE_134 = 162;",
        "begin_line": 252,
        "end_line": 253,
        "comment": "\t\t\t Nothing found? Short-circuit"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_START_LINE_168",
        "snippet": "int PROBE_START_LINE_168 = 168;\nList<com.fasterxml.jackson.databind.introspect.AnnotatedConstructor> v_result_3468_line_168 = result;",
        "begin_line": 298,
        "end_line": 299,
        "comment": "\t\t Ok: anything within mix-ins has been resolved; anything remaining we must resolve"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int v_i_3471_line_168",
        "snippet": "int v_i_3471_line_168 = i;\nAnnotatedConstructor annotated_creator_collector1_expr40_line_168 = v_result_3468_line_168\n.get(v_i_3471_line_168);",
        "begin_line": 300,
        "end_line": 302,
        "comment": "\t\t Ok: anything within mix-ins has been resolved; anything remaining we must resolve"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "boolean annotated_creator_collector1_expr41_line_169",
        "snippet": "boolean annotated_creator_collector1_expr41_line_169 = v_ctor_3472_line_169 == null;\nint PROBE_END_LINE_169 = 172;",
        "begin_line": 307,
        "end_line": 308,
        "comment": "\t\t Ok: anything within mix-ins has been resolved; anything remaining we must resolve"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int v_i_3471_line_170",
        "snippet": "int v_i_3471_line_170 = i;\nint PROBE_END_LINE_170 = 171;",
        "begin_line": 312,
        "end_line": 313,
        "comment": "\t\t Ok: anything within mix-ins has been resolved; anything remaining we must resolve"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "List<Method> candidates",
        "snippet": "List<Method> candidates = null;\n\nint PROBE_START_LINE_182 = 192;",
        "begin_line": 326,
        "end_line": 328,
        "comment": "\t\t Ok: anything within mix-ins has been resolved; anything remaining we must resolve"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_END_LINE_182",
        "snippet": "int PROBE_END_LINE_182 = 192;\n// First find all potentially relevant static methods\nfor (Method m : annotated_creator_collector1_expr44_line_182) {\nint PROBE_START_LINE_183 = 185;",
        "begin_line": 333,
        "end_line": 336,
        "comment": "\t\t Ok: anything within mix-ins has been resolved; anything remaining we must resolve"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int annotated_creator_collector1_expr48_line_183",
        "snippet": "int annotated_creator_collector1_expr48_line_183 = v_m_3476_line_183.getModifiers();\nboolean annotated_creator_collector1_expr47_line_183 = Modifier\n.isStatic(annotated_creator_collector1_expr48_line_183);",
        "begin_line": 338,
        "end_line": 340,
        "comment": "\t\t First find all potentially relevant static methods"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_START_LINE_188",
        "snippet": "int PROBE_START_LINE_188 = 190;\nList<java.lang.reflect.Method> v_candidates_3475_line_188 = candidates;",
        "begin_line": 346,
        "end_line": 347,
        "comment": "\t\t First find all potentially relevant static methods"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "boolean annotated_creator_collector1_expr49_line_188",
        "snippet": "boolean annotated_creator_collector1_expr49_line_188 = v_candidates_3475_line_188 == null;\nint PROBE_END_LINE_188 = 190;",
        "begin_line": 348,
        "end_line": 349,
        "comment": "\t\t First find all potentially relevant static methods"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
        "signature": "int PROBE_START_LINE_191",
        "snippet": "int PROBE_START_LINE_191 = 191;\nList<java.lang.reflect.Method> v_candidates_3475_line_191 = candidates;",
        "begin_line": 355,
        "end_line": 356,
        "comment": "            int argCount = m.getParameterTypes().length;"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeParser.java",
        "signature": "int PROBE_START_LINE_20",
        "snippet": "int PROBE_START_LINE_20 = 20;\ncom.fasterxml.jackson.databind.type.TypeFactory p_f_5795_line_20 = f;",
        "begin_line": 20,
        "end_line": 21,
        "comment": "\n * Simple recursive-descent parser for parsing canonical {@link JavaType}\n * representations and constructing type instances.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
        "signature": "int PROBE_START_LINE_39",
        "snippet": "int PROBE_START_LINE_39 = 41;\nClass<?>[] v_number_types_2921_line_39 = numberTypes;",
        "begin_line": 39,
        "end_line": 40,
        "comment": "             and more generic ones"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
        "signature": "int PROBE_END_LINE_39",
        "snippet": "int PROBE_END_LINE_39 = 41;\nfor (Class<?> cls : v_number_types_2921_line_39) {\nint PROBE_START_LINE_40 = 40;",
        "begin_line": 41,
        "end_line": 43,
        "comment": "             and more generic ones"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
        "signature": "HashSet<String> f__class_names_2920_line_40",
        "snippet": "HashSet<String> f__class_names_2920_line_40 = _classNames;\nClass<?> v_cls_2922_line_40 = cls;",
        "begin_line": 44,
        "end_line": 45,
        "comment": "             and more generic ones"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
        "signature": "int PROBE_START_LINE_70",
        "snippet": "int PROBE_START_LINE_70 = 107;\nHashSet<String> f__class_names_2920_line_70 = _classNames;",
        "begin_line": 83,
        "end_line": 84,
        "comment": "             and more generic ones"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
        "signature": "int PROBE_END_LINE_70",
        "snippet": "int PROBE_END_LINE_70 = 107;\nif (number_deserializers1_expr6_line_70) {\nif (rawType == Integer.class) {\nreturn IntegerDeserializer.wrapperInstance;",
        "begin_line": 87,
        "end_line": 90,
        "comment": "             and more generic ones"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/ClassStack.java",
        "signature": "int PROBE_START_LINE_25",
        "snippet": "int PROBE_START_LINE_25 = 25;\ncom.fasterxml.jackson.databind.type.ClassStack p_parent_5296_line_25 = parent;",
        "begin_line": 25,
        "end_line": 26,
        "comment": "\n * Simple helper class used to keep track of 'call stack' for classes being referenced\n * (as well as unbound variables)\n *\n * @since 2.7\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/ClassStack.java",
        "signature": "int PROBE_END_LINE_25",
        "snippet": "int PROBE_END_LINE_25 = 25;\n_parent = p_parent_5296_line_25;",
        "begin_line": 27,
        "end_line": 28,
        "comment": "\n * Simple helper class used to keep track of 'call stack' for classes being referenced\n * (as well as unbound variables)\n *\n * @since 2.7\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/ClassStack.java",
        "signature": "int PROBE_START_LINE_55",
        "snippet": "int PROBE_START_LINE_55 = 59;\nArrayList<com.fasterxml.jackson.databind.type.ResolvedRecursiveType> f__self_refs_5303_line_55 = _selfRefs;",
        "begin_line": 64,
        "end_line": 65,
        "comment": "    \n     * Method called when type that this stack frame represents is\n     * fully resolved, allowing self-references to be completed\n     * (if there are any)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/ClassStack.java",
        "signature": "boolean class_stack1_expr4_line_55",
        "snippet": "boolean class_stack1_expr4_line_55 = f__self_refs_5303_line_55 != null;\nint PROBE_END_LINE_55 = 59;",
        "begin_line": 66,
        "end_line": 67,
        "comment": "    \n     * Method called when type that this stack frame represents is\n     * fully resolved, allowing self-references to be completed\n     * (if there are any)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
        "signature": "Java7Support x",
        "snippet": "Java7Support x = null;\ntry {\nint PROBE_START_LINE_71 = 71;",
        "begin_line": 77,
        "end_line": 79,
        "comment": "      can, I hope, be avoided?)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
        "signature": "Object ob",
        "snippet": "Object ob = instantiate(factoryName);\nif (ob == null) { // could warn, if we had logging system (j.u.l?)\nreturn null;",
        "begin_line": 123,
        "end_line": 125,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
        "signature": "int PROBE_START_LINE_119",
        "snippet": "int PROBE_START_LINE_119 = 119;\ncom.fasterxml.jackson.databind.JavaType p_type_3317_line_119 = type;",
        "begin_line": 134,
        "end_line": 135,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
        "signature": "int PROBE_START_LINE_130",
        "snippet": "int PROBE_START_LINE_130 = 132;\nClass<?> f_class_dom_document_3310_line_130 = CLASS_DOM_DOCUMENT;",
        "begin_line": 175,
        "end_line": 176,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_START_LINE_79",
        "snippet": "int PROBE_START_LINE_79 = 79;\nClass<?> p_raw_452_line_79 = raw;",
        "begin_line": 79,
        "end_line": 80,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_END_LINE_79",
        "snippet": "int PROBE_END_LINE_79 = 79;\n_class = p_raw_452_line_79;",
        "begin_line": 81,
        "end_line": 82,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_START_LINE_80",
        "snippet": "int PROBE_START_LINE_80 = 80;\nClass<?> p_raw_452_line_80 = raw;",
        "begin_line": 83,
        "end_line": 84,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_END_LINE_227",
        "snippet": "int PROBE_END_LINE_227 = 227;\nreturn f__class_457_line_227; }\n\n/**\n* Method that can be used to check whether this type has\n* specified Class as its type erasure. Put another way, returns\n* true if instantiation of this Type is given (type-erased) Class.\n*/\n@Override\npublic final boolean hasRawClass(Class<?> clz) { int PROBE_START_LINE_235 = 235;",
        "begin_line": 275,
        "end_line": 284,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "boolean java_type1_expr10_line_235",
        "snippet": "boolean java_type1_expr10_line_235 = f__class_457_line_235 == p_clz_477_line_235;\nint PROBE_END_LINE_235 = 235;",
        "begin_line": 287,
        "end_line": 288,
        "comment": "    \n     * Method that can be used to check whether this type has\n     * specified Class as its type erasure. Put another way, returns\n     * true if instantiation of this Type is given (type-erased) Class.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "boolean java_type1_expr12_line_259",
        "snippet": "boolean java_type1_expr12_line_259 = java_type1_expr13_line_259 || java_type1_expr15_line_259;\nint PROBE_END_LINE_259 = 259;",
        "begin_line": 322,
        "end_line": 323,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_END_LINE_264",
        "snippet": "int PROBE_END_LINE_264 = 264;\nreturn java_type1_expr16_line_264;",
        "begin_line": 333,
        "end_line": 334,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int f_abstract_482_line_275",
        "snippet": "int f_abstract_482_line_275 = Modifier.ABSTRACT;\nint java_type1_expr23_line_275 = f_interface_481_line_275 | f_abstract_482_line_275;",
        "begin_line": 352,
        "end_line": 353,
        "comment": "    \n     * Convenience method for checking whether underlying Java type\n     * is a concrete class or not: abstract classes and interfaces\n     * are not.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_END_LINE_275",
        "snippet": "int PROBE_END_LINE_275 = 277;\nif (java_type1_expr19_line_275) {\nreturn true;",
        "begin_line": 358,
        "end_line": 360,
        "comment": "    \n     * Convenience method for checking whether underlying Java type\n     * is a concrete class or not: abstract classes and interfaces\n     * are not.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_START_LINE_281",
        "snippet": "int PROBE_START_LINE_281 = 281;\nClass<?> f__class_457_line_281 = _class;",
        "begin_line": 362,
        "end_line": 363,
        "comment": "    \n     * Convenience method for checking whether underlying Java type\n     * is a concrete class or not: abstract classes and interfaces\n     * are not.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int java_type1_expr36_line_353",
        "snippet": "int java_type1_expr36_line_353 = containedTypeCount();\nboolean java_type1_expr35_line_353 = java_type1_expr36_line_353 > 0;",
        "begin_line": 462,
        "end_line": 463,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
        "signature": "int PROBE_START_LINE_149",
        "snippet": "int PROBE_START_LINE_149 = 160;\ncom.fasterxml.jackson.core.JsonParser p_p_1786_line_149 = p;",
        "begin_line": 151,
        "end_line": 152,
        "comment": "    \n     * Main deserialization method for bean-based objects (POJOs).\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
        "signature": "int PROBE_END_LINE_151",
        "snippet": "int PROBE_END_LINE_151 = 151;\nreturn bean_deserializer1_expr3_line_151;",
        "begin_line": 167,
        "end_line": 168,
        "comment": "\t\t common case first"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
        "signature": "SettableBeanProperty prop",
        "snippet": "SettableBeanProperty prop = _beanProperties.find(propName);\n\nif (prop != null) { // normal case\ntry {\nprop.deserializeAndSet(p, ctxt, bean);",
        "begin_line": 275,
        "end_line": 279,
        "comment": "         23-Mar-2010, tatu: In some cases, we start with full JSON object too..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/CollectionLikeType.java",
        "signature": "int PROBE_START_LINE_36",
        "snippet": "int PROBE_START_LINE_36 = 36;\ncom.fasterxml.jackson.databind.JavaType p_elem_t_5310_line_36 = elemT;",
        "begin_line": 36,
        "end_line": 37,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/CollectionLikeType.java",
        "signature": "int PROBE_START_LINE_138",
        "snippet": "int PROBE_START_LINE_138 = 138;\ncom.fasterxml.jackson.databind.JavaType p_src_5332_line_138 = src;",
        "begin_line": 141,
        "end_line": 142,
        "comment": "            will cross that bridge if and when need be"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/CollectionLikeType.java",
        "signature": "JavaType collection_like_type1_expr3_line_138",
        "snippet": "JavaType collection_like_type1_expr3_line_138 = super.withHandlersFrom(p_src_5332_line_138);\nint PROBE_END_LINE_138 = 138;",
        "begin_line": 143,
        "end_line": 144,
        "comment": "            will cross that bridge if and when need be"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/CollectionLikeType.java",
        "signature": "JavaType type",
        "snippet": "JavaType type = collection_like_type1_expr3_line_138;\nint PROBE_START_LINE_139 = 139;",
        "begin_line": 145,
        "end_line": 146,
        "comment": "            will cross that bridge if and when need be"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/CollectionLikeType.java",
        "signature": "int PROBE_END_LINE_143",
        "snippet": "int PROBE_END_LINE_143 = 143;\ntype = collection_like_type1_expr8_line_143;",
        "begin_line": 174,
        "end_line": 175,
        "comment": "            will cross that bridge if and when need be"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/CollectionLikeType.java",
        "signature": "int PROBE_END_LINE_146",
        "snippet": "int PROBE_END_LINE_146 = 146;\nreturn v_type_5333_line_146;",
        "begin_line": 180,
        "end_line": 181,
        "comment": "            will cross that bridge if and when need be"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/CollectionLikeType.java",
        "signature": "boolean collection_like_type1_expr13_line_194",
        "snippet": "boolean collection_like_type1_expr13_line_194 = false;\nif (!collection_like_type1_expr12_line_194) {\ncom.fasterxml.jackson.databind.JavaType f__element_type_5314_line_194 = _elementType;",
        "begin_line": 234,
        "end_line": 236,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_START_LINE_156",
        "snippet": "int PROBE_START_LINE_156 = 158;\ncom.fasterxml.jackson.databind.deser.DeserializerFactory p_df_244_line_156 = df;",
        "begin_line": 158,
        "end_line": 159,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "boolean deserialization_context1_expr1_line_156",
        "snippet": "boolean deserialization_context1_expr1_line_156 = p_df_244_line_156 == null;\nint PROBE_END_LINE_156 = 158;",
        "begin_line": 160,
        "end_line": 161,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_START_LINE_159",
        "snippet": "int PROBE_START_LINE_159 = 159;\ncom.fasterxml.jackson.databind.deser.DeserializerFactory p_df_244_line_159 = df;",
        "begin_line": 165,
        "end_line": 166,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_END_LINE_159",
        "snippet": "int PROBE_END_LINE_159 = 159;\n_factory = p_df_244_line_159;",
        "begin_line": 167,
        "end_line": 168,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_START_LINE_160",
        "snippet": "int PROBE_START_LINE_160 = 162;\ncom.fasterxml.jackson.databind.deser.DeserializerCache p_cache_245_line_160 = cache;",
        "begin_line": 169,
        "end_line": 170,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_START_LINE_196",
        "snippet": "int PROBE_START_LINE_196 = 196;\ncom.fasterxml.jackson.databind.DeserializationConfig p_config_256_line_196 = config;",
        "begin_line": 223,
        "end_line": 224,
        "comment": "    \n     * Constructor used for creating actual per-call instances.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_END_LINE_198",
        "snippet": "int PROBE_END_LINE_198 = 198;\n_parser = p_p_257_line_198;",
        "begin_line": 235,
        "end_line": 236,
        "comment": "    \n     * Constructor used for creating actual per-call instances.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_END_LINE_199",
        "snippet": "int PROBE_END_LINE_199 = 199;\n_injectableValues = p_injectable_values_258_line_199;",
        "begin_line": 239,
        "end_line": 240,
        "comment": "    \n     * Constructor used for creating actual per-call instances.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_END_LINE_200",
        "snippet": "int PROBE_END_LINE_200 = 200;\n_attributes = deserialization_context1_expr7_line_200;",
        "begin_line": 245,
        "end_line": 246,
        "comment": "    \n     * Constructor used for creating actual per-call instances.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_END_LINE_446",
        "snippet": "int PROBE_END_LINE_446 = 446;\ndeser = (JsonDeserializer<Object>) deserialization_context1_expr20_line_446;",
        "begin_line": 542,
        "end_line": 543,
        "comment": "    \n     * Method for finding a value deserializer, and creating a contextual\n     * version if necessary, for value reached via specified property.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_START_LINE_543",
        "snippet": "int PROBE_START_LINE_543 = 543;\nClass<?> p_cls_286_line_543 = cls;",
        "begin_line": 684,
        "end_line": 685,
        "comment": "    \n     * Convenience method, functionally equivalent to:\n     *<pre>\n     *  getConfig().constructType(cls);\n     * </pre>\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "boolean deserialization_context1_expr35_line_543",
        "snippet": "boolean deserialization_context1_expr35_line_543 = p_cls_286_line_543 == null;\nboolean deserialization_context1_expr33_line_543 = (deserialization_context1_expr35_line_543);",
        "begin_line": 686,
        "end_line": 687,
        "comment": "    \n     * Convenience method, functionally equivalent to:\n     *<pre>\n     *  getConfig().constructType(cls);\n     * </pre>\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "Object goodValue",
        "snippet": "Object goodValue = h.value().handleWeirdNativeValue(this, targetType, badValue, p);\nif (goodValue != DeserializationProblemHandler.NOT_HANDLED) {\n// Sanity check for broken handlers, otherwise nasty to debug:\nif ((goodValue == null) || raw.isInstance(goodValue)) {\nreturn goodValue;",
        "begin_line": 1165,
        "end_line": 1169,
        "comment": "             Can bail out if it's handled"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java",
        "signature": "int PROBE_START_LINE_38",
        "snippet": "int PROBE_START_LINE_38 = 38;\ncom.fasterxml.jackson.databind.JavaType p_base_type_4680_line_38 = baseType;",
        "begin_line": 38,
        "end_line": 39,
        "comment": "    \n     * Common base type for all polymorphic instances handled.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java",
        "signature": "int PROBE_END_LINE_38",
        "snippet": "int PROBE_END_LINE_38 = 38;\n_baseType = p_base_type_4680_line_38;",
        "begin_line": 40,
        "end_line": 41,
        "comment": "    \n     * Common base type for all polymorphic instances handled.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
        "signature": "int PROBE_START_LINE_42",
        "snippet": "int PROBE_START_LINE_42 = 42;\ncom.fasterxml.jackson.databind.BeanProperty p_prop_4500_line_42 = prop;",
        "begin_line": 46,
        "end_line": 47,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
        "signature": "int PROBE_START_LINE_71",
        "snippet": "int PROBE_START_LINE_71 = 71;\ncom.fasterxml.jackson.core.JsonParser p_jp_4508_line_71 = jp;",
        "begin_line": 88,
        "end_line": 89,
        "comment": "    \n     * Method called when actual object is serialized as JSON Object\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
        "signature": "Object typeId",
        "snippet": "Object typeId = p.getTypeId();\nif (typeId != null) {\nreturn _deserializeWithNativeTypeId(p, ctxt, typeId);",
        "begin_line": 116,
        "end_line": 118,
        "comment": "\t\t 02-Aug-2013, tatu: May need to use native type ids"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
        "signature": "boolean hadStartArray",
        "snippet": "boolean hadStartArray = as_array_type_deserializer1_expr11_line_95;\nint PROBE_START_LINE_96 = 96;",
        "begin_line": 125,
        "end_line": 126,
        "comment": "\t\t 02-Aug-2013, tatu: May need to use native type ids"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
        "signature": "String typeId",
        "snippet": "String typeId = as_array_type_deserializer1_expr12_line_96;\nint PROBE_START_LINE_97 = 97;",
        "begin_line": 131,
        "end_line": 132,
        "comment": "\t\t 02-Aug-2013, tatu: May need to use native type ids"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
        "signature": "int PROBE_END_LINE_99",
        "snippet": "int PROBE_END_LINE_99 = 115;\n// Minor complication: we may need to merge type id in?\nif (as_array_type_deserializer1_expr14_line_99) {\n// but what if there's nowhere to add it in? Error? Or skip? For now, skip.\nTokenBuffer tb = new TokenBuffer(null, false);",
        "begin_line": 143,
        "end_line": 147,
        "comment": "\t\t 02-Aug-2013, tatu: May need to use native type ids"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
        "signature": "int PROBE_END_LINE_23",
        "snippet": "int PROBE_END_LINE_23 = 23;\n_mixInResolver = annotated_method_collector1_expr2_line_23;",
        "begin_line": 38,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
        "signature": "int PROBE_END_LINE_32",
        "snippet": "int PROBE_END_LINE_32 = 33;\n// Constructor also always members of resolved class, parent == resolution context\nreturn annotated_method_collector1_expr5_line_32;",
        "begin_line": 52,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
        "signature": "boolean annotated_method_collector1_expr11_line_53",
        "snippet": "boolean annotated_method_collector1_expr11_line_53 = f__mix_in_resolver_3590_line_53 != null;\nint PROBE_END_LINE_53 = 59;",
        "begin_line": 86,
        "end_line": 87,
        "comment": "         Special case: mix-ins for Object.class? (to apply to ALL classes)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
        "signature": "int PROBE_START_LINE_54",
        "snippet": "int PROBE_START_LINE_54 = 54;\ncom.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver f__mix_in_resolver_3590_line_54 = _mixInResolver;",
        "begin_line": 89,
        "end_line": 90,
        "comment": "         Special case: mix-ins for Object.class? (to apply to ALL classes)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
        "signature": "int PROBE_END_LINE_54",
        "snippet": "int PROBE_END_LINE_54 = 54;\nClass<?> mixin = annotated_method_collector1_expr12_line_54;",
        "begin_line": 93,
        "end_line": 94,
        "comment": "         Special case: mix-ins for Object.class? (to apply to ALL classes)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
        "signature": "int PROBE_START_LINE_55",
        "snippet": "int PROBE_START_LINE_55 = 58;\nClass<?> v_mixin_3606_line_55 = mixin;",
        "begin_line": 95,
        "end_line": 96,
        "comment": "         Special case: mix-ins for Object.class? (to apply to ALL classes)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
        "signature": "int PROBE_START_LINE_65",
        "snippet": "int PROBE_START_LINE_65 = 83;\nboolean v_check_java_lang_object_3605_line_65 = checkJavaLangObject;",
        "begin_line": 105,
        "end_line": 106,
        "comment": "         Special case: mix-ins for Object.class? (to apply to ALL classes)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
        "signature": "boolean annotated_method_collector1_expr17_line_65",
        "snippet": "boolean annotated_method_collector1_expr17_line_65 = f__intr_3458_line_65 != null;\nannotated_method_collector1_expr16_line_65 = (annotated_method_collector1_expr17_line_65);",
        "begin_line": 111,
        "end_line": 112,
        "comment": "         Special case: mix-ins for Object.class? (to apply to ALL classes)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
        "signature": "boolean annotated_method_collector1_expr19_line_65",
        "snippet": "boolean annotated_method_collector1_expr19_line_65 = v_methods_3603_line_65.isEmpty();\nannotated_method_collector1_expr18_line_65 = !annotated_method_collector1_expr19_line_65;",
        "begin_line": 115,
        "end_line": 116,
        "comment": "         Special case: mix-ins for Object.class? (to apply to ALL classes)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
        "signature": "int PROBE_END_LINE_91",
        "snippet": "int PROBE_END_LINE_91 = 91;\nAnnotatedMethod am = annotated_method_collector1_expr24_line_91;",
        "begin_line": 171,
        "end_line": 172,
        "comment": "\t\t And then let's create the lookup map"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
        "signature": "boolean annotated_method_collector1_expr26_line_92",
        "snippet": "boolean annotated_method_collector1_expr26_line_92 = v_am_3609_line_92 != null;\nint PROBE_END_LINE_92 = 94;",
        "begin_line": 175,
        "end_line": 176,
        "comment": "\t\t And then let's create the lookup map"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
        "signature": "boolean annotated_method_collector1_expr30_line_103",
        "snippet": "boolean annotated_method_collector1_expr30_line_103 = p_mix_in_cls_3613_line_103 != null;\nint PROBE_END_LINE_103 = 105;",
        "begin_line": 199,
        "end_line": 200,
        "comment": "\t\t And then let's create the lookup map"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_32",
        "snippet": "int PROBE_START_LINE_32 = 33;\ncom.fasterxml.jackson.databind.type.SimpleType basic_class_introspector1_expr2_line_32 = SimpleType\n.constructUnsafe(String.class);",
        "begin_line": 32,
        "end_line": 34,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     *\n     * @since 2.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_47",
        "snippet": "int PROBE_START_LINE_47 = 48;\nClass<Long> f_type_3783_line_47 = Long.TYPE;",
        "begin_line": 67,
        "end_line": 68,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     *\n     * @since 2.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "BasicBeanDescription desc",
        "snippet": "BasicBeanDescription desc = _findStdTypeDesc(type);\nif (desc == null) {\n// As per [databind#550], skip full introspection for some of standard\n// structured types as well\ndesc = _findStdJdkCollectionDesc(cfg, type);",
        "begin_line": 113,
        "end_line": 117,
        "comment": "         minor optimization: for some JDK types do minimal introspection"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "BasicBeanDescription desc",
        "snippet": "BasicBeanDescription desc = basic_class_introspector1_expr17_line_106;\nint PROBE_START_LINE_107 = 117;",
        "begin_line": 137,
        "end_line": 138,
        "comment": "\t\t minor optimization: for some JDK types do minimal introspection"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_110",
        "snippet": "int PROBE_START_LINE_110 = 110;\ncom.fasterxml.jackson.databind.DeserializationConfig p_cfg_3788_line_110 = cfg;",
        "begin_line": 143,
        "end_line": 144,
        "comment": "\t\t minor optimization: for some JDK types do minimal introspection"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_END_LINE_110",
        "snippet": "int PROBE_END_LINE_110 = 110;\n// As per [Databind#550], skip full introspection for some of standard\n// structured types as well\ndesc = basic_class_introspector1_expr19_line_110;",
        "begin_line": 148,
        "end_line": 151,
        "comment": "\t\t minor optimization: for some JDK types do minimal introspection"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_112",
        "snippet": "int PROBE_START_LINE_112 = 113;\ncom.fasterxml.jackson.databind.DeserializationConfig p_cfg_3788_line_112 = cfg;",
        "begin_line": 157,
        "end_line": 158,
        "comment": "             structured types as well"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_END_LINE_112",
        "snippet": "int PROBE_END_LINE_112 = 113;\ndesc = basic_class_introspector1_expr21_line_112;",
        "begin_line": 163,
        "end_line": 164,
        "comment": "             structured types as well"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_116",
        "snippet": "int PROBE_START_LINE_116 = 116;\nLRUMap<com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.BasicBeanDescription> f__cached_fca_3784_line_116 = _cachedFCA;",
        "begin_line": 166,
        "end_line": 167,
        "comment": "             structured types as well"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_END_LINE_143",
        "snippet": "int PROBE_END_LINE_143 = 143;\n// As per [Databind#550], skip full introspection for some of standard\n// structured types as well\ndesc = basic_class_introspector1_expr28_line_143;",
        "begin_line": 213,
        "end_line": 216,
        "comment": "         this is still a superset of \"forClassAnnotations\", so may optimize by optional add:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_157",
        "snippet": "int PROBE_START_LINE_157 = 157;\ncom.fasterxml.jackson.databind.JavaType p_type_3800_line_157 = type;",
        "begin_line": 237,
        "end_line": 238,
        "comment": "\t\t should this be cached for FCA?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_159",
        "snippet": "int PROBE_START_LINE_159 = 159;\nLRUMap<com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.BasicBeanDescription> f__cached_fca_3784_line_159 = _cachedFCA;",
        "begin_line": 247,
        "end_line": 248,
        "comment": "\t\t should this be cached for FCA?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_END_LINE_159",
        "snippet": "int PROBE_END_LINE_159 = 159;\ndesc = basic_class_introspector1_expr32_line_159;",
        "begin_line": 252,
        "end_line": 253,
        "comment": "\t\t should this be cached for FCA?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_160",
        "snippet": "int PROBE_START_LINE_160 = 164;\ncom.fasterxml.jackson.databind.introspect.BasicBeanDescription v_desc_3802_line_160 = desc;",
        "begin_line": 254,
        "end_line": 255,
        "comment": "\t\t should this be cached for FCA?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_161",
        "snippet": "int PROBE_START_LINE_161 = 162;\nMapperConfig<?> p_config_3799_line_161 = config;",
        "begin_line": 259,
        "end_line": 260,
        "comment": "\t\t should this be cached for FCA?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_END_LINE_163",
        "snippet": "int PROBE_END_LINE_163 = 163;\nf__cached_fca_3784_line_163.put(p_type_3800_line_163, v_desc_3802_line_163);",
        "begin_line": 271,
        "end_line": 272,
        "comment": "\t\t should this be cached for FCA?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.FailingDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/FailingDeserializer.java",
        "signature": "int PROBE_START_LINE_24",
        "snippet": "int PROBE_START_LINE_24 = 24;\nString p_m_2683_line_24 = m;",
        "begin_line": 24,
        "end_line": 25,
        "comment": "\n * Special bogus \"serializer\" that will throw\n * {@link JsonMappingException} if an attempt is made to deserialize\n * a value. This is used as placeholder to avoid NPEs for uninitialized\n * structured serializers or handlers.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_START_LINE_202",
        "snippet": "int PROBE_START_LINE_202 = 202;\ncom.fasterxml.jackson.databind.BeanDescription p_bean_desc_1848_line_202 = beanDesc;",
        "begin_line": 222,
        "end_line": 223,
        "comment": "    \n     * Constructor used when initially building a deserializer\n     * instance, given a {@link BeanDeserializerBuilder} that\n     * contains configuration.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_END_LINE_202",
        "snippet": "int PROBE_END_LINE_202 = 202;\n_beanType = bean_deserializer_base1_expr5_line_202;",
        "begin_line": 226,
        "end_line": 227,
        "comment": "    \n     * Constructor used when initially building a deserializer\n     * instance, given a {@link BeanDeserializerBuilder} that\n     * contains configuration.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_END_LINE_203",
        "snippet": "int PROBE_END_LINE_203 = 203;\n_valueInstantiator = bean_deserializer_base1_expr6_line_203;",
        "begin_line": 232,
        "end_line": 233,
        "comment": "    \n     * Constructor used when initially building a deserializer\n     * instance, given a {@link BeanDeserializerBuilder} that\n     * contains configuration.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "boolean bean_deserializer_base1_expr26_line_441",
        "snippet": "boolean bean_deserializer_base1_expr26_line_441 = f__value_instantiator_1801_line_441.canCreateFromObjectWith();\nint PROBE_END_LINE_441 = 457;",
        "begin_line": 537,
        "end_line": 538,
        "comment": "         if ValueInstantiator can use \"creator\" approach, need to resolve it here..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "UnwrappedPropertyHandler unwrapped",
        "snippet": "UnwrappedPropertyHandler unwrapped = null;\n\n// 24-Mar-2017, tatu: Looks like we may have to iterate over\n//   properties twice, to handle potential issues with recursive\n//   types (see [databind#1575] f.ex).\n// First loop: find deserializer if not yet known, but do not yet\n// contextualize (since that can lead to problems with self-references)\n// 22-Jan-2018, tatu: NOTE! Need not check for `isIgnorable` as that can\n//   only happen for props in `creatorProps`\n\nint PROBE_START_LINE_468 = 478;",
        "begin_line": 556,
        "end_line": 566,
        "comment": "                 at this point, but is needed for further processing down the line"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_END_LINE_468",
        "snippet": "int PROBE_END_LINE_468 = 478;\nfor (SettableBeanProperty prop : f__bean_properties_1805_line_468) {\nint PROBE_START_LINE_469 = 477;",
        "begin_line": 568,
        "end_line": 570,
        "comment": "           only happen for props in `creatorProps`"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_END_LINE_469",
        "snippet": "int PROBE_END_LINE_469 = 477;\nif (bean_deserializer_base1_expr27_line_469) {\nint PROBE_START_LINE_471 = 471;",
        "begin_line": 574,
        "end_line": 576,
        "comment": "           only happen for props in `creatorProps`"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_END_LINE_471",
        "snippet": "int PROBE_END_LINE_471 = 471;\n// [databind#125]: allow use of converters\nJsonDeserializer<?> deser = bean_deserializer_base1_expr29_line_471;",
        "begin_line": 581,
        "end_line": 583,
        "comment": "           only happen for props in `creatorProps`"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "boolean bean_deserializer_base1_expr30_line_472",
        "snippet": "boolean bean_deserializer_base1_expr30_line_472 = v_deser_1887_line_472 == null;\nint PROBE_END_LINE_472 = 474;",
        "begin_line": 586,
        "end_line": 587,
        "comment": "\t\t\t\t [databind#125]: allow use of converters"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_END_LINE_473",
        "snippet": "int PROBE_END_LINE_473 = 473;\ndeser = bean_deserializer_base1_expr31_line_473;",
        "begin_line": 596,
        "end_line": 597,
        "comment": "\t\t\t\t [databind#125]: allow use of converters"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_END_LINE_481",
        "snippet": "int PROBE_END_LINE_481 = 538;\n// Second loop: contextualize, find other pieces\nfor (SettableBeanProperty origProp : f__bean_properties_1805_line_481) {\nint PROBE_START_LINE_482 = 482;",
        "begin_line": 618,
        "end_line": 621,
        "comment": "\t\t\t\t [databind#125]: allow use of converters"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "boolean bean_deserializer_base1_expr40_line_490",
        "snippet": "boolean bean_deserializer_base1_expr40_line_490 = !bean_deserializer_base1_expr41_line_490;\nint PROBE_END_LINE_490 = 492;",
        "begin_line": 660,
        "end_line": 661,
        "comment": "\t\t\t Need to link managed references with matching back references"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_START_LINE_491",
        "snippet": "int PROBE_START_LINE_491 = 491;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_1882_line_491 = ctxt;",
        "begin_line": 664,
        "end_line": 665,
        "comment": "\t\t\t [databind#351]: need to wrap properties that require object id resolution."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_START_LINE_494",
        "snippet": "int PROBE_START_LINE_494 = 494;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_1882_line_494 = ctxt;",
        "begin_line": 672,
        "end_line": 673,
        "comment": "\t\t\t [databind#351]: need to wrap properties that require object id resolution."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_START_LINE_520",
        "snippet": "int PROBE_START_LINE_520 = 522;\ncom.fasterxml.jackson.databind.deser.SettableBeanProperty v_prop_1890_line_520 = prop;",
        "begin_line": 726,
        "end_line": 727,
        "comment": "\t\t\t non-static inner classes too:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_START_LINE_521",
        "snippet": "int PROBE_START_LINE_521 = 521;\ncom.fasterxml.jackson.databind.deser.impl.BeanPropertyMap f__bean_properties_1805_line_521 = _beanProperties;",
        "begin_line": 732,
        "end_line": 733,
        "comment": "\t\t\t non-static inner classes too:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_START_LINE_527",
        "snippet": "int PROBE_START_LINE_527 = 527;\ncom.fasterxml.jackson.databind.deser.SettableBeanProperty v_prop_1890_line_527 = prop;",
        "begin_line": 748,
        "end_line": 749,
        "comment": "             it needs different handling altogether"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_START_LINE_528",
        "snippet": "int PROBE_START_LINE_528 = 536;\ncom.fasterxml.jackson.databind.jsontype.TypeDeserializer v_type_deser_1894_line_528 = typeDeser;",
        "begin_line": 754,
        "end_line": 755,
        "comment": "             it needs different handling altogether"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_END_LINE_540",
        "snippet": "int PROBE_END_LINE_540 = 543;\n// \"any setter\" may also need to be resolved now\nif (bean_deserializer_base1_expr55_line_540) {\n_anySetter = _anySetter.withValueDeserializer(findDeserializer(ctxt,\n_anySetter.getType(), _anySetter.getProperty()));",
        "begin_line": 783,
        "end_line": 787,
        "comment": "                     In fact, remove from list of known properties to simplify later handling"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_END_LINE_557",
        "snippet": "int PROBE_END_LINE_557 = 566;\n// and array-delegate-based constructor:\nif (bean_deserializer_base1_expr61_line_557) {\nJavaType delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());",
        "begin_line": 809,
        "end_line": 812,
        "comment": "\t\t as well as delegate-based constructor:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_START_LINE_574",
        "snippet": "int PROBE_START_LINE_574 = 580;\ncom.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.Builder v_ext_types_1883_line_574 = extTypes;",
        "begin_line": 832,
        "end_line": 833,
        "comment": "\t\t And now that we know CreatorProperty instances are also resolved can finally create the creator:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_START_LINE_587",
        "snippet": "int PROBE_START_LINE_587 = 587;\nboolean f__vanilla_processing_1788_line_587 = _vanillaProcessing;",
        "begin_line": 855,
        "end_line": 856,
        "comment": "             we consider this non-standard, to offline handling"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "boolean bean_deserializer_base1_expr66_line_587",
        "snippet": "boolean bean_deserializer_base1_expr66_line_587 = true;\nif (f__vanilla_processing_1788_line_587) {\nboolean f__non_standard_creation_1862_line_587 = _nonStandardCreation;",
        "begin_line": 857,
        "end_line": 859,
        "comment": "             we consider this non-standard, to offline handling"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_START_LINE_598",
        "snippet": "int PROBE_START_LINE_598 = 617;\ncom.fasterxml.jackson.databind.deser.SettableBeanProperty[] p_creator_props_1896_line_598 = creatorProps;",
        "begin_line": 881,
        "end_line": 882,
        "comment": "    \n     * @since 2.8.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "TypeDeserializer td",
        "snippet": "TypeDeserializer td = delegateType.getTypeHandler();\nif (td == null) {\ntd = ctxt.getConfig().findTypeDeserializer(delegateType);",
        "begin_line": 916,
        "end_line": 918,
        "comment": "         Need to create a temporary property to allow contextual deserializers:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "boolean bean_deserializer_base1_expr73_line_664",
        "snippet": "boolean bean_deserializer_base1_expr73_line_664 = v_conv_def_1905_line_664 != null;\nint PROBE_END_LINE_664 = 671;",
        "begin_line": 971,
        "end_line": 972,
        "comment": "    \n     * Helper method that can be used to see if specified property is annotated\n     * to indicate use of a converter for property value (in case of container types,\n     * it is container type itself, not key or content type).\n     *<p>\n     * NOTE: returned deserializer is NOT yet contextualized, caller needs to take\n     * care to do that.\n     *\n     * @since 2.2\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "int PROBE_END_LINE_754",
        "snippet": "int PROBE_END_LINE_754 = 754;\n// 16-May-2016, tatu: How about per-property case-insensitivity?\nBoolean B = bean_deserializer_base1_expr95_line_754;",
        "begin_line": 1151,
        "end_line": 1153,
        "comment": "\t\t One more thing: are we asked to serialize POJO as array?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "signature": "ReadableObjectId roid",
        "snippet": "ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\nroid.bindItem(pojo);",
        "begin_line": 1729,
        "end_line": 1730,
        "comment": "             nope: already same type"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_START_LINE_88",
        "snippet": "int PROBE_START_LINE_88 = 88;\ncom.fasterxml.jackson.databind.JavaType p_value_type_3149_line_88 = valueType;",
        "begin_line": 90,
        "end_line": 91,
        "comment": "    \n     * @deprecated Since 2.7 use constructor that takes {@link JavaType} instead\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_START_LINE_130",
        "snippet": "int PROBE_START_LINE_130 = 130;\ncom.fasterxml.jackson.databind.introspect.AnnotatedWithParams p_default_creator_3153_line_130 = defaultCreator;",
        "begin_line": 156,
        "end_line": 157,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_END_LINE_130",
        "snippet": "int PROBE_END_LINE_130 = 130;\n_defaultCreator = p_default_creator_3153_line_130;",
        "begin_line": 158,
        "end_line": 159,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_START_LINE_131",
        "snippet": "int PROBE_START_LINE_131 = 131;\ncom.fasterxml.jackson.databind.introspect.AnnotatedWithParams p_delegate_creator_3154_line_131 = delegateCreator;",
        "begin_line": 160,
        "end_line": 161,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_END_LINE_131",
        "snippet": "int PROBE_END_LINE_131 = 131;\n_delegateCreator = p_delegate_creator_3154_line_131;",
        "begin_line": 162,
        "end_line": 163,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_START_LINE_132",
        "snippet": "int PROBE_START_LINE_132 = 132;\ncom.fasterxml.jackson.databind.JavaType p_delegate_type_3155_line_132 = delegateType;",
        "begin_line": 164,
        "end_line": 165,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_END_LINE_132",
        "snippet": "int PROBE_END_LINE_132 = 132;\n_delegateType = p_delegate_type_3155_line_132;",
        "begin_line": 166,
        "end_line": 167,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_END_LINE_161",
        "snippet": "int PROBE_END_LINE_161 = 161;\n_fromDoubleCreator = p_creator_3177_line_161;",
        "begin_line": 225,
        "end_line": 226,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "signature": "int PROBE_START_LINE_165",
        "snippet": "int PROBE_START_LINE_165 = 165;\ncom.fasterxml.jackson.databind.introspect.AnnotatedWithParams p_creator_3179_line_165 = creator;",
        "begin_line": 230,
        "end_line": 231,
        "comment": "    \n     * Method for setting properties related to instantiating values\n     * from JSON Object. We will choose basically only one approach (out of possible\n     * three), and clear other properties\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int PROBE_START_LINE_85",
        "snippet": "int PROBE_START_LINE_85 = 85;\nboolean p_case_insensitive_2496_line_85 = caseInsensitive;",
        "begin_line": 90,
        "end_line": 91,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "final int hashSize",
        "snippet": "final int hashSize = bean_property_map1_expr7_line_195;\nint PROBE_START_LINE_196 = 196;",
        "begin_line": 227,
        "end_line": 228,
        "comment": "\t\t First: calculate size of primary hash area"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int v_hash_size_2518_line_196",
        "snippet": "int v_hash_size_2518_line_196 = hashSize;\nint bean_property_map1_expr8_line_196 = v_hash_size_2518_line_196 - 1;",
        "begin_line": 229,
        "end_line": 230,
        "comment": "\t\t First: calculate size of primary hash area"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int PROBE_END_LINE_196",
        "snippet": "int PROBE_END_LINE_196 = 196;\n_hashMask = bean_property_map1_expr8_line_196;",
        "begin_line": 231,
        "end_line": 232,
        "comment": "\t\t First: calculate size of primary hash area"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int bean_property_map1_expr13_line_199",
        "snippet": "int bean_property_map1_expr13_line_199 = hashSize >> 1;\nint bean_property_map1_expr12_line_199 = (bean_property_map1_expr13_line_199);",
        "begin_line": 236,
        "end_line": 237,
        "comment": "\t\t First: calculate size of primary hash area"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int bean_property_map1_expr11_line_199",
        "snippet": "int bean_property_map1_expr11_line_199 = v_hash_size_2518_line_199 + bean_property_map1_expr12_line_199;\nint bean_property_map1_expr10_line_199 = (bean_property_map1_expr11_line_199);",
        "begin_line": 238,
        "end_line": 239,
        "comment": "\t\t First: calculate size of primary hash area"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "boolean bean_property_map1_expr16_line_205",
        "snippet": "boolean bean_property_map1_expr16_line_205 = v_prop_2523_line_205 == null;\nint PROBE_END_LINE_205 = 207;",
        "begin_line": 256,
        "end_line": 257,
        "comment": "\t\t and allocate enough to contain primary/secondary, expand for spillovers as need be"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int PROBE_START_LINE_226",
        "snippet": "int PROBE_START_LINE_226 = 226;\nObject[] v_hashed_2521_line_226 = hashed;",
        "begin_line": 299,
        "end_line": 300,
        "comment": "                     ok, spill over."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int index",
        "snippet": "int index = 0;\nfor (int i = 1, end = _hashArea.length; i < end; i += 2) {\nint PROBE_START_LINE_294 = 294;",
        "begin_line": 391,
        "end_line": 393,
        "comment": "         order is arbitrary, but stable:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "Object bean_property_map1_expr33_line_294",
        "snippet": "Object bean_property_map1_expr33_line_294 = f__hash_area_2527_line_294[v_i_2537_line_294];\nint PROBE_END_LINE_294 = 294;",
        "begin_line": 396,
        "end_line": 397,
        "comment": "         order is arbitrary, but stable:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "SettableBeanProperty prop",
        "snippet": "SettableBeanProperty prop = (SettableBeanProperty) bean_property_map1_expr33_line_294;\nint PROBE_START_LINE_295 = 297;",
        "begin_line": 398,
        "end_line": 399,
        "comment": "         order is arbitrary, but stable:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "boolean bean_property_map1_expr34_line_295",
        "snippet": "boolean bean_property_map1_expr34_line_295 = v_prop_2539_line_295 != null;\nint PROBE_END_LINE_295 = 297;",
        "begin_line": 401,
        "end_line": 402,
        "comment": "         order is arbitrary, but stable:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "SettableBeanProperty prop",
        "snippet": "SettableBeanProperty prop = _propsInOrder[i];\n// 01-May-2015, tatu: Not 100% sure if existing `null`s should be retained;",
        "begin_line": 463,
        "end_line": 464,
        "comment": "    \n     * Mutant factory method that will use this instance as the base, and\n     * construct an instance that is otherwise same except for excluding\n     * properties with specified names.\n     *\n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int PROBE_END_LINE_397",
        "snippet": "int PROBE_END_LINE_397 = 397;\nf__hash_area_2527_line_397[v_i_2545_line_397] = p_new_prop_2544_line_397;",
        "begin_line": 528,
        "end_line": 529,
        "comment": "    \n     * Specialized method that can be used to replace an existing entry\n     * (note: entry MUST exist; otherwise exception is thrown) with\n     * specified replacement.\n     *\n     * @since 2.9.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int PROBE_START_LINE_401",
        "snippet": "int PROBE_START_LINE_401 = 401;\ncom.fasterxml.jackson.databind.deser.SettableBeanProperty[] f__props_in_order_2500_line_401 = _propsInOrder;",
        "begin_line": 533,
        "end_line": 534,
        "comment": "    \n     * Specialized method that can be used to replace an existing entry\n     * (note: entry MUST exist; otherwise exception is thrown) with\n     * specified replacement.\n     *\n     * @since 2.9.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int bean_property_map1_expr71_line_535",
        "snippet": "int bean_property_map1_expr71_line_535 = v_ix_2556_line_535 + 1;\nObject bean_property_map1_expr70_line_535 = f__hash_area_2527_line_535[bean_property_map1_expr71_line_535];",
        "begin_line": 750,
        "end_line": 751,
        "comment": "        int slot = (h + (h >> 13)) & _hashMask;"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
        "signature": "int PROBE_END_LINE_535",
        "snippet": "int PROBE_END_LINE_535 = 535;\nreturn (SettableBeanProperty) bean_property_map1_expr70_line_535;",
        "begin_line": 752,
        "end_line": 753,
        "comment": "        int slot = (h + (h >> 13)) & _hashMask;"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "signature": "int PROBE_START_LINE_31",
        "snippet": "int PROBE_START_LINE_31 = 31;\n\nprotected static final String f_pattern_plain_str_5992_line_31 = PATTERN_PLAIN_STR;",
        "begin_line": 33,
        "end_line": 35,
        "comment": "    /* 24-Jun-2017, tatu: Finally rewrote deserialization to use basic Regex\n     *   instead of SimpleDateFormat; partly for better concurrency, partly\n     *   for easier enforcing of specific rules. Heavy lifting done by Calendar,\n     *   anyway.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "signature": "int PROBE_START_LINE_83",
        "snippet": "int PROBE_START_LINE_83 = 83;\njava.util.TimeZone std_date_format1_expr5_line_83 = TimeZone.getTimeZone(\"UTC\");",
        "begin_line": 99,
        "end_line": 100,
        "comment": "    \n     * By default we use UTC for everything, with Jackson 2.7 and later\n     * (2.6 and earlier relied on GMT)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "signature": "int PROBE_END_LINE_83",
        "snippet": "int PROBE_END_LINE_83 = 83;\nDEFAULT_TIMEZONE = std_date_format1_expr5_line_83; // since 2.7\n}\n\nint PROBE_START_LINE_86 = 86;",
        "begin_line": 101,
        "end_line": 105,
        "comment": "    \n     * By default we use UTC for everything, with Jackson 2.7 and later\n     * (2.6 and earlier relied on GMT)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "signature": "int PROBE_START_LINE_110",
        "snippet": "int PROBE_START_LINE_110 = 117;\n\nprotected static final java.util.TimeZone f_default_timezone_5996_line_117 = DEFAULT_TIMEZONE;",
        "begin_line": 151,
        "end_line": 153,
        "comment": "    \n     * A singleton instance can be used for cloning purposes, as a blueprint of sorts.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "signature": "int PROBE_END_LINE_110",
        "snippet": "int PROBE_END_LINE_110 = 117;\n\n/**\n* Blueprint \"Calendar\" instance for use during formatting. Cannot be used as is,\n* due to thread-safety issues, but can be used for constructing actual instances\n* more cheaply by cloning.\n*\n* @since 2.9.1\n*/\nprotected static final Calendar CALENDAR = new GregorianCalendar(f_default_timezone_5996_line_117, f_default_locale_5997_line_117);",
        "begin_line": 157,
        "end_line": 166,
        "comment": "    \n     * A singleton instance can be used for cloning purposes, as a blueprint of sorts.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
        "signature": "int PROBE_START_LINE_189",
        "snippet": "int PROBE_START_LINE_189 = 191;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMember v_m_3837_line_189 = m;",
        "begin_line": 200,
        "end_line": 201,
        "comment": "    \n     * Method used to find accessor (getter, field to access) to use for accessing\n     * value of the property.\n     * Null if no such member exists.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
        "signature": "boolean bean_property_definition1_expr3_line_189",
        "snippet": "boolean bean_property_definition1_expr3_line_189 = v_m_3837_line_189 == null;\nint PROBE_END_LINE_189 = 191;",
        "begin_line": 202,
        "end_line": 203,
        "comment": "    \n     * Method used to find accessor (getter, field to access) to use for accessing\n     * value of the property.\n     * Null if no such member exists.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
        "signature": "int PROBE_START_LINE_192",
        "snippet": "int PROBE_START_LINE_192 = 192;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMember v_m_3837_line_192 = m;",
        "begin_line": 207,
        "end_line": 208,
        "comment": "    \n     * Method used to find accessor (getter, field to access) to use for accessing\n     * value of the property.\n     * Null if no such member exists.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
        "signature": "int PROBE_START_LINE_201",
        "snippet": "int PROBE_START_LINE_201 = 201;\nAnnotatedMember bean_property_definition1_expr4_line_201 = getConstructorParameter();",
        "begin_line": 219,
        "end_line": 220,
        "comment": "    \n     * Method used to find mutator (constructor parameter, setter, field) to use for\n     * changing value of the property.\n     * Null if no such member exists.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "signature": "int PROBE_START_LINE_40",
        "snippet": "int PROBE_START_LINE_40 = 40;\nClass<? extends Number> p_raw_type_5080_line_40 = rawType;",
        "begin_line": 39,
        "end_line": 40,
        "comment": "    \n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "signature": "boolean number_serializer1_expr6_line_40",
        "snippet": "boolean number_serializer1_expr6_line_40 = p_raw_type_5080_line_40 == BigInteger.class;\nboolean number_serializer1_expr5_line_40 = (number_serializer1_expr6_line_40);",
        "begin_line": 41,
        "end_line": 42,
        "comment": "    \n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_80",
        "snippet": "int PROBE_START_LINE_80 = 80;\ncom.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type p_t_1_line_80 = t;",
        "begin_line": 80,
        "end_line": 81,
        "comment": "            \n             * Reference property that Jackson manages by suppressing it during serialization,\n             * and reconstructing during deserialization.\n             * Usually this can be defined by using\n             * {@link com.fasterxml.jackson.annotation.JsonBackReference}\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
        "signature": "int PROBE_END_LINE_80",
        "snippet": "int PROBE_END_LINE_80 = 80;\n_type = p_t_1_line_80;",
        "begin_line": 82,
        "end_line": 83,
        "comment": "            \n             * Reference property that Jackson manages by suppressing it during serialization,\n             * and reconstructing during deserialization.\n             * Usually this can be defined by using\n             * {@link com.fasterxml.jackson.annotation.JsonBackReference}\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_81",
        "snippet": "int PROBE_START_LINE_81 = 81;\nString p_n_2_line_81 = n;",
        "begin_line": 84,
        "end_line": 85,
        "comment": "            \n             * Reference property that Jackson manages by suppressing it during serialization,\n             * and reconstructing during deserialization.\n             * Usually this can be defined by using\n             * {@link com.fasterxml.jackson.annotation.JsonBackReference}\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "signature": "int PROBE_START_LINE_115",
        "snippet": "int PROBE_START_LINE_115 = 115;\nint serialization_config1_expr3_line_115 = collectFeatureDefaults(SerializationFeature.class);",
        "begin_line": 116,
        "end_line": 117,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "signature": "int PROBE_END_LINE_115",
        "snippet": "int PROBE_END_LINE_115 = 115;\n_serFeatures = serialization_config1_expr3_line_115;",
        "begin_line": 118,
        "end_line": 119,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "signature": "int PROBE_START_LINE_117",
        "snippet": "int PROBE_START_LINE_117 = 117;\ncom.fasterxml.jackson.core.PrettyPrinter f_default_pretty_printer_1023_line_117 = DEFAULT_PRETTY_PRINTER;",
        "begin_line": 121,
        "end_line": 122,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "signature": "int PROBE_START_LINE_180",
        "snippet": "int PROBE_START_LINE_180 = 180;\ncom.fasterxml.jackson.databind.SerializationConfig p_src_1049_line_180 = src;",
        "begin_line": 187,
        "end_line": 188,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.JdkDeserializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
        "signature": "int PROBE_START_LINE_25",
        "snippet": "int PROBE_START_LINE_25 = 25;\nClass<?>[] v_types_2841_line_25 = types;",
        "begin_line": 26,
        "end_line": 27,
        "comment": "         note: can skip primitive types; other ways to check them:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.JdkDeserializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
        "signature": "String jdk_deserializers1_expr4_line_25",
        "snippet": "String jdk_deserializers1_expr4_line_25 = v_cls_2842_line_25.getName();\nint PROBE_END_LINE_25 = 25;",
        "begin_line": 30,
        "end_line": 31,
        "comment": "         note: can skip primitive types; other ways to check them:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "signature": "int PROBE_START_LINE_490",
        "snippet": "int PROBE_START_LINE_490 = 490;\nboolean p_default_state_448_line_490 = defaultState;",
        "begin_line": 490,
        "end_line": 491,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "signature": "int PROBE_END_LINE_490",
        "snippet": "int PROBE_END_LINE_490 = 490;\n_defaultState = p_default_state_448_line_490;",
        "begin_line": 492,
        "end_line": 493,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "signature": "int PROBE_START_LINE_491",
        "snippet": "int PROBE_START_LINE_491 = 491;\nint deserialization_feature1_expr3_line_491 = ordinal();",
        "begin_line": 494,
        "end_line": 495,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "signature": "int PROBE_END_LINE_491",
        "snippet": "int PROBE_END_LINE_491 = 491;\n_mask = deserialization_feature1_expr1_line_491;",
        "begin_line": 498,
        "end_line": 499,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_97",
        "snippet": "int PROBE_START_LINE_97 = 97;\ncom.fasterxml.jackson.databind.introspect.POJOPropertiesCollector p_coll_3725_line_97 = coll;",
        "begin_line": 105,
        "end_line": 106,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_100",
        "snippet": "int PROBE_START_LINE_100 = 104;\nMapperConfig<?> f__config_3729_line_100 = _config;",
        "begin_line": 114,
        "end_line": 115,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "boolean basic_bean_description1_expr4_line_100",
        "snippet": "boolean basic_bean_description1_expr4_line_100 = f__config_3729_line_100 == null;\nint PROBE_END_LINE_100 = 104;",
        "begin_line": 116,
        "end_line": 117,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_103",
        "snippet": "int PROBE_START_LINE_103 = 103;\nMapperConfig<?> f__config_3729_line_103 = _config;",
        "begin_line": 122,
        "end_line": 123,
        "comment": "\t\t NOTE: null config only for some pre-constructed types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_END_LINE_103",
        "snippet": "int PROBE_END_LINE_103 = 103;\n_annotationIntrospector = basic_bean_description1_expr5_line_103;",
        "begin_line": 126,
        "end_line": 127,
        "comment": "\t\t NOTE: null config only for some pre-constructed types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_105",
        "snippet": "int PROBE_START_LINE_105 = 105;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass p_class_def_3727_line_105 = classDef;",
        "begin_line": 129,
        "end_line": 130,
        "comment": "\t\t NOTE: null config only for some pre-constructed types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_END_LINE_105",
        "snippet": "int PROBE_END_LINE_105 = 105;\n_classInfo = p_class_def_3727_line_105;",
        "begin_line": 131,
        "end_line": 132,
        "comment": "\t\t NOTE: null config only for some pre-constructed types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_124",
        "snippet": "int PROBE_START_LINE_124 = 124;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass p_class_def_3734_line_124 = classDef;",
        "begin_line": 163,
        "end_line": 164,
        "comment": "\t\t NOTE: null config only for some pre-constructed types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_END_LINE_124",
        "snippet": "int PROBE_END_LINE_124 = 124;\n_classInfo = p_class_def_3734_line_124;",
        "begin_line": 165,
        "end_line": 166,
        "comment": "\t\t NOTE: null config only for some pre-constructed types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_166",
        "snippet": "int PROBE_START_LINE_166 = 166;\nList<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> f__properties_3736_line_166 = _properties;",
        "begin_line": 232,
        "end_line": 233,
        "comment": "    \n     * Factory method to use for constructing an instance to use for purposes\n     * other than building serializers or deserializers; will only have information\n     * on class, not on properties.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_END_LINE_166",
        "snippet": "int PROBE_END_LINE_166 = 166;\nreturn f__properties_3736_line_166;",
        "begin_line": 234,
        "end_line": 235,
        "comment": "    \n     * Factory method to use for constructing an instance to use for purposes\n     * other than building serializers or deserializers; will only have information\n     * on class, not on properties.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_END_LINE_239",
        "snippet": "int PROBE_END_LINE_239 = 239;\nreturn basic_bean_description1_expr18_line_239;",
        "begin_line": 316,
        "end_line": 317,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_292",
        "snippet": "int PROBE_START_LINE_292 = 292;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass f__class_info_3731_line_292 = _classInfo;",
        "begin_line": 389,
        "end_line": 390,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_298",
        "snippet": "int PROBE_START_LINE_298 = 327;\ncom.fasterxml.jackson.databind.introspect.POJOPropertiesCollector f__prop_collector_3728_line_298 = _propCollector;",
        "begin_line": 400,
        "end_line": 401,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "boolean basic_bean_description1_expr27_line_298",
        "snippet": "boolean basic_bean_description1_expr27_line_298 = f__prop_collector_3728_line_298 != null;\nint PROBE_END_LINE_298 = 327;",
        "begin_line": 402,
        "end_line": 403,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "boolean basic_bean_description1_expr29_line_300",
        "snippet": "boolean basic_bean_description1_expr29_line_300 = v_any_method_3750_line_300 != null;\nint PROBE_END_LINE_300 = 314;",
        "begin_line": 413,
        "end_line": 414,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_391",
        "snippet": "int PROBE_START_LINE_391 = 391;\ncom.fasterxml.jackson.databind.AnnotationIntrospector f__annotation_introspector_3730_line_391 = _annotationIntrospector;",
        "begin_line": 533,
        "end_line": 534,
        "comment": "           defaults having higher precedence, so start with that"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_END_LINE_391",
        "snippet": "int PROBE_END_LINE_391 = 391;\nJsonFormat.Value v = basic_bean_description1_expr36_line_391;",
        "begin_line": 538,
        "end_line": 539,
        "comment": "           defaults having higher precedence, so start with that"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_392",
        "snippet": "int PROBE_START_LINE_392 = 398;\ncom.fasterxml.jackson.annotation.JsonFormat.Value v_v_3756_line_392 = v;",
        "begin_line": 540,
        "end_line": 541,
        "comment": "           defaults having higher precedence, so start with that"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/PropertyMetadata.java",
        "signature": "int PROBE_START_LINE_19",
        "snippet": "int PROBE_START_LINE_19 = 20;\n\npublic static final Boolean f_true_966_line_19 = Boolean.TRUE;",
        "begin_line": 19,
        "end_line": 21,
        "comment": "\n * Simple container class used for storing \"additional\" metadata about\n * properties. Carved out to reduce number of distinct properties that\n * actual property implementations and place holders need to store;\n * since instances are immutable, they can be freely shared.\n * \n * @since 2.3\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/PropertyMetadata.java",
        "signature": "int PROBE_END_LINE_19",
        "snippet": "int PROBE_END_LINE_19 = 20;\n\npublic final static PropertyMetadata STD_REQUIRED = new PropertyMetadata(f_true_966_line_19,\nnull, null, null, null, null, null);",
        "begin_line": 23,
        "end_line": 26,
        "comment": "\n * Simple container class used for storing \"additional\" metadata about\n * properties. Carved out to reduce number of distinct properties that\n * actual property implementations and place holders need to store;\n * since instances are immutable, they can be freely shared.\n * \n * @since 2.3\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_153",
        "snippet": "int PROBE_START_LINE_153 = 153;\ncom.fasterxml.jackson.databind.PropertyName f__name_4229_line_153 = _name;",
        "begin_line": 177,
        "end_line": 178,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_177",
        "snippet": "int PROBE_START_LINE_177 = 178;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMember v_member_4237_line_177 = member;",
        "begin_line": 219,
        "end_line": 220,
        "comment": "\t\t/* 13-Mar-2013, tatu: Accessing via primary member SHOULD work,\n         *   due to annotation merging. However, I have seen some problems\n         *   with this access (for other annotations)... so if this should\n         *   occur, try commenting out full traversal code\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean pojoproperty_builder1_expr12_line_177",
        "snippet": "boolean pojoproperty_builder1_expr12_line_177 = v_member_4237_line_177 == null;\nboolean pojoproperty_builder1_expr13_line_177 = false;",
        "begin_line": 221,
        "end_line": 222,
        "comment": "\t\t/* 13-Mar-2013, tatu: Accessing via primary member SHOULD work,\n         *   due to annotation merging. However, I have seen some problems\n         *   with this access (for other annotations)... so if this should\n         *   occur, try commenting out full traversal code\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean pojoproperty_builder1_expr9_line_177",
        "snippet": "boolean pojoproperty_builder1_expr9_line_177 = (pojoproperty_builder1_expr11_line_177);\ncom.fasterxml.jackson.databind.PropertyName pojoproperty_builder1_expr8_line_177 = pojoproperty_builder1_expr9_line_177\n? null\n: _annotationIntrospector.findWrapperName(member);",
        "begin_line": 229,
        "end_line": 232,
        "comment": "\t\t/* 13-Mar-2013, tatu: Accessing via primary member SHOULD work,\n         *   due to annotation merging. However, I have seen some problems\n         *   with this access (for other annotations)... so if this should\n         *   occur, try commenting out full traversal code\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_177",
        "snippet": "int PROBE_END_LINE_177 = 178;\nreturn pojoproperty_builder1_expr8_line_177;",
        "begin_line": 233,
        "end_line": 234,
        "comment": "\t\t/* 13-Mar-2013, tatu: Accessing via primary member SHOULD work,\n         *   due to annotation merging. However, I have seen some problems\n         *   with this access (for other annotations)... so if this should\n         *   occur, try commenting out full traversal code\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_219",
        "snippet": "int PROBE_START_LINE_219 = 233;\ncom.fasterxml.jackson.databind.PropertyMetadata f__metadata_4238_line_219 = _metadata;",
        "begin_line": 275,
        "end_line": 276,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean pojoproperty_builder1_expr14_line_219",
        "snippet": "boolean pojoproperty_builder1_expr14_line_219 = f__metadata_4238_line_219 == null;\nint PROBE_END_LINE_219 = 233;",
        "begin_line": 277,
        "end_line": 278,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_221",
        "snippet": "int PROBE_START_LINE_221 = 221;\nString pojoproperty_builder1_expr16_line_221 = _findDescription();",
        "begin_line": 284,
        "end_line": 285,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_221",
        "snippet": "int PROBE_END_LINE_221 = 221;\nfinal String desc = pojoproperty_builder1_expr16_line_221;",
        "begin_line": 286,
        "end_line": 287,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_224",
        "snippet": "int PROBE_START_LINE_224 = 229;\nBoolean v_b_4239_line_224 = b;",
        "begin_line": 296,
        "end_line": 297,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean pojoproperty_builder1_expr21_line_224",
        "snippet": "boolean pojoproperty_builder1_expr21_line_224 = v_b_4239_line_224 == null;\nboolean pojoproperty_builder1_expr22_line_224 = true;",
        "begin_line": 298,
        "end_line": 299,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "Integer v_idx_4241_line_224",
        "snippet": "Integer v_idx_4241_line_224 = idx;\npojoproperty_builder1_expr22_line_224 = v_idx_4241_line_224 == null;",
        "begin_line": 301,
        "end_line": 302,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean pojoproperty_builder1_expr23_line_224",
        "snippet": "boolean pojoproperty_builder1_expr23_line_224 = true;\nif (pojoproperty_builder1_expr20_line_224) {\nString v_def_4242_line_224 = def;",
        "begin_line": 306,
        "end_line": 308,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_224",
        "snippet": "int PROBE_END_LINE_224 = 229;\nif (pojoproperty_builder1_expr19_line_224) {\nint PROBE_START_LINE_225 = 226;",
        "begin_line": 313,
        "end_line": 315,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_231",
        "snippet": "int PROBE_START_LINE_231 = 231;\ncom.fasterxml.jackson.databind.PropertyMetadata f__metadata_4238_line_231 = _metadata;",
        "begin_line": 336,
        "end_line": 337,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_231",
        "snippet": "int PROBE_END_LINE_231 = 231;\n_metadata = pojoproperty_builder1_expr29_line_231;",
        "begin_line": 340,
        "end_line": 341,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean needMerge",
        "snippet": "boolean needMerge = true;\nNulls valueNulls = null;",
        "begin_line": 357,
        "end_line": 358,
        "comment": "    \n     * Helper method that contains logic for accessing and merging all setter\n     * information that we needed, regarding things like possible merging\n     * of property value, and handling of incoming nulls.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "AnnotatedMember acc",
        "snippet": "AnnotatedMember acc = pojoproperty_builder1_expr32_line_251;\n\nint PROBE_START_LINE_253 = 295;",
        "begin_line": 370,
        "end_line": 372,
        "comment": "         (mutator); but accessor is needed for actual merge operation. So:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_255",
        "snippet": "int PROBE_START_LINE_255 = 270;\ncom.fasterxml.jackson.databind.AnnotationIntrospector f__annotation_introspector_4227_line_255 = _annotationIntrospector;",
        "begin_line": 377,
        "end_line": 378,
        "comment": "         (mutator); but accessor is needed for actual merge operation. So:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_257",
        "snippet": "int PROBE_END_LINE_257 = 257;\nBoolean b = pojoproperty_builder1_expr36_line_257;",
        "begin_line": 393,
        "end_line": 394,
        "comment": "\t\t\t Ok, first: does property itself have something to say?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean pojoproperty_builder1_expr37_line_258",
        "snippet": "boolean pojoproperty_builder1_expr37_line_258 = v_b_4249_line_258 != null;\nint PROBE_END_LINE_258 = 263;",
        "begin_line": 397,
        "end_line": 398,
        "comment": "\t\t\t Ok, first: does property itself have something to say?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_273",
        "snippet": "int PROBE_END_LINE_273 = 294;\n// If not, config override?\n// 25-Oct-2016, tatu: Either this, or type of accessor...\nif (pojoproperty_builder1_expr42_line_273) {\nint PROBE_START_LINE_274 = 274;",
        "begin_line": 448,
        "end_line": 452,
        "comment": "\t\t\t Ok, first: does property itself have something to say?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_299",
        "snippet": "int PROBE_START_LINE_299 = 299;\ncom.fasterxml.jackson.annotation.JsonSetter.Value v_setter_info_4255_line_299 = setterInfo;",
        "begin_line": 538,
        "end_line": 539,
        "comment": "             25-Oct-2016, tatu: Either this, or type of accessor..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_304",
        "snippet": "int PROBE_END_LINE_304 = 309;\nif (v_need_merge_4244_line_304) {\nint PROBE_START_LINE_305 = 305;",
        "begin_line": 559,
        "end_line": 561,
        "comment": "             25-Oct-2016, tatu: Either this, or type of accessor..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "Boolean f_true_966_line_306",
        "snippet": "Boolean f_true_966_line_306 = Boolean.TRUE;\nBoolean v_b_4256_line_306 = b;",
        "begin_line": 567,
        "end_line": 568,
        "comment": "             25-Oct-2016, tatu: Either this, or type of accessor..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean pojoproperty_builder1_expr70_line_306",
        "snippet": "boolean pojoproperty_builder1_expr70_line_306 = v_acc_4248_line_306 != null;\npojoproperty_builder1_expr69_line_306 = (pojoproperty_builder1_expr70_line_306);",
        "begin_line": 573,
        "end_line": 574,
        "comment": "             25-Oct-2016, tatu: Either this, or type of accessor..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_324",
        "snippet": "int PROBE_START_LINE_324 = 335;\nboolean f__for_serialization_4230_line_324 = _forSerialization;",
        "begin_line": 613,
        "end_line": 614,
        "comment": "    \n     * Type determined from the primary member for the property being built,\n     * considering precedence according to whether we are processing serialization\n     * or deserialization.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_336",
        "snippet": "int PROBE_END_LINE_336 = 336;\nAnnotatedMember m = pojoproperty_builder1_expr76_line_336;",
        "begin_line": 630,
        "end_line": 631,
        "comment": "                     09-Feb-2017, tatu: Not sure if this or `null` but..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_337",
        "snippet": "int PROBE_START_LINE_337 = 345;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMember v_m_4257_line_337 = m;",
        "begin_line": 632,
        "end_line": 633,
        "comment": "                     09-Feb-2017, tatu: Not sure if this or `null` but..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_338",
        "snippet": "int PROBE_START_LINE_338 = 338;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMethod pojoproperty_builder1_expr78_line_338 = getSetter();",
        "begin_line": 637,
        "end_line": 638,
        "comment": "                     09-Feb-2017, tatu: Not sure if this or `null` but..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_358",
        "snippet": "int PROBE_START_LINE_358 = 358;\ncom.fasterxml.jackson.databind.JavaType pojoproperty_builder1_expr85_line_358 = getPrimaryType();",
        "begin_line": 670,
        "end_line": 671,
        "comment": "         for setterless properties, however, can further try getter"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_358",
        "snippet": "int PROBE_END_LINE_358 = 358;\nreturn pojoproperty_builder1_expr84_line_358;",
        "begin_line": 673,
        "end_line": 674,
        "comment": "         for setterless properties, however, can further try getter"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean pojoproperty_builder1_expr86_line_371",
        "snippet": "boolean pojoproperty_builder1_expr86_line_371 = f__setters_4258_line_371 != null;\nint PROBE_END_LINE_371 = 371;",
        "begin_line": 689,
        "end_line": 690,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_393",
        "snippet": "int PROBE_START_LINE_393 = 393;\nLinked<AnnotatedMethod> f__getters_4261_line_393 = _getters;",
        "begin_line": 716,
        "end_line": 717,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_397",
        "snippet": "int PROBE_START_LINE_397 = 397;\ncom.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedMethod> v_curr_4260_line_397 = curr;",
        "begin_line": 728,
        "end_line": 729,
        "comment": "\t\t Easy with zero or one getters..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "Linked<AnnotatedMethod> f_next_4263_line_397",
        "snippet": "Linked<AnnotatedMethod> f_next_4263_line_397 = v_curr_4260_line_397.next;\nint PROBE_END_LINE_397 = 397;",
        "begin_line": 730,
        "end_line": 731,
        "comment": "\t\t Easy with zero or one getters..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_399",
        "snippet": "int PROBE_START_LINE_399 = 399;\ncom.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedMethod> v_curr_4260_line_399 = curr;",
        "begin_line": 738,
        "end_line": 739,
        "comment": "\t\t Easy with zero or one getters..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_399",
        "snippet": "int PROBE_END_LINE_399 = 399;\nreturn f_value_4264_line_399;",
        "begin_line": 741,
        "end_line": 742,
        "comment": "\t\t Easy with zero or one getters..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_448",
        "snippet": "int PROBE_START_LINE_448 = 448;\ncom.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedMethod> v_curr_4265_line_448 = curr;",
        "begin_line": 798,
        "end_line": 799,
        "comment": "\t\t Easy with zero or one getters..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "AnnotatedMethod nextM",
        "snippet": "AnnotatedMethod nextM = next.value;\nAnnotatedMethod currM = curr.value;",
        "begin_line": 828,
        "end_line": 829,
        "comment": "             Allow masking, i.e. do not fail if one is in super-class from the other"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "AnnotatedField field",
        "snippet": "AnnotatedField field = _fields.value;\nLinked<AnnotatedField> next = _fields.next;",
        "begin_line": 875,
        "end_line": 876,
        "comment": "         If multiple, verify that they do not conflict..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_537",
        "snippet": "int PROBE_START_LINE_537 = 539;\ncom.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked<com.fasterxml.jackson.databind.introspect.AnnotatedParameter> f__ctor_parameters_4259_line_537 = _ctorParameters;",
        "begin_line": 899,
        "end_line": 900,
        "comment": "         If multiple, verify that they do not conflict..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean pojoproperty_builder1_expr92_line_537",
        "snippet": "boolean pojoproperty_builder1_expr92_line_537 = f__ctor_parameters_4259_line_537 == null;\nint PROBE_END_LINE_537 = 539;",
        "begin_line": 901,
        "end_line": 902,
        "comment": "         If multiple, verify that they do not conflict..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_561",
        "snippet": "int PROBE_END_LINE_561 = 561;\nreturn pojoproperty_builder1_expr94_line_561;",
        "begin_line": 934,
        "end_line": 935,
        "comment": "        /* Hmmh. Checking for constructor parameters is trickier; for one,\n         * we must allow creator and factory method annotations.\n         * If this is the case, constructor parameter has the precedence.\n         * \n         * So, for now, just try finding the first constructor parameter;\n         * if none, first factory method. And don't check for dups, if we must,\n         * can start checking for them later on.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_568",
        "snippet": "int PROBE_START_LINE_568 = 570;\nboolean f__for_serialization_4230_line_568 = _forSerialization;",
        "begin_line": 942,
        "end_line": 943,
        "comment": "        /* Hmmh. Checking for constructor parameters is trickier; for one,\n         * we must allow creator and factory method annotations.\n         * If this is the case, constructor parameter has the precedence.\n         * \n         * So, for now, just try finding the first constructor parameter;\n         * if none, first factory method. And don't check for dups, if we must,\n         * can start checking for them later on.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_568",
        "snippet": "int PROBE_END_LINE_568 = 570;\nif (f__for_serialization_4230_line_568) {\nreturn getAccessor();",
        "begin_line": 944,
        "end_line": 946,
        "comment": "        /* Hmmh. Checking for constructor parameters is trickier; for one,\n         * we must allow creator and factory method annotations.\n         * If this is the case, constructor parameter has the precedence.\n         * \n         * So, for now, just try finding the first constructor parameter;\n         * if none, first factory method. And don't check for dups, if we must,\n         * can start checking for them later on.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "final String name",
        "snippet": "final String name = m.getName();\nif (name.startsWith(\"set\") && name.length() > 3) {\n// should we check capitalization?\nreturn 1;",
        "begin_line": 982,
        "end_line": 985,
        "comment": "             should we check capitalization?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_623",
        "snippet": "int PROBE_END_LINE_623 = 623;\n// 30-Mar-2017, tatu: Access lazily but retain information since it needs\n//   to be accessed multiple times during processing.\nAnnotationIntrospector.ReferenceProperty result = f__reference_info_4272_line_623;",
        "begin_line": 1017,
        "end_line": 1020,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_624",
        "snippet": "int PROBE_START_LINE_624 = 629;\ncom.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty v_result_4271_line_624 = result;",
        "begin_line": 1021,
        "end_line": 1022,
        "comment": "           to be accessed multiple times during processing."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean pojoproperty_builder1_expr100_line_624",
        "snippet": "boolean pojoproperty_builder1_expr100_line_624 = v_result_4271_line_624 != null;\nint PROBE_END_LINE_624 = 629;",
        "begin_line": 1023,
        "end_line": 1024,
        "comment": "           to be accessed multiple times during processing."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_661",
        "snippet": "int PROBE_START_LINE_661 = 666;\nString pojoproperty_builder1_expr111_line_661 = fromMemberAnnotations(new WithMember<String>() {\n@Override\npublic String withMember(AnnotatedMember member) {\ncom.fasterxml.jackson.databind.AnnotationIntrospector f__annotation_introspector_4227_line_664 = _annotationIntrospector;",
        "begin_line": 1097,
        "end_line": 1101,
        "comment": "           to be accessed multiple times during processing."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_661",
        "snippet": "int PROBE_END_LINE_661 = 666;\nreturn pojoproperty_builder1_expr111_line_661;",
        "begin_line": 1108,
        "end_line": 1109,
        "comment": "           to be accessed multiple times during processing."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_679",
        "snippet": "int PROBE_END_LINE_679 = 684;\nreturn pojoproperty_builder1_expr117_line_679;",
        "begin_line": 1140,
        "end_line": 1141,
        "comment": "           to be accessed multiple times during processing."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_689",
        "snippet": "int PROBE_START_LINE_689 = 698;\ncom.fasterxml.jackson.databind.introspect.ObjectIdInfo pojoproperty_builder1_expr120_line_689 = fromMemberAnnotations(\nnew WithMember<ObjectIdInfo>() {\n@Override\npublic ObjectIdInfo withMember(AnnotatedMember member) {\ncom.fasterxml.jackson.databind.AnnotationIntrospector f__annotation_introspector_4227_line_692 = _annotationIntrospector;",
        "begin_line": 1146,
        "end_line": 1151,
        "comment": "           to be accessed multiple times during processing."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean pojoproperty_builder1_expr123_line_693",
        "snippet": "boolean pojoproperty_builder1_expr123_line_693 = v_info_4280_line_693 != null;\nif (pojoproperty_builder1_expr123_line_693) {\ninfo = _annotationIntrospector.findObjectReferenceInfo(member, info);",
        "begin_line": 1157,
        "end_line": 1159,
        "comment": "           to be accessed multiple times during processing."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_714",
        "snippet": "int PROBE_END_LINE_714 = 719;\nreturn pojoproperty_builder1_expr124_line_714;",
        "begin_line": 1194,
        "end_line": 1195,
        "comment": "            is available here"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean p_expl_name_4285_line_729",
        "snippet": "boolean p_expl_name_4285_line_729 = explName;\nboolean p_visible_4286_line_729 = visible;",
        "begin_line": 1209,
        "end_line": 1210,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_795",
        "snippet": "int PROBE_END_LINE_795 = 795;\n/* 07-Jun-2015, tatu: With 2.6, we will allow optional definition\n*  of explicit access type for property; if not \"AUTO\", it will\n*  dictate how visibility checks are applied.\n*/\nJsonProperty.Access acc = pojoproperty_builder1_expr130_line_795;",
        "begin_line": 1293,
        "end_line": 1298,
        "comment": "    \n     * @param inferMutators Whether mutators can be \"pulled in\" by visible\n     *    accessors or not. \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_796",
        "snippet": "int PROBE_START_LINE_796 = 798;\ncom.fasterxml.jackson.annotation.JsonProperty.Access v_acc_4308_line_796 = acc;",
        "begin_line": 1299,
        "end_line": 1300,
        "comment": "\t\t/* 07-Jun-2015, tatu: With 2.6, we will allow optional definition\n         *  of explicit access type for property; if not \"AUTO\", it will\n         *  dictate how visibility checks are applied.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_START_LINE_799",
        "snippet": "int PROBE_START_LINE_799 = 827;\ncom.fasterxml.jackson.annotation.JsonProperty.Access v_acc_4308_line_799 = acc;",
        "begin_line": 1309,
        "end_line": 1310,
        "comment": "\t\t/* 07-Jun-2015, tatu: With 2.6, we will allow optional definition\n         *  of explicit access type for property; if not \"AUTO\", it will\n         *  dictate how visibility checks are applied.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_799",
        "snippet": "int PROBE_END_LINE_799 = 827;\nswitch (v_acc_4308_line_799) {\ncase READ_ONLY:\n// Remove setters, creators for sure, but fields too if deserializing\n_setters = null;",
        "begin_line": 1311,
        "end_line": 1315,
        "comment": "\t\t/* 07-Jun-2015, tatu: With 2.6, we will allow optional definition\n         *  of explicit access type for property; if not \"AUTO\", it will\n         *  dictate how visibility checks are applied.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "int PROBE_END_LINE_820",
        "snippet": "int PROBE_END_LINE_820 = 820;\n_getters = pojoproperty_builder1_expr132_line_820;",
        "begin_line": 1337,
        "end_line": 1338,
        "comment": "             remove getters, definitely, but also fields if serializing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "signature": "boolean pojoproperty_builder1_expr137_line_823",
        "snippet": "boolean pojoproperty_builder1_expr137_line_823 = f__getters_4261_line_823 == null;\npojoproperty_builder1_expr136_line_823 = (pojoproperty_builder1_expr137_line_823);",
        "begin_line": 1352,
        "end_line": 1353,
        "comment": "             remove getters, definitely, but also fields if serializing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
        "signature": "int PROBE_END_LINE_54",
        "snippet": "int PROBE_END_LINE_54 = 54;\nreturn as_property_type_deserializer1_expr2_line_54;",
        "begin_line": 69,
        "end_line": 70,
        "comment": "    \n     * @since 2.8\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
        "signature": "Object typeId",
        "snippet": "Object typeId = p.getTypeId();\nif (typeId != null) {\nreturn _deserializeWithNativeTypeId(p, ctxt, typeId);",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\t\t 02-Aug-2013, tatu: May need to use native type ids"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
        "signature": "int PROBE_START_LINE_77",
        "snippet": "int PROBE_START_LINE_77 = 77;\ncom.fasterxml.jackson.core.JsonParser p_p_4536_line_77 = p;",
        "begin_line": 96,
        "end_line": 97,
        "comment": "\t\t 02-Aug-2013, tatu: May need to use native type ids"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
        "signature": "int PROBE_END_LINE_79",
        "snippet": "int PROBE_END_LINE_79 = 79;\nt = as_property_type_deserializer1_expr11_line_79;",
        "begin_line": 112,
        "end_line": 113,
        "comment": "\t\t but first, sanity check to ensure we have START_OBJECT or FIELD_NAME"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
        "signature": "TokenBuffer tb",
        "snippet": "TokenBuffer tb = null;\n\nfor (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\nint PROBE_START_LINE_94 = 94;",
        "begin_line": 125,
        "end_line": 128,
        "comment": "         Ok, let's try to find the property. But first, need token buffer..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "signature": "int PROBE_START_LINE_35",
        "snippet": "int PROBE_START_LINE_35 = 35;\nint p_initial_entries_5968_line_35 = initialEntries;",
        "begin_line": 34,
        "end_line": 35,
        "comment": "\n * Helper for simple bounded maps used for reusing lookup values.\n *<p>\n * Note that serialization behavior is such that contents are NOT serialized,\n * on assumption that all use cases are for caching where persistence\n * does not make sense. The only thing serialized is the cache size of Map.\n *<p>\n * NOTE: since version 2.4.2, this is <b>NOT</b> an LRU-based at all; reason\n * being that it is not possible to use JDK components that do LRU _AND_ perform\n * well wrt synchronization on multi-core systems. So we choose efficient synchronization\n * over potentially more efficient handling of entries.\n *<p>\n * And yes, there are efficient LRU implementations such as\n * <a href=\"https:code.google.com/p/concurrentlinkedhashmap/\">concurrentlinkedhashmap</a>;\n * but at this point we really try to keep external deps to minimum. But perhaps\n * a shaded variant may be used one day.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "signature": "int PROBE_END_LINE_35",
        "snippet": "int PROBE_END_LINE_35 = 35;\n// We'll use concurrency level of 4, seems reasonable\n_map = new ConcurrentHashMap<K,V>(p_initial_entries_5968_line_35, 0.8f, 4);",
        "begin_line": 36,
        "end_line": 38,
        "comment": "\n * Helper for simple bounded maps used for reusing lookup values.\n *<p>\n * Note that serialization behavior is such that contents are NOT serialized,\n * on assumption that all use cases are for caching where persistence\n * does not make sense. The only thing serialized is the cache size of Map.\n *<p>\n * NOTE: since version 2.4.2, this is <b>NOT</b> an LRU-based at all; reason\n * being that it is not possible to use JDK components that do LRU _AND_ perform\n * well wrt synchronization on multi-core systems. So we choose efficient synchronization\n * over potentially more efficient handling of entries.\n *<p>\n * And yes, there are efficient LRU implementations such as\n * <a href=\"https:code.google.com/p/concurrentlinkedhashmap/\">concurrentlinkedhashmap</a>;\n * but at this point we really try to keep external deps to minimum. But perhaps\n * a shaded variant may be used one day.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "signature": "int PROBE_START_LINE_36",
        "snippet": "int PROBE_START_LINE_36 = 36;\nint p_max_entries_5969_line_36 = maxEntries;",
        "begin_line": 39,
        "end_line": 40,
        "comment": "\t\t We'll use concurrency level of 4, seems reasonable"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "signature": "int lrumap1_expr5_line_40",
        "snippet": "int lrumap1_expr5_line_40 = f__map_5970_line_40.size();\nint f__max_entries_5971_line_40 = _maxEntries;",
        "begin_line": 48,
        "end_line": 49,
        "comment": "\t\t We'll use concurrency level of 4, seems reasonable"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "signature": "V lrumap1_expr6_line_48",
        "snippet": "V lrumap1_expr6_line_48 = f__map_5970_line_48.put(p_key_5972_line_48, p_value_5973_line_48);\nint PROBE_END_LINE_48 = 48;",
        "begin_line": 64,
        "end_line": 65,
        "comment": "             double-locking, yes, but safe here; trying to avoid \"clear storms\""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
        "signature": "int PROBE_START_LINE_37",
        "snippet": "int PROBE_START_LINE_37 = 37;\ncom.fasterxml.jackson.databind.introspect.TypeResolutionContext p_ctxt_3550_line_37 = ctxt;",
        "begin_line": 37,
        "end_line": 38,
        "comment": "     no need to persist"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
        "signature": "int PROBE_END_LINE_37",
        "snippet": "int PROBE_END_LINE_37 = 37;\n_typeContext = p_ctxt_3550_line_37;",
        "begin_line": 39,
        "end_line": 40,
        "comment": "     no need to persist"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
        "signature": "boolean annotated_member1_expr2_line_85",
        "snippet": "boolean annotated_member1_expr2_line_85 = f__annotations_3552_line_85 == null;\nint PROBE_END_LINE_85 = 87;",
        "begin_line": 101,
        "end_line": 102,
        "comment": "    \n     * Accessor for {@link TypeResolutionContext} that is used for resolving\n     * full generic type of this member.\n     * \n     * @since 2.7\n     *\n     * @deprecated Since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.BeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/BeanDescription.java",
        "signature": "int PROBE_START_LINE_37",
        "snippet": "int PROBE_START_LINE_37 = 37;\ncom.fasterxml.jackson.databind.JavaType p_type_124_line_37 = type;",
        "begin_line": 37,
        "end_line": 38,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.BeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/BeanDescription.java",
        "signature": "int PROBE_END_LINE_50",
        "snippet": "int PROBE_END_LINE_50 = 50;\nreturn f__type_125_line_50; }\n\npublic Class<?> getBeanClass() { int PROBE_START_LINE_52 = 52;",
        "begin_line": 55,
        "end_line": 58,
        "comment": "    \n     * Method for accessing declared type of bean being introspected,\n     * including full generic type information (from declaration)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/TypeWrappedDeserializer.java",
        "signature": "int PROBE_START_LINE_31",
        "snippet": "int PROBE_START_LINE_31 = 31;\ncom.fasterxml.jackson.databind.jsontype.TypeDeserializer p_type_deser_2729_line_31 = typeDeser;",
        "begin_line": 32,
        "end_line": 33,
        "comment": "\n * Simple deserializer that will call configured type deserializer, passing\n * in configured data deserializer, and exposing it all as a simple\n * deserializer.\n * This is necessary when there is no \"parent\" deserializer which could handle\n * details of calling a {@link TypeDeserializer}, most commonly used with\n * root values.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
        "signature": "int PROBE_START_LINE_45",
        "snippet": "int PROBE_START_LINE_45 = 45;\ncom.fasterxml.jackson.databind.PropertyMetadata p_md_3877_line_45 = md;",
        "begin_line": 46,
        "end_line": 47,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
        "signature": "boolean concrete_bean_property_base1_expr3_line_45",
        "snippet": "boolean concrete_bean_property_base1_expr3_line_45 = p_md_3877_line_45 == null;\nboolean concrete_bean_property_base1_expr2_line_45 = (concrete_bean_property_base1_expr3_line_45);",
        "begin_line": 48,
        "end_line": 49,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
        "signature": "int PROBE_END_LINE_45",
        "snippet": "int PROBE_END_LINE_45 = 45;\n_metadata = concrete_bean_property_base1_expr1_line_45;",
        "begin_line": 57,
        "end_line": 58,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
        "signature": "int PROBE_END_LINE_57",
        "snippet": "int PROBE_END_LINE_57 = 57;\nreturn f__metadata_3878_line_57; }\n\n@Override\npublic boolean isVirtual() { return false; }\n\n@Override\n@Deprecated\npublic final JsonFormat.Value findFormatOverrides(AnnotationIntrospector intr) {\nJsonFormat.Value f = null;",
        "begin_line": 80,
        "end_line": 89,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
        "signature": "AnnotatedMember member",
        "snippet": "AnnotatedMember member = getMember();\nif (member != null) {\nf = intr.findFormat(member);",
        "begin_line": 91,
        "end_line": 93,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/NullsConstantProvider.java",
        "signature": "int PROBE_START_LINE_26",
        "snippet": "int PROBE_START_LINE_26 = 26;\nObject p_nvl_2720_line_26 = nvl;",
        "begin_line": 26,
        "end_line": 27,
        "comment": "\n * Simple {@link NullValueProvider} that will always throw a\n * {@link InvalidNullException} when a null is encountered.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/NullsConstantProvider.java",
        "signature": "int PROBE_END_LINE_26",
        "snippet": "int PROBE_END_LINE_26 = 26;\n_nullValue = p_nvl_2720_line_26;",
        "begin_line": 28,
        "end_line": 29,
        "comment": "\n * Simple {@link NullValueProvider} that will always throw a\n * {@link InvalidNullException} when a null is encountered.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
        "signature": "int PROBE_START_LINE_43",
        "snippet": "int PROBE_START_LINE_43 = 43;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMethod p_method_2691_line_43 = method;",
        "begin_line": 46,
        "end_line": 47,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
        "signature": "int PROBE_START_LINE_44",
        "snippet": "int PROBE_START_LINE_44 = 44;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMethod p_method_2691_line_44 = method;",
        "begin_line": 50,
        "end_line": 51,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
        "signature": "int PROBE_END_LINE_44",
        "snippet": "int PROBE_END_LINE_44 = 44;\n_setter = method_property1_expr2_line_44;",
        "begin_line": 53,
        "end_line": 54,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
        "signature": "int PROBE_START_LINE_93",
        "snippet": "int PROBE_START_LINE_93 = 94;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMethod f__annotated_2692_line_93 = _annotated;",
        "begin_line": 128,
        "end_line": 129,
        "comment": "    \n     * Constructor used for JDK Serialization when reading persisted object\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
        "signature": "int PROBE_START_LINE_36",
        "snippet": "int PROBE_START_LINE_36 = 36;\ncom.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver p_overrides_4370_line_36 = overrides;",
        "begin_line": 36,
        "end_line": 37,
        "comment": "    \n     * Simple mix-in targets defined locally.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
        "signature": "int PROBE_START_LINE_92",
        "snippet": "int PROBE_START_LINE_92 = 92;\ncom.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver f__overrides_4371_line_92 = _overrides;",
        "begin_line": 95,
        "end_line": 96,
        "comment": "    \n     * Mutant factory method that constructs a new instance that has no locally\n     * defined mix-in/target mappings.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
        "signature": "int PROBE_START_LINE_19",
        "snippet": "int PROBE_START_LINE_19 = 19;\ncom.fasterxml.jackson.databind.AnnotationIntrospector p_intr_2581_line_19 = intr;",
        "begin_line": 20,
        "end_line": 21,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
        "signature": "int PROBE_END_LINE_19",
        "snippet": "int PROBE_END_LINE_19 = 19;\n_intr = p_intr_2581_line_19;",
        "begin_line": 22,
        "end_line": 23,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
        "signature": "int PROBE_START_LINE_21",
        "snippet": "int PROBE_START_LINE_21 = 21;\ncom.fasterxml.jackson.databind.deser.impl.CreatorCandidate.Param[] p_params_2583_line_21 = params;",
        "begin_line": 28,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
        "signature": "int PROBE_END_LINE_21",
        "snippet": "int PROBE_END_LINE_21 = 21;\n_params = p_params_2583_line_21;",
        "begin_line": 30,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
        "signature": "int PROBE_START_LINE_22",
        "snippet": "int PROBE_START_LINE_22 = 22;\nint p_count_2584_line_22 = count;",
        "begin_line": 32,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
        "signature": "int PROBE_END_LINE_22",
        "snippet": "int PROBE_END_LINE_22 = 22;\n_paramCount = p_count_2584_line_22;",
        "begin_line": 34,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
        "signature": "int PROBE_START_LINE_28",
        "snippet": "int PROBE_START_LINE_28 = 28;\ncom.fasterxml.jackson.databind.introspect.AnnotatedWithParams p_creator_2590_line_28 = creator;",
        "begin_line": 41,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
        "signature": "int p_i_2599_line_42",
        "snippet": "int p_i_2599_line_42 = i;\ncom.fasterxml.jackson.databind.deser.impl.CreatorCandidate.Param creator_candidate1_expr14_line_42 = f__params_2587_line_42[p_i_2599_line_42];",
        "begin_line": 103,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_START_LINE_30",
        "snippet": "int PROBE_START_LINE_30 = 30;\nHashMap<Class<?>, Object> v_sers_5144_line_30 = (HashMap<Class<?>, Object>) (sers);",
        "begin_line": 32,
        "end_line": 33,
        "comment": "    \n     * Method called by {@link BasicSerializerFactory} to access\n     * all serializers this class provides.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_30",
        "snippet": "int PROBE_END_LINE_30 = 30;\n// First things that 'toString()' can handle\nv_sers_5144_line_30.put(java.net.URL.class, new ToStringSerializer(java.net.URL.class));",
        "begin_line": 34,
        "end_line": 36,
        "comment": "    \n     * Method called by {@link BasicSerializerFactory} to access\n     * all serializers this class provides.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_31",
        "snippet": "int PROBE_END_LINE_31 = 31;\nv_sers_5144_line_31.put(java.net.URI.class, new ToStringSerializer(java.net.URI.class));",
        "begin_line": 39,
        "end_line": 40,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_33",
        "snippet": "int PROBE_END_LINE_33 = 33;\nv_sers_5144_line_33.put(Currency.class, new ToStringSerializer(Currency.class));",
        "begin_line": 44,
        "end_line": 45,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_34",
        "snippet": "int PROBE_END_LINE_34 = 34;\nv_sers_5144_line_34.put(UUID.class, new UUIDSerializer());",
        "begin_line": 48,
        "end_line": 49,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_START_LINE_36",
        "snippet": "int PROBE_START_LINE_36 = 36;\nHashMap<Class<?>, Object> v_sers_5144_line_36 = (HashMap<Class<?>, Object>) (sers);",
        "begin_line": 54,
        "end_line": 55,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_START_LINE_39",
        "snippet": "int PROBE_START_LINE_39 = 39;\nHashMap<Class<?>, Object> v_sers_5144_line_39 = (HashMap<Class<?>, Object>) (sers);",
        "begin_line": 59,
        "end_line": 60,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_39",
        "snippet": "int PROBE_END_LINE_39 = 39;\n// then atomic types (note: AtomicReference defined elsewhere)\nv_sers_5144_line_39.put(AtomicBoolean.class, AtomicBooleanSerializer.class);",
        "begin_line": 61,
        "end_line": 63,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_START_LINE_40",
        "snippet": "int PROBE_START_LINE_40 = 40;\nHashMap<Class<?>, Object> v_sers_5144_line_40 = (HashMap<Class<?>, Object>) (sers);",
        "begin_line": 64,
        "end_line": 65,
        "comment": "\t\t then atomic types (note: AtomicReference defined elsewhere)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
        "signature": "int PROBE_START_LINE_86",
        "snippet": "int PROBE_START_LINE_86 = 86;\ncom.fasterxml.jackson.databind.JavaType p_list_type_3221_line_86 = listType;",
        "begin_line": 89,
        "end_line": 90,
        "comment": "    \n     * @deprecated Since 2.6 use variant takes type arguments\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
        "signature": "JavaType obType",
        "snippet": "JavaType obType = untyped_object_deserializer1_expr5_line_137;\nint PROBE_START_LINE_138 = 138;",
        "begin_line": 150,
        "end_line": 151,
        "comment": "    \n     * We need to implement this method to properly find things to delegate\n     * to: it cannot be done earlier since delegated deserializers almost\n     * certainly require access to this instance (at least \"List\" and \"Map\" ones)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
        "signature": "TypeFactory untyped_object_deserializer1_expr9_line_139",
        "snippet": "TypeFactory untyped_object_deserializer1_expr9_line_139 = p_ctxt_3233_line_139.getTypeFactory();\nint PROBE_END_LINE_139 = 139;",
        "begin_line": 158,
        "end_line": 159,
        "comment": "    \n     * We need to implement this method to properly find things to delegate\n     * to: it cannot be done earlier since delegated deserializers almost\n     * certainly require access to this instance (at least \"List\" and \"Map\" ones)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
        "signature": "TypeFactory tf",
        "snippet": "TypeFactory tf = untyped_object_deserializer1_expr9_line_139;\n\n/* 26-Nov-2014, tatu: This is highly unusual, as in general contextualization\n*    should always be called separately, from within \"createContextual()\".\n*    But this is a very singular deserializer since it operates on `Object`\n*    (and often for `?` type parameter), and as a result, easily and commonly\n*    results in cycles, being value deserializer for various Maps and Collections.\n*    Because of this, we must somehow break the cycles. This is done here by\n*    forcing pseudo-contextualization with null property.\n*/\n\nint PROBE_START_LINE_151 = 156;",
        "begin_line": 160,
        "end_line": 171,
        "comment": "    \n     * We need to implement this method to properly find things to delegate\n     * to: it cannot be done earlier since delegated deserializers almost\n     * certainly require access to this instance (at least \"List\" and \"Map\" ones)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
        "signature": "boolean untyped_object_deserializer1_expr10_line_151",
        "snippet": "boolean untyped_object_deserializer1_expr10_line_151 = f__list_type_3223_line_151 == null;\nint PROBE_END_LINE_151 = 156;",
        "begin_line": 173,
        "end_line": 174,
        "comment": "        /* 26-Nov-2014, tatu: This is highly unusual, as in general contextualization\n         *    should always be called separately, from within \"createContextual()\".\n         *    But this is a very singular deserializer since it operates on `Object`\n         *    (and often for `?` type parameter), and as a result, easily and commonly\n         *    results in cycles, being value deserializer for various Maps and Collections.\n         *    Because of this, we must somehow break the cycles. This is done here by\n         *    forcing pseudo-contextualization with null property.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
        "signature": "boolean untyped_object_deserializer1_expr15_line_157",
        "snippet": "boolean untyped_object_deserializer1_expr15_line_157 = f__map_type_3224_line_157 == null;\nint PROBE_END_LINE_157 = 162;",
        "begin_line": 195,
        "end_line": 196,
        "comment": "             NOTE: if non-default List type, always consider to be non-standard deser"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
        "signature": "JsonToken t",
        "snippet": "JsonToken t = p.getCurrentToken();\nif (t == JsonToken.START_OBJECT) {\nt = p.nextToken();",
        "begin_line": 711,
        "end_line": 713,
        "comment": "         Minor optimization to handle small lists (default size for ArrayList is 10)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "signature": "int PROBE_START_LINE_49",
        "snippet": "int PROBE_START_LINE_49 = 50;\ncom.fasterxml.jackson.databind.ser.Serializers[] p_all_additional_serializers_1466_line_49 = allAdditionalSerializers;",
        "begin_line": 51,
        "end_line": 52,
        "comment": "    \n     * List of modifiers that can change the way {@link BeanSerializer} instances\n     * are configured and constructed.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "signature": "boolean serializer_factory_config1_expr6_line_49",
        "snippet": "boolean serializer_factory_config1_expr6_line_49 = p_all_additional_serializers_1466_line_49 == null;\nboolean serializer_factory_config1_expr5_line_49 = (serializer_factory_config1_expr6_line_49);",
        "begin_line": 53,
        "end_line": 54,
        "comment": "    \n     * List of modifiers that can change the way {@link BeanSerializer} instances\n     * are configured and constructed.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.MemberKey",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/MemberKey.java",
        "signature": "int PROBE_START_LINE_30",
        "snippet": "int PROBE_START_LINE_30 = 30;\nString p_name_4089_line_30 = name;",
        "begin_line": 30,
        "end_line": 31,
        "comment": "\n * Helper class needed to be able to efficiently access class\n * member functions ({@link Method}s and {@link Constructor}s)\n * in {@link java.util.Map}s.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.MemberKey",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/MemberKey.java",
        "signature": "int PROBE_END_LINE_30",
        "snippet": "int PROBE_END_LINE_30 = 30;\n_name = p_name_4089_line_30;",
        "begin_line": 32,
        "end_line": 33,
        "comment": "\n * Helper class needed to be able to efficiently access class\n * member functions ({@link Method}s and {@link Constructor}s)\n * in {@link java.util.Map}s.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
        "signature": "int PROBE_START_LINE_32",
        "snippet": "int PROBE_START_LINE_32 = 32;\ncom.fasterxml.jackson.databind.introspect.AnnotationMap[] p_param_annotations_3650_line_32 = paramAnnotations;",
        "begin_line": 32,
        "end_line": 33,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
        "signature": "boolean annotated_with_params1_expr3_line_77",
        "snippet": "boolean annotated_with_params1_expr3_line_77 = f__param_annotations_3570_line_77 != null;\nint PROBE_END_LINE_77 = 81;",
        "begin_line": 85,
        "end_line": 86,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "Set<String> s",
        "snippet": "Set<String> s = new HashSet<String>();\nint PROBE_START_LINE_35 = 35;",
        "begin_line": 32,
        "end_line": 33,
        "comment": "    \n     * Set of well-known \"nasty classes\", deserialization of which is considered dangerous\n     * and should (and is) prevented by default.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "Set<String> v_s_4639_line_35",
        "snippet": "Set<String> v_s_4639_line_35 = s;\nint PROBE_END_LINE_35 = 35;",
        "begin_line": 34,
        "end_line": 35,
        "comment": "    \n     * Set of well-known \"nasty classes\", deserialization of which is considered dangerous\n     * and should (and is) prevented by default.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_36",
        "snippet": "int PROBE_START_LINE_36 = 36;\nSet<String> v_s_4639_line_36 = s;",
        "begin_line": 39,
        "end_line": 40,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_36",
        "snippet": "int PROBE_END_LINE_36 = 36;\nv_s_4639_line_36.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");",
        "begin_line": 41,
        "end_line": 42,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_37",
        "snippet": "int PROBE_START_LINE_37 = 37;\nSet<String> v_s_4639_line_37 = s;",
        "begin_line": 43,
        "end_line": 44,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_37",
        "snippet": "int PROBE_END_LINE_37 = 37;\nv_s_4639_line_37.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");",
        "begin_line": 45,
        "end_line": 46,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_38",
        "snippet": "int PROBE_START_LINE_38 = 38;\nSet<String> v_s_4639_line_38 = s;",
        "begin_line": 47,
        "end_line": 48,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_39",
        "snippet": "int PROBE_START_LINE_39 = 39;\nSet<String> v_s_4639_line_39 = s;",
        "begin_line": 51,
        "end_line": 52,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_40",
        "snippet": "int PROBE_START_LINE_40 = 40;\nSet<String> v_s_4639_line_40 = s;",
        "begin_line": 55,
        "end_line": 56,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_40",
        "snippet": "int PROBE_END_LINE_40 = 40;\nv_s_4639_line_40.add(\"org.codehaus.groovy.runtime.MethodClosure\");",
        "begin_line": 57,
        "end_line": 58,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_41",
        "snippet": "int PROBE_START_LINE_41 = 41;\nSet<String> v_s_4639_line_41 = s;",
        "begin_line": 59,
        "end_line": 60,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_41",
        "snippet": "int PROBE_END_LINE_41 = 41;\nv_s_4639_line_41.add(\"org.springframework.beans.factory.ObjectFactory\");",
        "begin_line": 61,
        "end_line": 62,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_42",
        "snippet": "int PROBE_END_LINE_42 = 42;\nv_s_4639_line_42.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");",
        "begin_line": 65,
        "end_line": 66,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_43",
        "snippet": "int PROBE_START_LINE_43 = 43;\nSet<String> v_s_4639_line_43 = s;",
        "begin_line": 67,
        "end_line": 68,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_43",
        "snippet": "int PROBE_END_LINE_43 = 43;\nv_s_4639_line_43.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\");",
        "begin_line": 69,
        "end_line": 70,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_45",
        "snippet": "int PROBE_START_LINE_45 = 45;\nSet<String> v_s_4639_line_45 = s;",
        "begin_line": 71,
        "end_line": 72,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_45",
        "snippet": "int PROBE_END_LINE_45 = 45;\n// [databind#1680]: may or may not be problem, take no chance\nv_s_4639_line_45.add(\"com.sun.rowset.JdbcRowSetImpl\");",
        "begin_line": 73,
        "end_line": 75,
        "comment": "         (and wrt [databind#1599])"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_47",
        "snippet": "int PROBE_END_LINE_47 = 47;\n// [databind#1737]; JDK provided\nv_s_4639_line_47.add(\"java.util.logging.FileHandler\");",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\t\t [databind#1680]: may or may not be problem, take no chance"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_48",
        "snippet": "int PROBE_START_LINE_48 = 48;\nSet<String> v_s_4639_line_48 = s;",
        "begin_line": 81,
        "end_line": 82,
        "comment": "\t\t [databind#1737]; JDK provided"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_48",
        "snippet": "int PROBE_END_LINE_48 = 48;\nv_s_4639_line_48.add(\"java.rmi.server.UnicastRemoteObject\");",
        "begin_line": 83,
        "end_line": 84,
        "comment": "\t\t [databind#1737]; JDK provided"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_51",
        "snippet": "int PROBE_END_LINE_51 = 51;\n// [databind#1737]; 3rd party\n//s.add(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\"); // deprecated by [databind#1855]\nv_s_4639_line_51.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\");",
        "begin_line": 87,
        "end_line": 90,
        "comment": "\t\t [databind#1737]; JDK provided"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_56",
        "snippet": "int PROBE_START_LINE_56 = 56;\nSet<String> v_s_4639_line_56 = s;",
        "begin_line": 92,
        "end_line": 93,
        "comment": "s.add(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\");  deprecated by [databind#1855]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_56",
        "snippet": "int PROBE_END_LINE_56 = 56;\n// s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\"); // deprecated by [databind#1931]\n// s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\"); // - \"\" -\n// [databind#1855]: more 3rd party\nv_s_4639_line_56.add(\"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\");",
        "begin_line": 94,
        "end_line": 98,
        "comment": "s.add(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\");  deprecated by [databind#1855]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_57",
        "snippet": "int PROBE_END_LINE_57 = 57;\nv_s_4639_line_57.add(\"com.sun.org.apache.bcel.internal.util.ClassLoader\");",
        "begin_line": 101,
        "end_line": 102,
        "comment": "         [databind#1855]: more 3rd party"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_START_LINE_59",
        "snippet": "int PROBE_START_LINE_59 = 59;\nSet<String> v_s_4639_line_59 = s;",
        "begin_line": 103,
        "end_line": 104,
        "comment": "         [databind#1855]: more 3rd party"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_59",
        "snippet": "int PROBE_END_LINE_59 = 59;\n// [databind#1899]: more 3rd party\nv_s_4639_line_59.add(\"org.hibernate.jmx.StatisticsService\");",
        "begin_line": 105,
        "end_line": 107,
        "comment": "         [databind#1855]: more 3rd party"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_62",
        "snippet": "int PROBE_END_LINE_62 = 62;\n// [databind#2032]: more 3rd party; data exfiltration via xml parsed ext entities\nv_s_4639_line_62.add(\"org.apache.ibatis.parsing.XPathParser\");",
        "begin_line": 114,
        "end_line": 116,
        "comment": "\t\t [databind#1899]: more 3rd party"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_68",
        "snippet": "int PROBE_END_LINE_68 = 68;\n// [databind#2058]: Oracle JDBC driver, with jndi/ldap lookup\nv_s_4639_line_68.add(\"oracle.jdbc.connector.OracleManagedConnectionFactory\");",
        "begin_line": 126,
        "end_line": 128,
        "comment": "\t\t [databind#2052]: Jodd-db, with jndi/ldap lookup"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "signature": "int PROBE_END_LINE_72",
        "snippet": "int PROBE_END_LINE_72 = 72;\n// [databind#2097]: some 3rd party, one JDK-bundled\nv_s_4639_line_72.add(\"org.slf4j.ext.EventData\");",
        "begin_line": 136,
        "end_line": 138,
        "comment": "\t\t [databind#2058]: Oracle JDBC driver, with jndi/ldap lookup"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_134",
        "snippet": "int PROBE_START_LINE_134 = 134;\ncom.fasterxml.jackson.databind.JavaType p_type_3334_line_134 = type;",
        "begin_line": 136,
        "end_line": 137,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     *\n     * @param type Fully resolved type; may be `null`, but ONLY if no member fields or\n     *    methods are to be accessed\n     * @param rawType Type-erased class; pass if no `type` needed or available\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_134",
        "snippet": "int PROBE_END_LINE_134 = 134;\n_type = p_type_3334_line_134;",
        "begin_line": 138,
        "end_line": 139,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     *\n     * @param type Fully resolved type; may be `null`, but ONLY if no member fields or\n     *    methods are to be accessed\n     * @param rawType Type-erased class; pass if no `type` needed or available\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_135",
        "snippet": "int PROBE_START_LINE_135 = 135;\nClass<?> p_raw_type_3335_line_135 = rawType;",
        "begin_line": 140,
        "end_line": 141,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     *\n     * @param type Fully resolved type; may be `null`, but ONLY if no member fields or\n     *    methods are to be accessed\n     * @param rawType Type-erased class; pass if no `type` needed or available\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_135",
        "snippet": "int PROBE_END_LINE_135 = 135;\n_class = p_raw_type_3335_line_135;",
        "begin_line": 142,
        "end_line": 143,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     *\n     * @param type Fully resolved type; may be `null`, but ONLY if no member fields or\n     *    methods are to be accessed\n     * @param rawType Type-erased class; pass if no `type` needed or available\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_137",
        "snippet": "int PROBE_END_LINE_137 = 137;\n_primaryMixIn = p_primary_mix_in_3337_line_137;",
        "begin_line": 150,
        "end_line": 151,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     *\n     * @param type Fully resolved type; may be `null`, but ONLY if no member fields or\n     *    methods are to be accessed\n     * @param rawType Type-erased class; pass if no `type` needed or available\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_138",
        "snippet": "int PROBE_START_LINE_138 = 138;\ncom.fasterxml.jackson.databind.util.Annotations p_class_annotations_3338_line_138 = classAnnotations;",
        "begin_line": 152,
        "end_line": 153,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     *\n     * @param type Fully resolved type; may be `null`, but ONLY if no member fields or\n     *    methods are to be accessed\n     * @param rawType Type-erased class; pass if no `type` needed or available\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_138",
        "snippet": "int PROBE_END_LINE_138 = 138;\n_classAnnotations = p_class_annotations_3338_line_138;",
        "begin_line": 154,
        "end_line": 155,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     *\n     * @param type Fully resolved type; may be `null`, but ONLY if no member fields or\n     *    methods are to be accessed\n     * @param rawType Type-erased class; pass if no `type` needed or available\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_139",
        "snippet": "int PROBE_START_LINE_139 = 139;\ncom.fasterxml.jackson.databind.type.TypeBindings p_bindings_3339_line_139 = bindings;",
        "begin_line": 156,
        "end_line": 157,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     *\n     * @param type Fully resolved type; may be `null`, but ONLY if no member fields or\n     *    methods are to be accessed\n     * @param rawType Type-erased class; pass if no `type` needed or available\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_139",
        "snippet": "int PROBE_END_LINE_139 = 139;\n_bindings = p_bindings_3339_line_139;",
        "begin_line": 158,
        "end_line": 159,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     *\n     * @param type Fully resolved type; may be `null`, but ONLY if no member fields or\n     *    methods are to be accessed\n     * @param rawType Type-erased class; pass if no `type` needed or available\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_140",
        "snippet": "int PROBE_START_LINE_140 = 140;\ncom.fasterxml.jackson.databind.AnnotationIntrospector p_aintr_3340_line_140 = aintr;",
        "begin_line": 160,
        "end_line": 161,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     *\n     * @param type Fully resolved type; may be `null`, but ONLY if no member fields or\n     *    methods are to be accessed\n     * @param rawType Type-erased class; pass if no `type` needed or available\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_232",
        "snippet": "int PROBE_START_LINE_232 = 232;\ncom.fasterxml.jackson.databind.util.Annotations f__class_annotations_3347_line_232 = _classAnnotations;",
        "begin_line": 281,
        "end_line": 282,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_232",
        "snippet": "int PROBE_END_LINE_232 = 232;\nreturn annotated_class1_expr8_line_232;",
        "begin_line": 285,
        "end_line": 286,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_274",
        "snippet": "int PROBE_START_LINE_274 = 274;\ncom.fasterxml.jackson.databind.util.Annotations f__class_annotations_3347_line_274 = _classAnnotations;",
        "begin_line": 331,
        "end_line": 332,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_274",
        "snippet": "int PROBE_END_LINE_274 = 274;\nreturn f__class_annotations_3347_line_274;",
        "begin_line": 333,
        "end_line": 334,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_282",
        "snippet": "int PROBE_START_LINE_282 = 282;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass.Creators annotated_class1_expr10_line_282 = _creators();",
        "begin_line": 342,
        "end_line": 343,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_282",
        "snippet": "int PROBE_END_LINE_282 = 282;\nreturn annotated_class1_expr9_line_282;",
        "begin_line": 345,
        "end_line": 346,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_286",
        "snippet": "int PROBE_END_LINE_286 = 286;\nreturn annotated_class1_expr11_line_286;",
        "begin_line": 353,
        "end_line": 354,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_293",
        "snippet": "int PROBE_START_LINE_293 = 293;\ncom.fasterxml.jackson.databind.introspect.AnnotatedClass.Creators annotated_class1_expr14_line_293 = _creators();",
        "begin_line": 361,
        "end_line": 362,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_293",
        "snippet": "int PROBE_END_LINE_293 = 293;\nreturn annotated_class1_expr13_line_293;",
        "begin_line": 364,
        "end_line": 365,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_305",
        "snippet": "int PROBE_START_LINE_305 = 305;\ncom.fasterxml.jackson.databind.introspect.AnnotatedMethodMap annotated_class1_expr15_line_305 = _methods();",
        "begin_line": 377,
        "end_line": 378,
        "comment": "    \n     * @deprecated Since 2.9; use {@link #getFactoryMethods} instead.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_344",
        "snippet": "int PROBE_START_LINE_344 = 353;\nList<com.fasterxml.jackson.databind.introspect.AnnotatedField> v_f_3374_line_344 = f;",
        "begin_line": 440,
        "end_line": 441,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "boolean annotated_class1_expr21_line_344",
        "snippet": "boolean annotated_class1_expr21_line_344 = v_f_3374_line_344 == null;\nint PROBE_END_LINE_344 = 353;",
        "begin_line": 442,
        "end_line": 443,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_346",
        "snippet": "int PROBE_START_LINE_346 = 351;\ncom.fasterxml.jackson.databind.JavaType f__type_3343_line_346 = _type;",
        "begin_line": 445,
        "end_line": 446,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
        "signature": "int PROBE_START_LINE_67",
        "snippet": "int PROBE_START_LINE_67 = 69;\ncom.fasterxml.jackson.annotation.JsonTypeInfo.Id p_id_type_4611_line_67 = idType;",
        "begin_line": 74,
        "end_line": 75,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
        "signature": "boolean std_type_resolver_builder1_expr16_line_148",
        "snippet": "boolean std_type_resolver_builder1_expr16_line_148 = true;\nif (std_type_resolver_builder1_expr15_line_148) {\ncom.fasterxml.jackson.databind.JavaType p_base_type_4626_line_148 = baseType;",
        "begin_line": 211,
        "end_line": 213,
        "comment": "\t\t First, method for converting type info to type id:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
        "signature": "boolean std_type_resolver_builder1_expr17_line_148",
        "snippet": "boolean std_type_resolver_builder1_expr17_line_148 = p_base_type_4626_line_148.isAbstract();\nstd_type_resolver_builder1_expr16_line_148 = !std_type_resolver_builder1_expr17_line_148;",
        "begin_line": 214,
        "end_line": 215,
        "comment": "\t\t First, method for converting type info to type id:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
        "signature": "int PROBE_START_LINE_185",
        "snippet": "int PROBE_START_LINE_185 = 185;\ncom.fasterxml.jackson.databind.JavaType v_default_impl_4629_line_185 = defaultImpl;",
        "begin_line": 258,
        "end_line": 259,
        "comment": "                    /*\n                    throw new IllegalArgumentException(\n                            String.format(\"Invalid \\\"defaultImpl\\\" (%s): not a subtype of basetype (%s)\",\n                                    ClassUtil.nameOf(_defaultImpl), ClassUtil.nameOf(baseType.getRawClass()))\n                            );\n                            "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java",
        "signature": "int PROBE_START_LINE_29",
        "snippet": "int PROBE_START_LINE_29 = 29;\nString p_msg_4973_line_29 = msg;",
        "begin_line": 29,
        "end_line": 30,
        "comment": "\n * Special bogus \"serializer\" that will throw\n * {@link JsonMappingException} if its {@link #serialize}\n * gets invoked. Most commonly registered as handler for unknown types,\n * as well as for catching unintended usage (like trying to use null\n * as Map/Object key).\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "int PROBE_END_LINE_61",
        "snippet": "int PROBE_END_LINE_61 = 67;\n\n/**\n* Index within a {@link Collection} instance that contained\n* the reference; used if index is relevant and available.\n* If either not applicable, or not available, -1 is used to\n* denote \"not known\" (or not relevant).\n*/\nprotected int _index = json_mapping_exception1_expr1_line_67;",
        "begin_line": 67,
        "end_line": 75,
        "comment": "        \n         * Name of field (for beans) or key (for Maps) that is part\n         * of the reference. May be null for Collection types (which\n         * generally have {@link #_index} defined), or when resolving\n         * Map classes without (yet) having an instance to operate on.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "int PROBE_START_LINE_87",
        "snippet": "int PROBE_START_LINE_87 = 87;\nObject p_from_507_line_87 = from;",
        "begin_line": 95,
        "end_line": 96,
        "comment": "        \n         * Default constructor for deserialization/sub-classing purposes\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "int PROBE_END_LINE_87",
        "snippet": "int PROBE_END_LINE_87 = 87;\n_from = p_from_507_line_87;",
        "begin_line": 97,
        "end_line": 98,
        "comment": "        \n         * Default constructor for deserialization/sub-classing purposes\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "int PROBE_END_LINE_96",
        "snippet": "int PROBE_END_LINE_96 = 96;\n_index = p_index_512_line_96;",
        "begin_line": 119,
        "end_line": 120,
        "comment": "        \n         * Default constructor for deserialization/sub-classing purposes\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "StringBuilder sb",
        "snippet": "StringBuilder sb = new StringBuilder();\n\nint PROBE_START_LINE_123 = 147;",
        "begin_line": 149,
        "end_line": 151,
        "comment": "        \n         * Object through which reference was resolved. Can be either\n         * actual instance (usually the case for serialization), or\n         * Class (usually the case for deserialization).\n         *<p>\n         * Note that this value must be `transient` to allow serializability (as\n         * often such Object is NOT serializable; or, in case of `Class`, may\n         * not available at the point of deserialization). As such will return\n         * `null` if instance has been passed using JDK serialization.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "Object f__from_509_line_123",
        "snippet": "Object f__from_509_line_123 = _from;\nboolean json_mapping_exception1_expr5_line_123 = f__from_509_line_123 == null;",
        "begin_line": 152,
        "end_line": 153,
        "comment": "        \n         * Object through which reference was resolved. Can be either\n         * actual instance (usually the case for serialization), or\n         * Class (usually the case for deserialization).\n         *<p>\n         * Note that this value must be `transient` to allow serializability (as\n         * often such Object is NOT serializable; or, in case of `Class`, may\n         * not available at the point of deserialization). As such will return\n         * `null` if instance has been passed using JDK serialization.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "int PROBE_END_LINE_123",
        "snippet": "int PROBE_END_LINE_123 = 147;\nif (json_mapping_exception1_expr5_line_123) { // can this ever occur?\nsb.append(\"UNKNOWN\");",
        "begin_line": 154,
        "end_line": 156,
        "comment": "        \n         * Object through which reference was resolved. Can be either\n         * actual instance (usually the case for serialization), or\n         * Class (usually the case for deserialization).\n         *<p>\n         * Note that this value must be `transient` to allow serializability (as\n         * often such Object is NOT serializable; or, in case of `Class`, may\n         * not available at the point of deserialization). As such will return\n         * `null` if instance has been passed using JDK serialization.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "int PROBE_START_LINE_126",
        "snippet": "int PROBE_START_LINE_126 = 126;\nObject f__from_509_line_126 = _from;",
        "begin_line": 158,
        "end_line": 159,
        "comment": "        \n         * Object through which reference was resolved. Can be either\n         * actual instance (usually the case for serialization), or\n         * Class (usually the case for deserialization).\n         *<p>\n         * Note that this value must be `transient` to allow serializability (as\n         * often such Object is NOT serializable; or, in case of `Class`, may\n         * not available at the point of deserialization). As such will return\n         * `null` if instance has been passed using JDK serialization.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "boolean json_mapping_exception1_expr10_line_126",
        "snippet": "boolean json_mapping_exception1_expr10_line_126 = f__from_509_line_126 instanceof Class<?>;\nboolean json_mapping_exception1_expr7_line_126 = (json_mapping_exception1_expr10_line_126);",
        "begin_line": 160,
        "end_line": 161,
        "comment": "        \n         * Object through which reference was resolved. Can be either\n         * actual instance (usually the case for serialization), or\n         * Class (usually the case for deserialization).\n         *<p>\n         * Note that this value must be `transient` to allow serializability (as\n         * often such Object is NOT serializable; or, in case of `Class`, may\n         * not available at the point of deserialization). As such will return\n         * `null` if instance has been passed using JDK serialization.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "int PROBE_START_LINE_161",
        "snippet": "int PROBE_START_LINE_161 = 161;\nString f__desc_516_line_161 = _desc;",
        "begin_line": 253,
        "end_line": 254,
        "comment": "                    /* was:\n                    String pkgName = ClassUtil.getPackageName(cls);\n                    if (pkgName != null) {\n                        sb.append(pkgName);\n                        sb.append('.');\n                    }\n                    "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "int PROBE_END_LINE_253",
        "snippet": "int PROBE_END_LINE_253 = 253;\n_processor = p_processor_530_line_253;",
        "begin_line": 353,
        "end_line": 354,
        "comment": "    \n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "Object p_ref_from_559_line_353",
        "snippet": "Object p_ref_from_559_line_353 = refFrom;\nString p_ref_field_name_560_line_353 = refFieldName;",
        "begin_line": 460,
        "end_line": 461,
        "comment": "    \n     * Method that can be called to either create a new JsonMappingException\n     * (if underlying exception is not a JsonMappingException), or augment\n     * given exception with given path/reference information.\n     *\n     * This version of method is called when the reference is through a\n     * non-indexed object, such as a Map or POJO/bean.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "int PROBE_END_LINE_353",
        "snippet": "int PROBE_END_LINE_353 = 353;\nreturn json_mapping_exception1_expr32_line_353;",
        "begin_line": 464,
        "end_line": 465,
        "comment": "    \n     * Method that can be called to either create a new JsonMappingException\n     * (if underlying exception is not a JsonMappingException), or augment\n     * given exception with given path/reference information.\n     *\n     * This version of method is called when the reference is through a\n     * non-indexed object, such as a Map or POJO/bean.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "int PROBE_START_LINE_377",
        "snippet": "int PROBE_START_LINE_377 = 395;\nThrowable p_src_564_line_377 = src;",
        "begin_line": 496,
        "end_line": 497,
        "comment": "    \n     * Method that can be called to either create a new JsonMappingException\n     * (if underlying exception is not a JsonMappingException), or augment\n     * given exception with given path/reference information.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "int PROBE_END_LINE_378",
        "snippet": "int PROBE_END_LINE_378 = 378;\njme = (JsonMappingException) p_src_564_line_378;",
        "begin_line": 503,
        "end_line": 504,
        "comment": "    \n     * Method that can be called to either create a new JsonMappingException\n     * (if underlying exception is not a JsonMappingException), or augment\n     * given exception with given path/reference information.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "int PROBE_START_LINE_381",
        "snippet": "int PROBE_START_LINE_381 = 381;\nThrowable p_src_564_line_381 = src;",
        "begin_line": 506,
        "end_line": 507,
        "comment": "    \n     * Method that can be called to either create a new JsonMappingException\n     * (if underlying exception is not a JsonMappingException), or augment\n     * given exception with given path/reference information.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "String msg",
        "snippet": "String msg = json_mapping_exception1_expr38_line_381;\nint PROBE_START_LINE_383 = 385;",
        "begin_line": 511,
        "end_line": 512,
        "comment": "\t\t\t [databind#2128]: try to avoid duplication"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "int PROBE_END_LINE_383",
        "snippet": "int PROBE_END_LINE_383 = 385;\n// Let's use a more meaningful placeholder if all we have is null\nif (json_mapping_exception1_expr39_line_383) {\nmsg = \"(was \"+src.getClass().getName()+\")\";",
        "begin_line": 522,
        "end_line": 525,
        "comment": "\t\t\t [databind#2128]: try to avoid duplication"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "Closeable proc",
        "snippet": "Closeable proc = null;\nint PROBE_START_LINE_388 = 393;",
        "begin_line": 528,
        "end_line": 529,
        "comment": "             17-Aug-2015, tatu: Let's also pass the processor (parser/generator) along"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "Throwable p_src_564_line_388",
        "snippet": "Throwable p_src_564_line_388 = src;\nboolean json_mapping_exception1_expr43_line_388 = p_src_564_line_388 instanceof JsonProcessingException;",
        "begin_line": 530,
        "end_line": 531,
        "comment": "             17-Aug-2015, tatu: Let's also pass the processor (parser/generator) along"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/JsonMappingException.java",
        "signature": "int PROBE_END_LINE_388",
        "snippet": "int PROBE_END_LINE_388 = 393;\nif (json_mapping_exception1_expr43_line_388) {\nObject proc0 = ((JsonProcessingException) src).getProcessor();",
        "begin_line": 532,
        "end_line": 534,
        "comment": "             17-Aug-2015, tatu: Let's also pass the processor (parser/generator) along"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
        "signature": "int PROBE_START_LINE_100",
        "snippet": "int PROBE_START_LINE_100 = 100;\ncom.fasterxml.jackson.databind.KeyDeserializer p_key_deser_2848_line_100 = keyDeser;",
        "begin_line": 105,
        "end_line": 106,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
        "signature": "int PROBE_END_LINE_100",
        "snippet": "int PROBE_END_LINE_100 = 100;\n_keyDeserializer = p_key_deser_2848_line_100;",
        "begin_line": 107,
        "end_line": 108,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
        "signature": "int map_deserializer1_expr11_line_194",
        "snippet": "int map_deserializer1_expr11_line_194 = ignorable.size();\nmap_deserializer1_expr10_line_194 = map_deserializer1_expr11_line_194 == 0;",
        "begin_line": 229,
        "end_line": 230,
        "comment": "    \n     * Helper method used to check whether we can just use the default key\n     * deserialization, where JSON String becomes Java String.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
        "signature": "boolean map_deserializer1_expr7_line_194",
        "snippet": "boolean map_deserializer1_expr7_line_194 = (map_deserializer1_expr8_line_194);\nSet<String> map_deserializer1_expr6_line_194 = map_deserializer1_expr7_line_194 ? null : ignorable;",
        "begin_line": 234,
        "end_line": 235,
        "comment": "    \n     * Helper method used to check whether we can just use the default key\n     * deserialization, where JSON String becomes Java String.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
        "signature": "int PROBE_END_LINE_194",
        "snippet": "int PROBE_END_LINE_194 = 195;\n_ignorableProperties = map_deserializer1_expr6_line_194;",
        "begin_line": 236,
        "end_line": 237,
        "comment": "    \n     * Helper method used to check whether we can just use the default key\n     * deserialization, where JSON String becomes Java String.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
        "signature": "TypeDeserializer vtd",
        "snippet": "TypeDeserializer vtd = _valueTypeDeserializer;\nif (vtd != null) {\nvtd = vtd.forProperty(property);",
        "begin_line": 328,
        "end_line": 330,
        "comment": "         [databind#125]: May have a content converter"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "signature": "int PROBE_START_LINE_82",
        "snippet": "int PROBE_START_LINE_82 = 84;\nClass<?> p_raw_5472_line_82 = raw;",
        "begin_line": 82,
        "end_line": 83,
        "comment": "    \n     * Method used by core Jackson classes: NOT to be used by application code:\n     * it does NOT properly handle inspection of super-types, so neither parent\n     * Classes nor implemented Interfaces are accessible with resulting type\n     * instance.\n     *<p>\n     * NOTE: public only because it is called by <code>ObjectMapper</code> which is\n     * not in same package\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "signature": "int PROBE_START_LINE_176",
        "snippet": "int PROBE_START_LINE_176 = 178;\nObject f__type_handler_460_line_176 = _typeHandler;",
        "begin_line": 179,
        "end_line": 180,
        "comment": "         should not get here but..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "signature": "int PROBE_START_LINE_221",
        "snippet": "int PROBE_START_LINE_221 = 221;\ncom.fasterxml.jackson.databind.type.TypeBindings f__bindings_5363_line_221 = _bindings;",
        "begin_line": 243,
        "end_line": 244,
        "comment": "         SimpleType means something not-specialized, so:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "signature": "int simple_type1_expr14_line_221",
        "snippet": "int simple_type1_expr14_line_221 = f__bindings_5363_line_221.size();\nint PROBE_END_LINE_221 = 221;",
        "begin_line": 245,
        "end_line": 246,
        "comment": "         SimpleType means something not-specialized, so:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "signature": "JavaType superSuper",
        "snippet": "JavaType superSuper = _buildSuperClass(superClass.getSuperclass(), b);\nreturn new SimpleType(superClass, b,\nsuperSuper, null, null, null, false);",
        "begin_line": 324,
        "end_line": 326,
        "comment": "    \n     * Helper method we need to recursively build skeletal representations\n     * of superclasses.\n     * \n     * @since 2.7 -- remove when not needed (2.8?)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.BeanUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/BeanUtil.java",
        "signature": "int PROBE_START_LINE_41",
        "snippet": "int PROBE_START_LINE_41 = 62;\nString p_name_5813_line_41 = name;",
        "begin_line": 41,
        "end_line": 42,
        "comment": "    \n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.BeanUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/BeanUtil.java",
        "signature": "boolean bean_util1_expr3_line_49",
        "snippet": "boolean bean_util1_expr3_line_49 = \"getCallbacks\".equals(p_name_5813_line_49);\nint PROBE_END_LINE_49 = 58;",
        "begin_line": 48,
        "end_line": 49,
        "comment": "    \n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.BeanUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/BeanUtil.java",
        "signature": "int PROBE_START_LINE_53",
        "snippet": "int PROBE_START_LINE_53 = 58;\nString p_name_5813_line_53 = name;",
        "begin_line": 62,
        "end_line": 63,
        "comment": "\t\t\t/* 16-Feb-2009, tatu: To handle [JACKSON-53], need to block\n             *   CGLib-provided method \"getCallbacks\". Not sure of exact\n             *   safe criteria to get decent coverage without false matches;\n             *   but for now let's assume there's no reason to use any \n             *   such getter from CGLib.\n             *   But let's try this approach...\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.BeanUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/BeanUtil.java",
        "signature": "int PROBE_START_LINE_59",
        "snippet": "int PROBE_START_LINE_59 = 61;\nboolean p_std_naming_5814_line_59 = stdNaming;",
        "begin_line": 72,
        "end_line": 73,
        "comment": "\t\t\t/* 16-Feb-2009, tatu: To handle [JACKSON-53], need to block\n             *   CGLib-provided method \"getCallbacks\". Not sure of exact\n             *   safe criteria to get decent coverage without false matches;\n             *   but for now let's assume there's no reason to use any \n             *   such getter from CGLib.\n             *   But let's try this approach...\n             "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.BeanUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/BeanUtil.java",
        "signature": "String pkgName",
        "snippet": "String pkgName = ClassUtil.getPackageName(argType);\nreturn (pkgName != null) && pkgName.startsWith(\"groovy.lang\");",
        "begin_line": 241,
        "end_line": 242,
        "comment": "    \n     * Similar to {@link #isCglibGetCallbacks}, need to suppress\n     * a cyclic reference.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.BeanUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/BeanUtil.java",
        "signature": "String pkgName",
        "snippet": "String pkgName = ClassUtil.getPackageName(am.getRawType());\nreturn (pkgName != null) && pkgName.startsWith(\"groovy.lang\");",
        "begin_line": 250,
        "end_line": 251,
        "comment": "    \n     * Another helper method to deal with Groovy's problematic metadata accessors\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DatabindContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DatabindContext.java",
        "signature": "int databind_context1_expr2_line_176",
        "snippet": "int databind_context1_expr2_line_176 = p_sub_class_143_line_176.indexOf('<');\nboolean databind_context1_expr1_line_176 = databind_context1_expr2_line_176 > 0;",
        "begin_line": 175,
        "end_line": 176,
        "comment": "    \n     * Lookup method called when code needs to resolve class name from input;\n     * usually simple lookup\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DatabindContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DatabindContext.java",
        "signature": "String p_sub_class_143_line_188",
        "snippet": "String p_sub_class_143_line_188 = subClass;\nClass<?> databind_context1_expr4_line_188 = databind_context1_expr5_line_188\n.findClass(p_sub_class_143_line_188);",
        "begin_line": 195,
        "end_line": 197,
        "comment": "                security issues."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DatabindContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DatabindContext.java",
        "signature": "int PROBE_END_LINE_188",
        "snippet": "int PROBE_END_LINE_188 = 188;\ncls =  databind_context1_expr4_line_188;",
        "begin_line": 198,
        "end_line": 199,
        "comment": "                security issues."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
        "signature": "int PROBE_END_LINE_108",
        "snippet": "int PROBE_END_LINE_108 = 108;\nreturn f__is_ignored_type_1253_line_108;",
        "begin_line": 114,
        "end_line": 115,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
        "signature": "int PROBE_END_LINE_114",
        "snippet": "int PROBE_END_LINE_114 = 114;\nreturn f__setter_info_1254_line_114; }\n\n/**\n* @since 2.9\n*/\npublic JsonAutoDetect.Value getVisibility() { return _visibility; }\n\n/**\n* @since 2.9\n*/\npublic Boolean getMergeable() { int PROBE_START_LINE_124 = 124;",
        "begin_line": 123,
        "end_line": 134,
        "comment": "    \n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "protected final AnnotatedWithParams[] _creators",
        "snippet": "protected final AnnotatedWithParams[] _creators = new AnnotatedWithParams[9];\n\n/**\n* Bitmask of creators that were explicitly marked as creators; false for\n* auto-detected (ones included base on naming and/or visibility, not\n* annotation)\n*\n* @since 2.5\n*/\nprotected int _explicitCreators = 0;",
        "begin_line": 56,
        "end_line": 65,
        "comment": "    \n     * Set of creators we have collected so far\n     * \n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_START_LINE_79",
        "snippet": "int PROBE_START_LINE_79 = 79;\nMapperConfig<?> p_config_2614_line_79 = config;",
        "begin_line": 87,
        "end_line": 88,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "boolean creator_collector1_expr5_line_79",
        "snippet": "boolean creator_collector1_expr5_line_79 = p_config_2614_line_79.canOverrideAccessModifiers();\nint PROBE_END_LINE_79 = 79;",
        "begin_line": 89,
        "end_line": 90,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_START_LINE_80",
        "snippet": "int PROBE_START_LINE_80 = 81;\nMapperConfig<?> p_config_2614_line_80 = config;",
        "begin_line": 92,
        "end_line": 93,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_END_LINE_80",
        "snippet": "int PROBE_END_LINE_80 = 81;\n_forceAccess = creator_collector1_expr6_line_80;",
        "begin_line": 96,
        "end_line": 97,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_START_LINE_87",
        "snippet": "int PROBE_START_LINE_87 = 87;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_2619_line_87 = ctxt;",
        "begin_line": 103,
        "end_line": 104,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "DeserializationConfig creator_collector1_expr7_line_87",
        "snippet": "DeserializationConfig creator_collector1_expr7_line_87 = p_ctxt_2619_line_87.getConfig();\nint PROBE_END_LINE_87 = 87;",
        "begin_line": 105,
        "end_line": 106,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "final DeserializationConfig config",
        "snippet": "final DeserializationConfig config = creator_collector1_expr7_line_87;\nint PROBE_START_LINE_88 = 89;",
        "begin_line": 107,
        "end_line": 108,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "AnnotatedWithParams defaultCtor",
        "snippet": "AnnotatedWithParams defaultCtor = creator_collector1_expr13_line_97;\n\nint PROBE_START_LINE_100 = 100;",
        "begin_line": 132,
        "end_line": 134,
        "comment": "         work well, so let's replace by lower-level check:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_START_LINE_101",
        "snippet": "int PROBE_START_LINE_101 = 103;\ncom.fasterxml.jackson.databind.deser.std.StdValueInstantiator v_inst_2627_line_101 = inst;",
        "begin_line": 139,
        "end_line": 140,
        "comment": "         work well, so let's replace by lower-level check:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "String name",
        "snippet": "String name = properties[i].getName();\n// Need to consider Injectables, which may not have\n// a name at all, and need to be skipped\nif (name.isEmpty() && (properties[i].getInjectableValueId() != null)) {\ncontinue;",
        "begin_line": 278,
        "end_line": 282,
        "comment": "             Better ensure we have no duplicate names either..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "Integer old",
        "snippet": "Integer old = names.put(name, Integer.valueOf(i));\nif (old != null) {\nthrow new IllegalArgumentException(String.format(\n\"Duplicate creator property \\\"%s\\\" (index %s vs %d) for type %s \",\nname, old, i, ClassUtil.nameOf(_beanDesc.getBeanClass())));",
        "begin_line": 284,
        "end_line": 288,
        "comment": "                     a name at all, and need to be skipped"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_START_LINE_270",
        "snippet": "int PROBE_START_LINE_270 = 273;\nT p_member_2658_line_270 = member;",
        "begin_line": 389,
        "end_line": 390,
        "comment": "                 Second: type refinement(s), if no explicit deserializer was located"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "boolean creator_collector1_expr42_line_270",
        "snippet": "boolean creator_collector1_expr42_line_270 = p_member_2658_line_270 != null;\nboolean f__can_fix_access_2616_line_270 = true;",
        "begin_line": 391,
        "end_line": 392,
        "comment": "                 Second: type refinement(s), if no explicit deserializer was located"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_END_LINE_270",
        "snippet": "int PROBE_END_LINE_270 = 273;\nif (creator_collector1_expr41_line_270) {\nint PROBE_START_LINE_271 = 272;",
        "begin_line": 398,
        "end_line": 400,
        "comment": "                 Second: type refinement(s), if no explicit deserializer was located"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "T p_member_2658_line_271",
        "snippet": "T p_member_2658_line_271 = member;\njava.lang.reflect.AnnotatedElement creator_collector1_expr45_line_271 = p_member_2658_line_271\n.getAnnotated();",
        "begin_line": 401,
        "end_line": 403,
        "comment": "                 Second: type refinement(s), if no explicit deserializer was located"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "signature": "int PROBE_END_LINE_271",
        "snippet": "int PROBE_END_LINE_271 = 272;\nClassUtil.checkAndFixAccess((Member) creator_collector1_expr45_line_271,\n_forceAccess);",
        "begin_line": 404,
        "end_line": 406,
        "comment": "                 Second: type refinement(s), if no explicit deserializer was located"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_START_LINE_26",
        "snippet": "int PROBE_START_LINE_26 = 26;\nMap<String, JsonSerializer<?>> p_all_deserializers_5091_line_26 = (Map<String, JsonSerializer<?>>) (allDeserializers);",
        "begin_line": 28,
        "end_line": 29,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "String number_serializers1_expr2_line_26",
        "snippet": "String number_serializers1_expr2_line_26 = Integer.class.getName();\nint PROBE_END_LINE_26 = 26;",
        "begin_line": 30,
        "end_line": 31,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_START_LINE_27",
        "snippet": "int PROBE_START_LINE_27 = 27;\nMap<String, JsonSerializer<?>> p_all_deserializers_5091_line_27 = (Map<String, JsonSerializer<?>>) (allDeserializers);",
        "begin_line": 33,
        "end_line": 34,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_END_LINE_27",
        "snippet": "int PROBE_END_LINE_27 = 27;\np_all_deserializers_5091_line_27.put(number_serializers1_expr7_line_27, new IntegerSerializer(Integer.TYPE));",
        "begin_line": 37,
        "end_line": 38,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_START_LINE_28",
        "snippet": "int PROBE_START_LINE_28 = 28;\nMap<String, JsonSerializer<?>> p_all_deserializers_5091_line_28 = (Map<String, JsonSerializer<?>>) (allDeserializers);",
        "begin_line": 39,
        "end_line": 40,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "String number_serializers1_expr10_line_28",
        "snippet": "String number_serializers1_expr10_line_28 = Long.class.getName();\nint PROBE_END_LINE_28 = 28;",
        "begin_line": 41,
        "end_line": 42,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_START_LINE_32",
        "snippet": "int PROBE_START_LINE_32 = 32;\nMap<String, JsonSerializer<?>> p_all_deserializers_5091_line_32 = (Map<String, JsonSerializer<?>>) (allDeserializers);",
        "begin_line": 57,
        "end_line": 58,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "Class<Byte> f_type_5093_line_32",
        "snippet": "Class<Byte> f_type_5093_line_32 = Byte.TYPE;\nString number_serializers1_expr21_line_32 = f_type_5093_line_32.getName();",
        "begin_line": 59,
        "end_line": 60,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_END_LINE_32",
        "snippet": "int PROBE_END_LINE_32 = 32;\np_all_deserializers_5091_line_32.put(number_serializers1_expr21_line_32, f_instance_5092_line_32);",
        "begin_line": 62,
        "end_line": 63,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "boolean number_serializers1_expr44_line_60",
        "snippet": "boolean number_serializers1_expr44_line_60 = p_number_type_5100_line_60 == f_int_5105_line_60;\nboolean number_serializers1_expr43_line_60 = (number_serializers1_expr44_line_60);",
        "begin_line": 131,
        "end_line": 132,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "signature": "int PROBE_START_LINE_499",
        "snippet": "int PROBE_START_LINE_499 = 499;\nboolean p_default_state_596_line_499 = defaultState;",
        "begin_line": 499,
        "end_line": 500,
        "comment": "    \n     * Setting that determines what happens if an attempt is made to explicitly\n     * \"merge\" value of a property, where value does not support merging; either\n     * merging is skipped and new value is created (<code>true</code>) or\n     * an exception is thrown (false).\n     *<p>\n     * Feature is disabled by default since non-mergeable property types are ignored\n     * even if defaults call for merging, and usually explicit per-type or per-property\n     * settings for such types should result in an exception.\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "signature": "int PROBE_END_LINE_499",
        "snippet": "int PROBE_END_LINE_499 = 499;\n_defaultState = p_default_state_596_line_499;",
        "begin_line": 501,
        "end_line": 502,
        "comment": "    \n     * Setting that determines what happens if an attempt is made to explicitly\n     * \"merge\" value of a property, where value does not support merging; either\n     * merging is skipped and new value is created (<code>true</code>) or\n     * an exception is thrown (false).\n     *<p>\n     * Feature is disabled by default since non-mergeable property types are ignored\n     * even if defaults call for merging, and usually explicit per-type or per-property\n     * settings for such types should result in an exception.\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "signature": "int PROBE_START_LINE_500",
        "snippet": "int PROBE_START_LINE_500 = 500;\nint mapper_feature1_expr3_line_500 = ordinal();",
        "begin_line": 503,
        "end_line": 504,
        "comment": "    \n     * Setting that determines what happens if an attempt is made to explicitly\n     * \"merge\" value of a property, where value does not support merging; either\n     * merging is skipped and new value is created (<code>true</code>) or\n     * an exception is thrown (false).\n     *<p>\n     * Feature is disabled by default since non-mergeable property types are ignored\n     * even if defaults call for merging, and usually explicit per-type or per-property\n     * settings for such types should result in an exception.\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "signature": "int PROBE_END_LINE_500",
        "snippet": "int PROBE_END_LINE_500 = 500;\n_mask = mapper_feature1_expr1_line_500;",
        "begin_line": 507,
        "end_line": 508,
        "comment": "    \n     * Setting that determines what happens if an attempt is made to explicitly\n     * \"merge\" value of a property, where value does not support merging; either\n     * merging is skipped and new value is created (<code>true</code>) or\n     * an exception is thrown (false).\n     *<p>\n     * Feature is disabled by default since non-mergeable property types are ignored\n     * even if defaults call for merging, and usually explicit per-type or per-property\n     * settings for such types should result in an exception.\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_START_LINE_104",
        "snippet": "int PROBE_START_LINE_104 = 104;\nint deserialization_config1_expr2_line_104 = collectFeatureDefaults(DeserializationFeature.class);",
        "begin_line": 104,
        "end_line": 105,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_END_LINE_104",
        "snippet": "int PROBE_END_LINE_104 = 104;\n_deserFeatures = deserialization_config1_expr2_line_104;",
        "begin_line": 106,
        "end_line": 107,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_START_LINE_105",
        "snippet": "int PROBE_START_LINE_105 = 105;\ncom.fasterxml.jackson.databind.node.JsonNodeFactory f_instance_173_line_105 = JsonNodeFactory.instance;",
        "begin_line": 108,
        "end_line": 109,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_END_LINE_105",
        "snippet": "int PROBE_END_LINE_105 = 105;\n_nodeFactory = f_instance_173_line_105;",
        "begin_line": 110,
        "end_line": 111,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_START_LINE_173",
        "snippet": "int PROBE_START_LINE_173 = 173;\ncom.fasterxml.jackson.databind.DeserializationConfig p_src_192_line_173 = src;",
        "begin_line": 179,
        "end_line": 180,
        "comment": "    \n     * Copy constructor used to create a non-shared instance with given mix-in\n     * annotation definitions and subtype resolver.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int f__parser_features_175_line_176",
        "snippet": "int f__parser_features_175_line_176 = p_src_192_line_176._parserFeatures;\nint PROBE_END_LINE_176 = 176;",
        "begin_line": 196,
        "end_line": 197,
        "comment": "    \n     * Copy constructor used to create a non-shared instance with given mix-in\n     * annotation definitions and subtype resolver.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_START_LINE_177",
        "snippet": "int PROBE_START_LINE_177 = 177;\ncom.fasterxml.jackson.databind.DeserializationConfig p_src_192_line_177 = src;",
        "begin_line": 199,
        "end_line": 200,
        "comment": "    \n     * Copy constructor used to create a non-shared instance with given mix-in\n     * annotation definitions and subtype resolver.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int f__parser_features_to_change_176_line_177",
        "snippet": "int f__parser_features_to_change_176_line_177 = p_src_192_line_177._parserFeaturesToChange;\nint PROBE_END_LINE_177 = 177;",
        "begin_line": 201,
        "end_line": 202,
        "comment": "    \n     * Copy constructor used to create a non-shared instance with given mix-in\n     * annotation definitions and subtype resolver.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_START_LINE_178",
        "snippet": "int PROBE_START_LINE_178 = 178;\ncom.fasterxml.jackson.databind.DeserializationConfig p_src_192_line_178 = src;",
        "begin_line": 204,
        "end_line": 205,
        "comment": "    \n     * Copy constructor used to create a non-shared instance with given mix-in\n     * annotation definitions and subtype resolver.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int mask",
        "snippet": "int mask = f.getMask();\nnewSet |= mask;",
        "begin_line": 590,
        "end_line": 591,
        "comment": "    \n     * Fluent factory method that will construct and return a new configuration\n     * object instance with specified features enabled.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int newSet",
        "snippet": "int newSet = _formatReadFeatures;\nint newMask = _formatReadFeaturesToChange;",
        "begin_line": 624,
        "end_line": 625,
        "comment": "    \n     * Fluent factory method that will construct and return a new configuration\n     * object instance with specified features disabled.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int mask",
        "snippet": "int mask = f.getMask();\nnewSet &= ~mask;",
        "begin_line": 627,
        "end_line": 628,
        "comment": "    \n     * Fluent factory method that will construct and return a new configuration\n     * object instance with specified features disabled.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "boolean deserialization_config1_expr21_line_627",
        "snippet": "boolean deserialization_config1_expr21_line_627 = f__format_read_features_to_change_178_line_627 != 0;\nint PROBE_END_LINE_627 = 629;",
        "begin_line": 709,
        "end_line": 710,
        "comment": "    \n     * Method called by {@link ObjectMapper} and {@link ObjectReader}\n     * to modify those {@link com.fasterxml.jackson.core.JsonParser.Feature} settings\n     * that have been configured via this config instance.\n     * \n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_START_LINE_648",
        "snippet": "int PROBE_START_LINE_648 = 648;\nint f__deser_features_171_line_648 = _deserFeatures;",
        "begin_line": 740,
        "end_line": 741,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_END_LINE_55",
        "snippet": "int PROBE_END_LINE_55 = 55;\n_types = type_bindings1_expr7_line_55;",
        "begin_line": 92,
        "end_line": 93,
        "comment": "    ********************************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_56",
        "snippet": "int PROBE_START_LINE_56 = 58;\nString[] f__names_5527_line_56 = _names;",
        "begin_line": 94,
        "end_line": 95,
        "comment": "    ********************************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int f_length_1316_line_56",
        "snippet": "int f_length_1316_line_56 = f__names_5527_line_56.length;\ncom.fasterxml.jackson.databind.JavaType[] f__types_5528_line_56 = _types;",
        "begin_line": 96,
        "end_line": 97,
        "comment": "    ********************************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "boolean type_bindings1_expr10_line_56",
        "snippet": "boolean type_bindings1_expr10_line_56 = f_length_1316_line_56 != f__types_5528_line_56.length;\nint PROBE_END_LINE_56 = 58;",
        "begin_line": 98,
        "end_line": 99,
        "comment": "    ********************************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_68",
        "snippet": "int PROBE_START_LINE_68 = 68;\ncom.fasterxml.jackson.databind.type.TypeBindings f_empty_5523_line_68 = EMPTY;",
        "begin_line": 124,
        "end_line": 125,
        "comment": "    ********************************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "boolean type_bindings1_expr15_line_92",
        "snippet": "boolean type_bindings1_expr15_line_92 = p_types_5537_line_92 == null;\nint PROBE_END_LINE_92 = 99;",
        "begin_line": 153,
        "end_line": 154,
        "comment": "    \n     * Factory method for constructing bindings for given class using specified type\n     * parameters.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_94",
        "snippet": "int PROBE_START_LINE_94 = 99;\ncom.fasterxml.jackson.databind.JavaType[] p_types_5537_line_94 = types;",
        "begin_line": 158,
        "end_line": 159,
        "comment": "    \n     * Factory method for constructing bindings for given class using specified type\n     * parameters.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int len",
        "snippet": "int len = vars.length;\nnames = new String[len];",
        "begin_line": 174,
        "end_line": 175,
        "comment": "    \n     * Factory method for constructing bindings for given class using specified type\n     * parameters.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_123",
        "snippet": "int PROBE_START_LINE_123 = 123;\nClass<?> p_erased_type_5538_line_123 = erasedType;",
        "begin_line": 191,
        "end_line": 192,
        "comment": "         Check here to give better error message"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int f_length_1316_line_124",
        "snippet": "int f_length_1316_line_124 = 0;\nif (!type_bindings1_expr23_line_124) {\nf_length_1316_line_124 = vars.length;",
        "begin_line": 201,
        "end_line": 203,
        "comment": "\t\t 30-Oct-2015, tatu: Minor optimization for relatively common cases"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int type_bindings1_expr22_line_124",
        "snippet": "int type_bindings1_expr22_line_124 = type_bindings1_expr23_line_124 ? 0 : f_length_1316_line_124;\nint PROBE_END_LINE_124 = 124;",
        "begin_line": 205,
        "end_line": 206,
        "comment": "\t\t 30-Oct-2015, tatu: Minor optimization for relatively common cases"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "String type_bindings1_expr30_line_129",
        "snippet": "String type_bindings1_expr30_line_129 = type_bindings1_expr31_line_129.getName();\nint PROBE_END_LINE_129 = 130;",
        "begin_line": 219,
        "end_line": 220,
        "comment": "\t\t 30-Oct-2015, tatu: Minor optimization for relatively common cases"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int f_length_1316_line_137",
        "snippet": "int f_length_1316_line_137 = 0;\nif (!type_bindings1_expr34_line_137) {\nf_length_1316_line_137 = vars.length;",
        "begin_line": 237,
        "end_line": 239,
        "comment": "\t\t 30-Oct-2015, tatu: Minor optimization for relatively common cases"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int type_bindings1_expr33_line_137",
        "snippet": "int type_bindings1_expr33_line_137 = type_bindings1_expr34_line_137 ? 0 : f_length_1316_line_137;\nint PROBE_END_LINE_137 = 137;",
        "begin_line": 241,
        "end_line": 242,
        "comment": "\t\t 30-Oct-2015, tatu: Minor optimization for relatively common cases"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int v_var_len_5546_line_138",
        "snippet": "int v_var_len_5546_line_138 = varLen;\nboolean type_bindings1_expr37_line_138 = v_var_len_5546_line_138 != 2;",
        "begin_line": 245,
        "end_line": 246,
        "comment": "\t\t 30-Oct-2015, tatu: Minor optimization for relatively common cases"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_142",
        "snippet": "int PROBE_START_LINE_142 = 143;\nTypeVariable<?>[] v_vars_5545_line_142 = vars;",
        "begin_line": 252,
        "end_line": 253,
        "comment": "\t\t 30-Oct-2015, tatu: Minor optimization for relatively common cases"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "boolean type_bindings1_expr49_line_154",
        "snippet": "boolean type_bindings1_expr49_line_154 = v_vars_5549_line_154 == null;\nboolean type_bindings1_expr47_line_154 = (type_bindings1_expr49_line_154);",
        "begin_line": 277,
        "end_line": 278,
        "comment": "    \n     * Alternate factory method that may be called if it is possible that type\n     * does or does not require type parameters; this is mostly useful for\n     * collection- and map-like types.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int f_length_1316_line_154",
        "snippet": "int f_length_1316_line_154 = 0;\nif (!type_bindings1_expr47_line_154) {\nf_length_1316_line_154 = vars.length;",
        "begin_line": 279,
        "end_line": 281,
        "comment": "    \n     * Alternate factory method that may be called if it is possible that type\n     * does or does not require type parameters; this is mostly useful for\n     * collection- and map-like types.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int v_var_len_5550_line_155",
        "snippet": "int v_var_len_5550_line_155 = varLen;\nboolean type_bindings1_expr50_line_155 = v_var_len_5550_line_155 == 0;",
        "begin_line": 287,
        "end_line": 288,
        "comment": "    \n     * Alternate factory method that may be called if it is possible that type\n     * does or does not require type parameters; this is mostly useful for\n     * collection- and map-like types.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_158",
        "snippet": "int PROBE_START_LINE_158 = 161;\nint v_var_len_5550_line_158 = varLen;",
        "begin_line": 293,
        "end_line": 294,
        "comment": "    \n     * Alternate factory method that may be called if it is possible that type\n     * does or does not require type parameters; this is mostly useful for\n     * collection- and map-like types.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "boolean type_bindings1_expr61_line_177",
        "snippet": "boolean type_bindings1_expr61_line_177 = p_types_5552_line_177 == null;\nint PROBE_END_LINE_177 = 179;",
        "begin_line": 337,
        "end_line": 338,
        "comment": "    \n     * Alternate factory method that may be called if it is possible that type\n     * does or does not require type parameters; this is mostly useful for\n     * collection- and map-like types.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_201",
        "snippet": "int PROBE_START_LINE_201 = 201;\nString[] f__unbound_variables_5532_line_201 = _unboundVariables;",
        "begin_line": 387,
        "end_line": 388,
        "comment": "    \n     * Method for creating an instance that has same bindings as this object,\n     * plus an indicator for additional type variable that may be unbound within\n     * this context; this is needed to resolve recursive self-references.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "boolean type_bindings1_expr72_line_201",
        "snippet": "boolean type_bindings1_expr72_line_201 = f__unbound_variables_5532_line_201 == null;\nboolean type_bindings1_expr70_line_201 = (type_bindings1_expr72_line_201);",
        "begin_line": 389,
        "end_line": 390,
        "comment": "    \n     * Method for creating an instance that has same bindings as this object,\n     * plus an indicator for additional type variable that may be unbound within\n     * this context; this is needed to resolve recursive self-references.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int f_length_1316_line_201",
        "snippet": "int f_length_1316_line_201 = 0;\nif (!type_bindings1_expr70_line_201) {\nf_length_1316_line_201 = _unboundVariables.length;",
        "begin_line": 391,
        "end_line": 393,
        "comment": "    \n     * Method for creating an instance that has same bindings as this object,\n     * plus an indicator for additional type variable that may be unbound within\n     * this context; this is needed to resolve recursive self-references.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int type_bindings1_expr69_line_201",
        "snippet": "int type_bindings1_expr69_line_201 = type_bindings1_expr70_line_201 ? 0 : f_length_1316_line_201;\nint PROBE_END_LINE_201 = 201;",
        "begin_line": 395,
        "end_line": 396,
        "comment": "    \n     * Method for creating an instance that has same bindings as this object,\n     * plus an indicator for additional type variable that may be unbound within\n     * this context; this is needed to resolve recursive self-references.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int len",
        "snippet": "int len = type_bindings1_expr69_line_201;\nint PROBE_START_LINE_202 = 203;",
        "begin_line": 397,
        "end_line": 398,
        "comment": "    \n     * Method for creating an instance that has same bindings as this object,\n     * plus an indicator for additional type variable that may be unbound within\n     * this context; this is needed to resolve recursive self-references.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int v_len_5558_line_202",
        "snippet": "int v_len_5558_line_202 = len;\nboolean type_bindings1_expr77_line_202 = v_len_5558_line_202 == 0;",
        "begin_line": 399,
        "end_line": 400,
        "comment": "    \n     * Method for creating an instance that has same bindings as this object,\n     * plus an indicator for additional type variable that may be unbound within\n     * this context; this is needed to resolve recursive self-references.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "boolean type_bindings1_expr74_line_202",
        "snippet": "boolean type_bindings1_expr74_line_202 = (type_bindings1_expr77_line_202);\nString[] type_bindings1_expr73_line_202 = type_bindings1_expr74_line_202\n? new String[1]\n: Arrays.copyOf(_unboundVariables, len + 1);",
        "begin_line": 401,
        "end_line": 404,
        "comment": "    \n     * Method for creating an instance that has same bindings as this object,\n     * plus an indicator for additional type variable that may be unbound within\n     * this context; this is needed to resolve recursive self-references.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_END_LINE_202",
        "snippet": "int PROBE_END_LINE_202 = 203;\nString[] names =  type_bindings1_expr73_line_202;",
        "begin_line": 405,
        "end_line": 406,
        "comment": "    \n     * Method for creating an instance that has same bindings as this object,\n     * plus an indicator for additional type variable that may be unbound within\n     * this context; this is needed to resolve recursive self-references.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_204",
        "snippet": "int PROBE_START_LINE_204 = 204;\nString[] v_names_5559_line_204 = names;",
        "begin_line": 407,
        "end_line": 408,
        "comment": "    \n     * Method for creating an instance that has same bindings as this object,\n     * plus an indicator for additional type variable that may be unbound within\n     * this context; this is needed to resolve recursive self-references.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int v_len_5558_line_204",
        "snippet": "int v_len_5558_line_204 = len;\nString p_name_5557_line_204 = name;",
        "begin_line": 409,
        "end_line": 410,
        "comment": "    \n     * Method for creating an instance that has same bindings as this object,\n     * plus an indicator for additional type variable that may be unbound within\n     * this context; this is needed to resolve recursive self-references.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_END_LINE_204",
        "snippet": "int PROBE_END_LINE_204 = 204;\nv_names_5559_line_204[v_len_5558_line_204] = p_name_5557_line_204;",
        "begin_line": 411,
        "end_line": 412,
        "comment": "    \n     * Method for creating an instance that has same bindings as this object,\n     * plus an indicator for additional type variable that may be unbound within\n     * this context; this is needed to resolve recursive self-references.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "String[] v_names_5559_line_205",
        "snippet": "String[] v_names_5559_line_205 = names;\nint PROBE_END_LINE_205 = 205;",
        "begin_line": 416,
        "end_line": 417,
        "comment": "    \n     * Method for creating an instance that has same bindings as this object,\n     * plus an indicator for additional type variable that may be unbound within\n     * this context; this is needed to resolve recursive self-references.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_END_LINE_220",
        "snippet": "int PROBE_END_LINE_220 = 240;\nif (type_bindings1_expr81_line_220) {\nint PROBE_START_LINE_221 = 221;",
        "begin_line": 439,
        "end_line": 441,
        "comment": "    \n     * Find type bound to specified name, if there is one; returns bound type if so, null if not.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int v_i_5561_line_221",
        "snippet": "int v_i_5561_line_221 = i;\nJavaType type_bindings1_expr83_line_221 = f__types_5528_line_221[v_i_5561_line_221];",
        "begin_line": 443,
        "end_line": 444,
        "comment": "    \n     * Find type bound to specified name, if there is one; returns bound type if so, null if not.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_END_LINE_221",
        "snippet": "int PROBE_END_LINE_221 = 221;\nJavaType t = type_bindings1_expr83_line_221;",
        "begin_line": 445,
        "end_line": 446,
        "comment": "    \n     * Find type bound to specified name, if there is one; returns bound type if so, null if not.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "boolean type_bindings1_expr84_line_222",
        "snippet": "boolean type_bindings1_expr84_line_222 = v_t_5563_line_222 instanceof ResolvedRecursiveType;\nint PROBE_END_LINE_222 = 238;",
        "begin_line": 449,
        "end_line": 450,
        "comment": "    \n     * Find type bound to specified name, if there is one; returns bound type if so, null if not.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "ResolvedRecursiveType rrt",
        "snippet": "ResolvedRecursiveType rrt = (ResolvedRecursiveType) t;\nJavaType t2 = rrt.getSelfReferencedType();",
        "begin_line": 452,
        "end_line": 453,
        "comment": "    \n     * Find type bound to specified name, if there is one; returns bound type if so, null if not.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_239",
        "snippet": "int PROBE_START_LINE_239 = 239;\ncom.fasterxml.jackson.databind.JavaType v_t_5563_line_239 = t;",
        "begin_line": 468,
        "end_line": 469,
        "comment": "/*\n                        throw new IllegalStateException(String.format\n(\"Unresolved ResolvedRecursiveType for parameter '%s' (index #%d; erased type %s)\",\nname, i, t.getRawClass()));\n"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
        "signature": "int PROBE_START_LINE_26",
        "snippet": "int PROBE_START_LINE_26 = 26;\nClass<?> v_cls_3296_line_26 = cls;",
        "begin_line": 26,
        "end_line": 27,
        "comment": "         Trigger loading of annotations that only JDK 7 has..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
        "signature": "int PROBE_START_LINE_36",
        "snippet": "int PROBE_START_LINE_36 = 38;\nClass<?> p_raw_type_3298_line_36 = rawType;",
        "begin_line": 39,
        "end_line": 40,
        "comment": "         Trigger loading of annotations that only JDK 7 has..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
        "signature": "Transient java7_support_impl1_expr4_line_52",
        "snippet": "Transient java7_support_impl1_expr4_line_52 = p_a_3300_line_52.getAnnotation(Transient.class);\nint PROBE_END_LINE_52 = 52;",
        "begin_line": 61,
        "end_line": 62,
        "comment": "         Trigger loading of annotations that only JDK 7 has..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
        "signature": "Transient t",
        "snippet": "Transient t = java7_support_impl1_expr4_line_52;\nint PROBE_START_LINE_53 = 55;",
        "begin_line": 63,
        "end_line": 64,
        "comment": "         Trigger loading of annotations that only JDK 7 has..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
        "signature": "boolean java7_support_impl1_expr6_line_53",
        "snippet": "boolean java7_support_impl1_expr6_line_53 = v_t_3301_line_53 != null;\nint PROBE_END_LINE_53 = 55;",
        "begin_line": 66,
        "end_line": 67,
        "comment": "         Trigger loading of annotations that only JDK 7 has..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
        "signature": "int PROBE_START_LINE_61",
        "snippet": "int PROBE_START_LINE_61 = 61;\ncom.fasterxml.jackson.databind.introspect.Annotated p_a_3302_line_61 = a;",
        "begin_line": 76,
        "end_line": 77,
        "comment": "         Trigger loading of annotations that only JDK 7 has..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
        "signature": "boolean java7_support_impl1_expr9_line_64",
        "snippet": "boolean java7_support_impl1_expr9_line_64 = v_props_3303_line_64 != null;\nint PROBE_END_LINE_64 = 66;",
        "begin_line": 84,
        "end_line": 85,
        "comment": "         Trigger loading of annotations that only JDK 7 has..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_START_LINE_26",
        "snippet": "int PROBE_START_LINE_26 = 26;\nObject p_d_3665_line_26 = d;",
        "begin_line": 28,
        "end_line": 29,
        "comment": "    \n     * Optional data to carry along\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_END_LINE_70",
        "snippet": "int PROBE_END_LINE_70 = 70;\nreturn f_no_annotations_3664_line_70;",
        "begin_line": 83,
        "end_line": 84,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_START_LINE_83",
        "snippet": "int PROBE_START_LINE_83 = 83;\nObject f__data_3666_line_83 = _data;",
        "begin_line": 97,
        "end_line": 98,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_START_LINE_95",
        "snippet": "int PROBE_START_LINE_95 = 95;\nClass<?> p_type_3675_line_95 = type;",
        "begin_line": 115,
        "end_line": 116,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_END_LINE_95",
        "snippet": "int PROBE_END_LINE_95 = 95;\n_type = p_type_3675_line_95;",
        "begin_line": 117,
        "end_line": 118,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_END_LINE_96",
        "snippet": "int PROBE_END_LINE_96 = 96;\n_value = p_value_3676_line_96;",
        "begin_line": 121,
        "end_line": 122,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_START_LINE_111",
        "snippet": "int PROBE_START_LINE_111 = 111;\njava.lang.annotation.Annotation p_ann_3679_line_111 = ann;",
        "begin_line": 137,
        "end_line": 138,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "boolean annotation_collector1_expr9_line_111",
        "snippet": "boolean annotation_collector1_expr9_line_111 = annotation_collector1_expr10_line_111 == f__type_3677_line_111;\nint PROBE_END_LINE_111 = 111;",
        "begin_line": 142,
        "end_line": 143,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_END_LINE_135",
        "snippet": "int PROBE_END_LINE_135 = 135;\nf__annotations_3687_line_135.put(p_type_1_3683_line_135, p_value_1_3684_line_135);",
        "begin_line": 188,
        "end_line": 189,
        "comment": "\t\t\t true override? Just replace in-place, return"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_END_LINE_23",
        "snippet": "int PROBE_END_LINE_23 = 23;\n\nprivate final static Iterator<?> EMPTY_ITERATOR = class_util1_expr4_line_23;",
        "begin_line": 36,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_START_LINE_119",
        "snippet": "int PROBE_START_LINE_119 = 121;\ncom.fasterxml.jackson.databind.JavaType p_type_5856_line_119 = type;",
        "begin_line": 165,
        "end_line": 166,
        "comment": "    \n     * Method for finding all super classes (but not super interfaces) of given class,\n     * starting with the immediate super class and ending in the most distant one.\n     * Class itself is included if <code>addClassItself</code> is true.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_START_LINE_122",
        "snippet": "int PROBE_START_LINE_122 = 122;\ncom.fasterxml.jackson.databind.JavaType p_type_5856_line_122 = type;",
        "begin_line": 172,
        "end_line": 173,
        "comment": "    \n     * Method for finding all super classes (but not super interfaces) of given class,\n     * starting with the immediate super class and ending in the most distant one.\n     * Class itself is included if <code>addClassItself</code> is true.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_START_LINE_123",
        "snippet": "int PROBE_START_LINE_123 = 123;\nClass<?> v_cls_5860_line_123 = cls;",
        "begin_line": 177,
        "end_line": 178,
        "comment": "    \n     * Method for finding all super classes (but not super interfaces) of given class,\n     * starting with the immediate super class and ending in the most distant one.\n     * Class itself is included if <code>addClassItself</code> is true.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_START_LINE_124",
        "snippet": "int PROBE_START_LINE_124 = 129;\nboolean p_add_class_itself_5859_line_124 = addClassItself;",
        "begin_line": 188,
        "end_line": 189,
        "comment": "    \n     * Method for finding all super classes (but not super interfaces) of given class,\n     * starting with the immediate super class and ending in the most distant one.\n     * Class itself is included if <code>addClassItself</code> is true.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "boolean class_util1_expr21_line_125",
        "snippet": "boolean class_util1_expr21_line_125 = p_result_5858_line_125.contains(p_type_5856_line_125);\nint PROBE_END_LINE_125 = 127;",
        "begin_line": 195,
        "end_line": 196,
        "comment": "    \n     * Method for finding all super classes (but not super interfaces) of given class,\n     * starting with the immediate super class and ending in the most distant one.\n     * Class itself is included if <code>addClassItself</code> is true.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_START_LINE_130",
        "snippet": "int PROBE_START_LINE_130 = 132;\ncom.fasterxml.jackson.databind.JavaType p_type_5856_line_130 = type;",
        "begin_line": 206,
        "end_line": 207,
        "comment": "    \n     * Method for finding all super classes (but not super interfaces) of given class,\n     * starting with the immediate super class and ending in the most distant one.\n     * Class itself is included if <code>addClassItself</code> is true.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_START_LINE_402",
        "snippet": "int PROBE_START_LINE_402 = 402;\nThrowable p_t_5888_line_401 = t;",
        "begin_line": 557,
        "end_line": 558,
        "comment": "    \n     * Method that can be used to find the \"root cause\", innermost\n     * of chained (wrapped) exceptions.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_START_LINE_404",
        "snippet": "int PROBE_START_LINE_404 = 404;\nThrowable p_t_5888_line_404 = t;",
        "begin_line": 567,
        "end_line": 568,
        "comment": "    \n     * Method that can be used to find the \"root cause\", innermost\n     * of chained (wrapped) exceptions.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_END_LINE_404",
        "snippet": "int PROBE_END_LINE_404 = 404;\nreturn p_t_5888_line_404;",
        "begin_line": 569,
        "end_line": 570,
        "comment": "    \n     * Method that can be used to find the \"root cause\", innermost\n     * of chained (wrapped) exceptions.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_START_LINE_569",
        "snippet": "int PROBE_START_LINE_569 = 576;\nboolean p_force_access_5907_line_569 = forceAccess;",
        "begin_line": 754,
        "end_line": 755,
        "comment": "    \n     * Method that can be called to try to create an instantiate of\n     * specified type. Instantiation is done using default no-argument\n     * constructor.\n     *\n     * @param canFixAccess Whether it is possible to try to change access\n     *   rights of the default constructor (in case it is not publicly\n     *   accessible) or not.\n     *\n     * @throws IllegalArgumentException If instantiation fails for any reason;\n     *    except for cases where constructor throws an unchecked exception\n     *    (which will be passed as is)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_END_LINE_569",
        "snippet": "int PROBE_END_LINE_569 = 576;\nif (p_force_access_5907_line_569) {\ncheckAndFixAccess(ctor, forceAccess);",
        "begin_line": 756,
        "end_line": 758,
        "comment": "    \n     * Method that can be called to try to create an instantiate of\n     * specified type. Instantiation is done using default no-argument\n     * constructor.\n     *\n     * @param canFixAccess Whether it is possible to try to change access\n     *   rights of the default constructor (in case it is not publicly\n     *   accessible) or not.\n     *\n     * @throws IllegalArgumentException If instantiation fails for any reason;\n     *    except for cases where constructor throws an unchecked exception\n     *    (which will be passed as is)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_END_LINE_914",
        "snippet": "int PROBE_END_LINE_914 = 914;\nv_ao_5929_line_914.setAccessible(true);",
        "begin_line": 1134,
        "end_line": 1135,
        "comment": "        /* 14-Jan-2009, tatu: It seems safe and potentially beneficial to\n         *   always to make it accessible (latter because it will force\n         *   skipping checks we have no use for...), so let's always call it.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "boolean class_util1_expr72_line_1047",
        "snippet": "boolean class_util1_expr72_line_1047 = class_util1_expr73_line_1047 != null;\nboolean class_util1_expr71_line_1047 = (class_util1_expr72_line_1047);",
        "begin_line": 1283,
        "end_line": 1284,
        "comment": "    \n     * Method that can be called to determine if given Object is the default\n     * implementation Jackson uses; as opposed to a custom serializer installed by\n     * a module or calling application. Determination is done using\n     * {@link JacksonStdImpl} annotation on handler (serializer, deserializer etc)\n     * class.\n     *<p>\n     * NOTE: passing `null` is legal, and will result in <code>true</code>\n     * being returned.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_END_LINE_1047",
        "snippet": "int PROBE_END_LINE_1047 = 1047;\nreturn class_util1_expr71_line_1047;",
        "begin_line": 1285,
        "end_line": 1286,
        "comment": "    \n     * Method that can be called to determine if given Object is the default\n     * implementation Jackson uses; as opposed to a custom serializer installed by\n     * a module or calling application. Determination is done using\n     * {@link JacksonStdImpl} annotation on handler (serializer, deserializer etc)\n     * class.\n     *<p>\n     * NOTE: passing `null` is legal, and will result in <code>true</code>\n     * being returned.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "String class_util1_expr76_line_1064",
        "snippet": "String class_util1_expr76_line_1064 = class_util1_expr77_line_1064 ? null : class_util1_expr78_line_1064;\nint PROBE_END_LINE_1064 = 1064;",
        "begin_line": 1315,
        "end_line": 1316,
        "comment": "    \n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
        "signature": "int PROBE_START_LINE_40",
        "snippet": "int PROBE_START_LINE_40 = 40;\njava.lang.reflect.Field p_field_3507_line_40 = field;",
        "begin_line": 41,
        "end_line": 42,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
        "signature": "int PROBE_END_LINE_65",
        "snippet": "int PROBE_END_LINE_65 = 65;\nreturn f__field_3509_line_65; }\n\n@Override\npublic int getModifiers() { int PROBE_START_LINE_68 = 68;",
        "begin_line": 71,
        "end_line": 75,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "signature": "int PROBE_END_LINE_125",
        "snippet": "int PROBE_END_LINE_125 = 131;\n\n/**\n* Serializer that gets called for values of types for which no\n* serializers can be constructed.\n*<p>\n* The default serializer will simply thrown an exception.\n*/\nprotected JsonSerializer<Object> _unknownTypeSerializer = f_default_unknown_serializer_1101_line_131;",
        "begin_line": 129,
        "end_line": 137,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "signature": "int PROBE_END_LINE_140",
        "snippet": "int PROBE_END_LINE_140 = 144;\n\n/**\n* Serializer used to output a null value. Default implementation\n* writes nulls using {@link JsonGenerator#writeNull}.\n*/\nprotected JsonSerializer<Object> _nullValueSerializer = f_instance_1104_line_144;",
        "begin_line": 150,
        "end_line": 156,
        "comment": "    \n     * Serializer used to output non-null keys of Maps (which will get\n     * output as JSON Objects), if not null; if null, us the standard\n     * default key serializer.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
        "signature": "int PROBE_START_LINE_93",
        "snippet": "int PROBE_START_LINE_93 = 93;\nMap<?, ?> p_shared_1281_line_93 = shared;",
        "begin_line": 103,
        "end_line": 104,
        "comment": "        ********************************************************\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
        "signature": "int PROBE_START_LINE_38",
        "snippet": "int PROBE_START_LINE_38 = 40;\njava.lang.reflect.Method p_method_3564_line_38 = method;",
        "begin_line": 40,
        "end_line": 41,
        "comment": "    ***************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
        "signature": "boolean annotated_method1_expr2_line_38",
        "snippet": "boolean annotated_method1_expr2_line_38 = p_method_3564_line_38 == null;\nint PROBE_END_LINE_38 = 40;",
        "begin_line": 42,
        "end_line": 43,
        "comment": "    ***************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
        "signature": "int PROBE_END_LINE_166",
        "snippet": "int PROBE_END_LINE_166 = 166;\nreturn f__method_3567_line_166; }\n\n@Override\npublic void setValue(Object pojo, Object value) throws IllegalArgumentException\n{\ntry {\n_method.invoke(pojo, value);",
        "begin_line": 212,
        "end_line": 219,
        "comment": "    ******************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_94",
        "snippet": "int PROBE_START_LINE_94 = 94;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_2074_line_94 = ctxt;",
        "begin_line": 115,
        "end_line": 116,
        "comment": "    \n     * Method that {@link DeserializerCache}s call to create a new\n     * deserializer for types other than Collections, Maps, arrays and\n     * enums.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_96",
        "snippet": "int PROBE_END_LINE_96 = 96;\n// We may also have custom overrides:\nJsonDeserializer<Object> custom = bean_deserializer_factory1_expr6_line_96;",
        "begin_line": 126,
        "end_line": 128,
        "comment": "    \n     * Method that {@link DeserializerCache}s call to create a new\n     * deserializer for types other than Collections, Maps, arrays and\n     * enums.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "boolean bean_deserializer_factory1_expr7_line_97",
        "snippet": "boolean bean_deserializer_factory1_expr7_line_97 = v_custom_2078_line_97 != null;\nint PROBE_END_LINE_97 = 99;",
        "begin_line": 131,
        "end_line": 132,
        "comment": "\t\t We may also have custom overrides:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_104",
        "snippet": "int PROBE_START_LINE_104 = 106;\ncom.fasterxml.jackson.databind.JavaType p_type_2075_line_104 = type;",
        "begin_line": 136,
        "end_line": 137,
        "comment": "\t\t We may also have custom overrides:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_115",
        "snippet": "int PROBE_START_LINE_115 = 121;\ncom.fasterxml.jackson.databind.JavaType v_concrete_type_2079_line_115 = concreteType;",
        "begin_line": 178,
        "end_line": 179,
        "comment": "\t\t\t Let's make it possible to materialize abstract types."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_135",
        "snippet": "int PROBE_END_LINE_135 = 135;\n// For checks like [databind#1599]\n_validateSubType(p_ctxt_2074_line_135, p_type_2075_line_135, p_bean_desc_2076_line_135);",
        "begin_line": 226,
        "end_line": 228,
        "comment": "\t\t Otherwise: could the class be a Bean class? If not, bail out"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_137",
        "snippet": "int PROBE_START_LINE_137 = 137;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_2074_line_137 = ctxt;",
        "begin_line": 229,
        "end_line": 230,
        "comment": "\t\t For checks like [databind#1599]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_137",
        "snippet": "int PROBE_END_LINE_137 = 137;\n// Use generic bean introspection to build deserializer\nreturn bean_deserializer_factory1_expr24_line_137;",
        "begin_line": 235,
        "end_line": 237,
        "comment": "\t\t For checks like [databind#1599]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "JavaType builderType",
        "snippet": "JavaType builderType = ctxt.constructType(builderClass);\nBeanDescription builderDesc = ctxt.getConfig().introspectForBuilder(builderType);",
        "begin_line": 246,
        "end_line": 247,
        "comment": "         First: need a BeanDescription for builder class"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "AnnotatedMethod buildMethod",
        "snippet": "AnnotatedMethod buildMethod = builderDesc.findMethod(buildMethodName, null);\nif (buildMethod != null) { // note: can't yet throw error; may be given build method\nif (config.canOverrideAccessModifiers()) {\nClassUtil.checkAndFixAccess(buildMethod.getMember(), config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));",
        "begin_line": 491,
        "end_line": 494,
        "comment": "         and lastly, find build method to use:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_437",
        "snippet": "int PROBE_START_LINE_437 = 437;\ncom.fasterxml.jackson.databind.BeanDescription p_bean_desc_2111_line_437 = beanDesc;",
        "begin_line": 636,
        "end_line": 637,
        "comment": "    \n     * Overridable method that constructs a {@link BeanDeserializerBuilder}\n     * which is used to accumulate information needed to create deserializer\n     * instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_461",
        "snippet": "int PROBE_START_LINE_461 = 463;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_2112_line_461 = ctxt;",
        "begin_line": 676,
        "end_line": 677,
        "comment": "    \n     * Method called to figure out settable properties for the\n     * bean deserializer to use.\n     *<p>\n     * Note: designed to be overridable, and effort is made to keep interface\n     * similar between versions.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_466",
        "snippet": "int PROBE_START_LINE_466 = 466;\ncom.fasterxml.jackson.annotation.JsonIgnoreProperties.Value v_ignorals_2118_line_466 = ignorals;",
        "begin_line": 694,
        "end_line": 695,
        "comment": "           just use it as is."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_507",
        "snippet": "int PROBE_START_LINE_507 = 594;\nList<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> v_prop_defs_2127_line_507 = propDefs;",
        "begin_line": 785,
        "end_line": 786,
        "comment": "\t\t After which we can let custom code change the set"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_507",
        "snippet": "int PROBE_END_LINE_507 = 594;\n// At which point we still have all kinds of properties; not all with mutators:\nfor (BeanPropertyDefinition propDef : v_prop_defs_2127_line_507) {\nSettableBeanProperty prop = null;",
        "begin_line": 787,
        "end_line": 790,
        "comment": "\t\t After which we can let custom code change the set"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_513",
        "snippet": "int PROBE_START_LINE_513 = 544;\ncom.fasterxml.jackson.databind.introspect.BeanPropertyDefinition v_prop_def_2128_line_513 = propDef;",
        "begin_line": 792,
        "end_line": 793,
        "comment": "\t\t At which point we still have all kinds of properties; not all with mutators:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "boolean bean_deserializer_factory1_expr72_line_513",
        "snippet": "boolean bean_deserializer_factory1_expr72_line_513 = v_prop_def_2128_line_513.hasSetter();\nint PROBE_END_LINE_513 = 544;",
        "begin_line": 794,
        "end_line": 795,
        "comment": "\t\t At which point we still have all kinds of properties; not all with mutators:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "AnnotatedMethod setter",
        "snippet": "AnnotatedMethod setter = bean_deserializer_factory1_expr73_line_514;\nint PROBE_START_LINE_515 = 515;",
        "begin_line": 804,
        "end_line": 805,
        "comment": "               other types, and only then create constructor parameter, if any."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "JavaType bean_deserializer_factory1_expr74_line_515",
        "snippet": "JavaType bean_deserializer_factory1_expr74_line_515 = v_setter_2130_line_515.getParameterType(0);\nint PROBE_END_LINE_515 = 515;",
        "begin_line": 807,
        "end_line": 808,
        "comment": "               other types, and only then create constructor parameter, if any."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "JavaType propertyType",
        "snippet": "JavaType propertyType = bean_deserializer_factory1_expr74_line_515;\nint PROBE_START_LINE_516 = 516;",
        "begin_line": 809,
        "end_line": 810,
        "comment": "               other types, and only then create constructor parameter, if any."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_516",
        "snippet": "int PROBE_END_LINE_516 = 516;\nprop = bean_deserializer_factory1_expr76_line_516;",
        "begin_line": 818,
        "end_line": 819,
        "comment": "               other types, and only then create constructor parameter, if any."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_517",
        "snippet": "int PROBE_START_LINE_517 = 544;\ncom.fasterxml.jackson.databind.introspect.BeanPropertyDefinition v_prop_def_2128_line_517 = propDef;",
        "begin_line": 821,
        "end_line": 822,
        "comment": "               other types, and only then create constructor parameter, if any."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_548",
        "snippet": "int PROBE_END_LINE_548 = 584;\n// 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types\n//   (since they are never used anyway)\nif (bean_deserializer_factory1_expr78_line_548) {\n/* If property is passed via constructor parameter, we must\n* handle things in special way. Not sure what is the most optimal way...\n* for now, let's just call a (new) method in builder, which does nothing.\n*/\n// but let's call a method just to allow custom builders to be aware...\nfinal String name = propDef.getName();",
        "begin_line": 857,
        "end_line": 866,
        "comment": "               other types, and only then create constructor parameter, if any."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "CreatorProperty cprop",
        "snippet": "CreatorProperty cprop = null;\nif (creatorProps != null) {\nfor (SettableBeanProperty cp : creatorProps) {\nif (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {\ncprop = (CreatorProperty) cp;",
        "begin_line": 867,
        "end_line": 871,
        "comment": "                 but let's call a method just to allow custom builders to be aware..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "List<String> n",
        "snippet": "List<String> n = new ArrayList<>();\nfor (SettableBeanProperty cp : creatorProps) {\nn.add(cp.getName());",
        "begin_line": 877,
        "end_line": 879,
        "comment": "                 but let's call a method just to allow custom builders to be aware..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_585",
        "snippet": "int PROBE_START_LINE_585 = 593;\ncom.fasterxml.jackson.databind.deser.SettableBeanProperty v_prop_2129_line_585 = prop;",
        "begin_line": 897,
        "end_line": 898,
        "comment": "                 but let's call a method just to allow custom builders to be aware..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "boolean bean_deserializer_factory1_expr80_line_585",
        "snippet": "boolean bean_deserializer_factory1_expr80_line_585 = v_prop_2129_line_585 != null;\nint PROBE_END_LINE_585 = 593;",
        "begin_line": 899,
        "end_line": 900,
        "comment": "                 but let's call a method just to allow custom builders to be aware..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_587",
        "snippet": "int PROBE_START_LINE_587 = 587;\ncom.fasterxml.jackson.databind.introspect.BeanPropertyDefinition v_prop_def_2128_line_587 = propDef;",
        "begin_line": 902,
        "end_line": 903,
        "comment": "                 but let's call a method just to allow custom builders to be aware..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_588",
        "snippet": "int PROBE_START_LINE_588 = 590;\nClass<?>[] v_views_2132_line_588 = views;",
        "begin_line": 908,
        "end_line": 909,
        "comment": "\t\t\t\t one more thing before adding to builder: copy any metadata"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_591",
        "snippet": "int PROBE_START_LINE_591 = 591;\ncom.fasterxml.jackson.databind.deser.SettableBeanProperty v_prop_2129_line_591 = prop;",
        "begin_line": 920,
        "end_line": 921,
        "comment": "\t\t\t\t one more thing before adding to builder: copy any metadata"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
        "signature": "int PROBE_START_LINE_59",
        "snippet": "int PROBE_START_LINE_59 = 59;\nClass<T> p_t_5178_line_59 = (Class<T>) (t);",
        "begin_line": 59,
        "end_line": 60,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
        "signature": "int PROBE_START_LINE_53",
        "snippet": "int PROBE_START_LINE_53 = 53;\ncom.fasterxml.jackson.databind.JavaType p_self_type_2809_line_53 = selfType;",
        "begin_line": 54,
        "end_line": 55,
        "comment": "    \n     * Marker flag set if the <code>_nullProvider</code> indicates that all null\n     * content values should be skipped (instead of being possibly converted).\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
        "signature": "int PROBE_END_LINE_53",
        "snippet": "int PROBE_END_LINE_53 = 53;\n_containerType = p_self_type_2809_line_53;",
        "begin_line": 56,
        "end_line": 57,
        "comment": "    \n     * Marker flag set if the <code>_nullProvider</code> indicates that all null\n     * content values should be skipped (instead of being possibly converted).\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
        "signature": "int PROBE_START_LINE_202",
        "snippet": "int PROBE_START_LINE_202 = 202;\ncom.fasterxml.jackson.annotation.JsonAutoDetect.Visibility p_getter_4411_line_202 = getter;",
        "begin_line": 205,
        "end_line": 206,
        "comment": "        \n         * Constructor that allows directly specifying minimum visibility levels to use\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
        "signature": "int PROBE_END_LINE_202",
        "snippet": "int PROBE_END_LINE_202 = 202;\n_getterMinLevel = p_getter_4411_line_202;",
        "begin_line": 207,
        "end_line": 208,
        "comment": "        \n         * Constructor that allows directly specifying minimum visibility levels to use\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
        "signature": "int PROBE_START_LINE_384",
        "snippet": "int PROBE_START_LINE_384 = 384;\ncom.fasterxml.jackson.annotation.JsonAutoDetect.Visibility f__field_min_level_4420_line_384 = _fieldMinLevel;",
        "begin_line": 413,
        "end_line": 414,
        "comment": "        ******************************************************\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
        "signature": "int PROBE_START_LINE_46",
        "snippet": "int PROBE_START_LINE_46 = 46;\ncom.fasterxml.jackson.databind.introspect.AnnotatedWithParams p_owner_3635_line_46 = owner;",
        "begin_line": 46,
        "end_line": 47,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
        "signature": "int PROBE_END_LINE_46",
        "snippet": "int PROBE_END_LINE_46 = 46;\n_owner = p_owner_3635_line_46;",
        "begin_line": 48,
        "end_line": 49,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_START_LINE_138",
        "snippet": "int PROBE_START_LINE_138 = 138;\ncom.fasterxml.jackson.databind.introspect.ClassIntrospector p_ci_1217_line_138 = ci;",
        "begin_line": 140,
        "end_line": 141,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_END_LINE_138",
        "snippet": "int PROBE_END_LINE_138 = 138;\n_classIntrospector = p_ci_1217_line_138;",
        "begin_line": 142,
        "end_line": 143,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_START_LINE_139",
        "snippet": "int PROBE_START_LINE_139 = 139;\ncom.fasterxml.jackson.databind.AnnotationIntrospector p_ai_1218_line_139 = ai;",
        "begin_line": 144,
        "end_line": 145,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_END_LINE_139",
        "snippet": "int PROBE_END_LINE_139 = 139;\n_annotationIntrospector = p_ai_1218_line_139;",
        "begin_line": 146,
        "end_line": 147,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_START_LINE_140",
        "snippet": "int PROBE_START_LINE_140 = 140;\ncom.fasterxml.jackson.databind.PropertyNamingStrategy p_pns_1219_line_140 = pns;",
        "begin_line": 148,
        "end_line": 149,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_START_LINE_147",
        "snippet": "int PROBE_START_LINE_147 = 147;\ncom.fasterxml.jackson.core.Base64Variant p_default_base64_1226_line_147 = defaultBase64;",
        "begin_line": 176,
        "end_line": 177,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_START_LINE_211",
        "snippet": "int PROBE_START_LINE_211 = 211;\ncom.fasterxml.jackson.databind.ObjectMapper.DefaultTyping p_t_604_line_211 = t;",
        "begin_line": 217,
        "end_line": 218,
        "comment": "        \n         * Definition of what types is this default typer valid for.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_END_LINE_218",
        "snippet": "int PROBE_END_LINE_218 = 218;\nreturn object_mapper1_expr1_line_218;",
        "begin_line": 240,
        "end_line": 241,
        "comment": "        \n         * Definition of what types is this default typer valid for.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "boolean object_mapper1_expr5_line_252",
        "snippet": "boolean object_mapper1_expr5_line_252 = p_t_612_line_252.isReferenceType();\nif (!(object_mapper1_expr5_line_252)) {\nbreak;",
        "begin_line": 285,
        "end_line": 287,
        "comment": "                 19-Apr-2016, tatu: ReferenceType like Optional also requires similar handling:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_END_LINE_255",
        "snippet": "int PROBE_END_LINE_255 = 258;\nreturn object_mapper1_expr6_line_255;",
        "begin_line": 297,
        "end_line": 298,
        "comment": "                 19-Apr-2016, tatu: ReferenceType like Optional also requires similar handling:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "RootNameLookup rootNames",
        "snippet": "RootNameLookup rootNames = new RootNameLookup();\n_serializationConfig = new SerializationConfig(src._serializationConfig,\n_mixIns, rootNames, _configOverrides);",
        "begin_line": 547,
        "end_line": 549,
        "comment": "    \n     * Copy-constructor, mostly used to support {@link #copy}.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "Set<Object> reg",
        "snippet": "Set<Object> reg = src._registeredModuleTypes;\nif (reg == null) {\n_registeredModuleTypes = null;",
        "begin_line": 559,
        "end_line": 561,
        "comment": "         as per [databind#922], [databind#1078] make sure to copy registered modules as appropriate"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_START_LINE_548",
        "snippet": "int PROBE_START_LINE_548 = 555;\ncom.fasterxml.jackson.core.JsonFactory p_jf_620_line_548 = jf;",
        "begin_line": 582,
        "end_line": 583,
        "comment": "    \n     * Constructs instance that uses specified {@link JsonFactory}\n     * for constructing necessary {@link JsonParser}s and/or\n     * {@link JsonGenerator}s, and uses given providers for accessing\n     * serializers and deserializers.\n     * \n     * @param jf JsonFactory to use: if null, a new {@link MappingJsonFactory} will be constructed\n     * @param sp SerializerProvider to use: if null, a {@link SerializerProvider} will be constructed\n     * @param dc Blueprint deserialization context instance to use for creating\n     *    actual context objects; if null, will construct standard\n     *    {@link DeserializationContext}\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_END_LINE_1491",
        "snippet": "int PROBE_END_LINE_1491 = 1491;\nreturn object_mapper1_expr40_line_1491;",
        "begin_line": 1590,
        "end_line": 1591,
        "comment": "    \n     * Convenience method that is equivalent to calling\n     *<pre>\n     *  enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);\n     *</pre>\n     *<p>\n     * NOTE: use of Default Typing can be a potential security risk if incoming\n     * content comes from untrusted sources, and it is recommended that this\n     * is either not done, or, if enabled, use {@link #setDefaultTyping}\n     * passing a custom {@link TypeResolverBuilder} implementation that white-lists\n     * legal types to use.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_START_LINE_4000",
        "snippet": "int PROBE_START_LINE_4000 = 4000;\ncom.fasterxml.jackson.core.JsonParser v_p_937_line_4000 = p;",
        "begin_line": 4149,
        "end_line": 4150,
        "comment": "         Need to consume the token too"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_END_LINE_4006",
        "snippet": "int PROBE_END_LINE_4006 = 4016;\nif (object_mapper1_expr56_line_4006) {\nresult = null;",
        "begin_line": 4186,
        "end_line": 4188,
        "comment": "                 Ask JsonDeserializer what 'null value' to use:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "JsonDeserializer<Object> deser",
        "snippet": "JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType);\nif (cfg.useRootWrapping()) {\nresult = _unwrapAndDeserialize(p, ctxt, cfg, valueType, deser);",
        "begin_line": 4190,
        "end_line": 4192,
        "comment": "                 Ask JsonDeserializer what 'null value' to use:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_START_LINE_25",
        "snippet": "int PROBE_START_LINE_25 = 25;\n\nprivate static final com.fasterxml.jackson.databind.util.Annotations annotated_class_resolver1_expr1_line_25 = AnnotationCollector\n.emptyAnnotations();",
        "begin_line": 25,
        "end_line": 28,
        "comment": "\n * Helper class that contains logic for resolving annotations to construct\n * {@link AnnotatedClass} instances.\n *\n * @since 2.9\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_START_LINE_37",
        "snippet": "int PROBE_START_LINE_37 = 37;\nMapperConfig<?> p_config_3385_line_37 = config;",
        "begin_line": 44,
        "end_line": 45,
        "comment": "\n * Helper class that contains logic for resolving annotations to construct\n * {@link AnnotatedClass} instances.\n *\n * @since 2.9\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_END_LINE_41",
        "snippet": "int PROBE_END_LINE_41 = 41;\n_bindings = annotated_class_resolver1_expr3_line_41;",
        "begin_line": 65,
        "end_line": 66,
        "comment": "\n * Helper class that contains logic for resolving annotations to construct\n * {@link AnnotatedClass} instances.\n *\n * @since 2.9\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "boolean annotated_class_resolver1_expr5_line_42",
        "snippet": "boolean annotated_class_resolver1_expr5_line_42 = p_config_3385_line_42.isAnnotationProcessingEnabled();\ncom.fasterxml.jackson.databind.AnnotationIntrospector annotated_class_resolver1_expr4_line_42 = annotated_class_resolver1_expr5_line_42\n? config.getAnnotationIntrospector()\n: null;",
        "begin_line": 69,
        "end_line": 72,
        "comment": "\n * Helper class that contains logic for resolving annotations to construct\n * {@link AnnotatedClass} instances.\n *\n * @since 2.9\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_START_LINE_66",
        "snippet": "int PROBE_START_LINE_66 = 68;\ncom.fasterxml.jackson.databind.JavaType p_for_type_3399_line_66 = forType;",
        "begin_line": 103,
        "end_line": 104,
        "comment": "\n * Helper class that contains logic for resolving annotations to construct\n * {@link AnnotatedClass} instances.\n *\n * @since 2.9\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_END_LINE_66",
        "snippet": "int PROBE_END_LINE_66 = 68;\nif (annotated_class_resolver1_expr8_line_66) {\nreturn createArrayType(config, forType.getRawClass());",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\n * Helper class that contains logic for resolving annotations to construct\n * {@link AnnotatedClass} instances.\n *\n * @since 2.9\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_START_LINE_104",
        "snippet": "int PROBE_START_LINE_104 = 104;\nClass<?> p_raw_3411_line_104 = raw;",
        "begin_line": 161,
        "end_line": 162,
        "comment": "    \n     * Internal helper method used for resolving a small set of \"primordial\" types for which\n     * we do not accept any annotation information or overrides. \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_END_LINE_104",
        "snippet": "int PROBE_END_LINE_104 = 104;\nreturn new AnnotatedClass(p_raw_3411_line_104);",
        "begin_line": 163,
        "end_line": 164,
        "comment": "    \n     * Internal helper method used for resolving a small set of \"primordial\" types for which\n     * we do not accept any annotation information or overrides. \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_START_LINE_116",
        "snippet": "int PROBE_START_LINE_116 = 116;\ncom.fasterxml.jackson.databind.JavaType f__type_3389_line_116 = _type;",
        "begin_line": 176,
        "end_line": 177,
        "comment": "    \n     * Internal helper method used for resolving array types, unless they happen\n     * to have associated mix-in to apply.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_START_LINE_117",
        "snippet": "int PROBE_START_LINE_117 = 119;\ncom.fasterxml.jackson.databind.JavaType f__type_3389_line_117 = _type;",
        "begin_line": 182,
        "end_line": 183,
        "comment": "    \n     * Internal helper method used for resolving array types, unless they happen\n     * to have associated mix-in to apply.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "List<JavaType> superTypes",
        "snippet": "List<JavaType> superTypes = Collections.<JavaType>emptyList();\nreturn new AnnotatedClass(null, _class, superTypes, _primaryMixin,\nresolveClassAnnotations(superTypes),\n_bindings, _intr, _config, _config.getTypeFactory());",
        "begin_line": 195,
        "end_line": 198,
        "comment": "    \n     * Internal helper method used for resolving array types, unless they happen\n     * to have associated mix-in to apply.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_START_LINE_139",
        "snippet": "int PROBE_START_LINE_139 = 139;\ncom.fasterxml.jackson.databind.JavaType p_property_type_2270_line_139 = propertyType;",
        "begin_line": 150,
        "end_line": 151,
        "comment": "    \n     * Method called to get hold of a deserializer for a value of given type;\n     * or if no such deserializer can be found, a default handler (which\n     * may do a best-effort generic serialization or just simply\n     * throw an exception when invoked).\n     *<p>\n     * Note: this method is only called for value types; not for keys.\n     * Key deserializers can be accessed using {@link #findKeyDeserializer}.\n     *<p>\n     * Note also that deserializer returned is guaranteed to be resolved\n     * (if it is of type {@link ResolvableDeserializer}), but\n     * not contextualized (wrt {@link ContextualDeserializer}): caller\n     * has to handle latter if necessary.\n     *\n     * @param ctxt Deserialization context\n     * @param propertyType Declared type of the value to deserializer (obtained using\n     *   'setter' method signature and/or type annotations\n     *\n     * @throws JsonMappingException if there are fatal problems with\n     *   accessing suitable deserializer; including that of not\n     *   finding any serializer\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_START_LINE_204",
        "snippet": "int PROBE_START_LINE_204 = 206;\ncom.fasterxml.jackson.databind.JavaType p_type_2278_line_204 = type;",
        "begin_line": 238,
        "end_line": 239,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "boolean deserializer_cache1_expr8_line_207",
        "snippet": "boolean deserializer_cache1_expr8_line_207 = _hasCustomHandlers(p_type_2278_line_207);\nint PROBE_END_LINE_207 = 209;",
        "begin_line": 247,
        "end_line": 248,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_START_LINE_234",
        "snippet": "int PROBE_START_LINE_234 = 234;\nHashMap<com.fasterxml.jackson.databind.JavaType, JsonDeserializer<Object>> f__incomplete_deserializers_2267_line_234 = _incompleteDeserializers;",
        "begin_line": 294,
        "end_line": 295,
        "comment": "\t\t\t Ok, then: could it be that due to a race condition, deserializer can now be found?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int deserializer_cache1_expr12_line_234",
        "snippet": "int deserializer_cache1_expr12_line_234 = f__incomplete_deserializers_2267_line_234.size();\nint PROBE_END_LINE_234 = 234;",
        "begin_line": 296,
        "end_line": 297,
        "comment": "\t\t\t Ok, then: could it be that due to a race condition, deserializer can now be found?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int count",
        "snippet": "int count = deserializer_cache1_expr12_line_234;\nint PROBE_START_LINE_236 = 241;",
        "begin_line": 298,
        "end_line": 299,
        "comment": "\t\t\t Ok, then: could it be that due to a race condition, deserializer can now be found?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_START_LINE_244",
        "snippet": "int PROBE_START_LINE_244 = 244;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_2279_line_244 = ctxt;",
        "begin_line": 322,
        "end_line": 323,
        "comment": "             Nope: need to create and possibly cache"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_END_LINE_244",
        "snippet": "int PROBE_END_LINE_244 = 244;\nreturn deserializer_cache1_expr16_line_244;",
        "begin_line": 328,
        "end_line": 329,
        "comment": "             Nope: need to create and possibly cache"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "boolean deserializer_cache1_expr18_line_247",
        "snippet": "boolean deserializer_cache1_expr18_line_247 = v_count_2283_line_247 == 0;\nboolean deserializer_cache1_expr19_line_247 = true;",
        "begin_line": 333,
        "end_line": 334,
        "comment": "             Nope: need to create and possibly cache"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_END_LINE_248",
        "snippet": "int PROBE_END_LINE_248 = 248;\nf__incomplete_deserializers_2267_line_248.clear();",
        "begin_line": 347,
        "end_line": 348,
        "comment": "\t\t\t\t also: any deserializers that have been created are complete by now"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_START_LINE_264",
        "snippet": "int PROBE_START_LINE_264 = 264;\ncom.fasterxml.jackson.databind.DeserializationContext p_ctxt_2284_line_264 = ctxt;",
        "begin_line": 364,
        "end_line": 365,
        "comment": "    \n     * Method that handles actual construction (via factory) and caching (both\n     * intermediate and eventual)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_END_LINE_264",
        "snippet": "int PROBE_END_LINE_264 = 264;\ndeser = deserializer_cache1_expr22_line_264;",
        "begin_line": 370,
        "end_line": 371,
        "comment": "    \n     * Method that handles actual construction (via factory) and caching (both\n     * intermediate and eventual)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "boolean deserializer_cache1_expr23_line_270",
        "snippet": "boolean deserializer_cache1_expr23_line_270 = v_deser_2287_line_270 == null;\nint PROBE_END_LINE_270 = 272;",
        "begin_line": 379,
        "end_line": 380,
        "comment": "             are what caller is expected to handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_START_LINE_277",
        "snippet": "int PROBE_START_LINE_277 = 277;\ncom.fasterxml.jackson.databind.JavaType p_type_2286_line_277 = type;",
        "begin_line": 384,
        "end_line": 385,
        "comment": "             are what caller is expected to handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "boolean deserializer_cache1_expr27_line_277",
        "snippet": "boolean deserializer_cache1_expr27_line_277 = true;\nif (deserializer_cache1_expr25_line_277) {\nJsonDeserializer<Object> v_deser_2287_line_277 = deser;",
        "begin_line": 388,
        "end_line": 390,
        "comment": "             are what caller is expected to handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_END_LINE_277",
        "snippet": "int PROBE_END_LINE_277 = 277;\n/* cache resulting deserializer? always true for \"plain\" BeanDeserializer\n* (but can be re-defined for sub-classes by using @JsonCachable!)\n*/\n// 27-Mar-2015, tatu: As per [databind#735], avoid caching types with custom value desers\nboolean addToCache = deserializer_cache1_expr24_line_277;",
        "begin_line": 395,
        "end_line": 400,
        "comment": "             are what caller is expected to handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "boolean deserializer_cache1_expr28_line_291",
        "snippet": "boolean deserializer_cache1_expr28_line_291 = v_deser_2287_line_291 instanceof ResolvableDeserializer;\nint PROBE_END_LINE_291 = 295;",
        "begin_line": 404,
        "end_line": 405,
        "comment": "         27-Mar-2015, tatu: As per [databind#735], avoid caching types with custom value desers"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "JsonDeserializer<Object> v_deser_2287_line_292",
        "snippet": "JsonDeserializer<Object> v_deser_2287_line_292 = deser;\nint PROBE_END_LINE_292 = 292;",
        "begin_line": 422,
        "end_line": 423,
        "comment": "        /* Need to resolve? Mostly done for bean deserializers; required for\n         * resolving cyclic references.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_START_LINE_293",
        "snippet": "int PROBE_START_LINE_293 = 293;\nJsonDeserializer<Object> v_deser_2287_line_293 = deser;",
        "begin_line": 425,
        "end_line": 426,
        "comment": "        /* Need to resolve? Mostly done for bean deserializers; required for\n         * resolving cyclic references.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "boolean deserializer_cache1_expr39_line_321",
        "snippet": "boolean deserializer_cache1_expr39_line_321 = false;\nif (!deserializer_cache1_expr37_line_321) {\ndeserializer_cache1_expr38_line_321 = type.isMapLikeType();",
        "begin_line": 480,
        "end_line": 482,
        "comment": "    \n     * Method that does the heavy lifting of checking for per-type annotations,\n     * find out full type, and figure out which actual factory method\n     * to call.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_END_LINE_321",
        "snippet": "int PROBE_END_LINE_321 = 323;\n// First things first: do we need to use abstract type mapping?\nif (deserializer_cache1_expr36_line_321) {\nint PROBE_START_LINE_322 = 322;",
        "begin_line": 489,
        "end_line": 492,
        "comment": "    \n     * Method that does the heavy lifting of checking for per-type annotations,\n     * find out full type, and figure out which actual factory method\n     * to call.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "BeanDescription deserializer_cache1_expr41_line_324",
        "snippet": "BeanDescription deserializer_cache1_expr41_line_324 = v_config_2292_line_324.introspect(p_type_2291_line_324);\nint PROBE_END_LINE_324 = 324;",
        "begin_line": 504,
        "end_line": 505,
        "comment": "\t\t First things first: do we need to use abstract type mapping?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "BeanDescription beanDesc",
        "snippet": "BeanDescription beanDesc = deserializer_cache1_expr41_line_324;\nint PROBE_START_LINE_326 = 327;",
        "begin_line": 506,
        "end_line": 507,
        "comment": "\t\t First things first: do we need to use abstract type mapping?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_END_LINE_340",
        "snippet": "int PROBE_END_LINE_340 = 340;\n// We may also have a Builder type to consider...\nClass<?> builder = deserializer_cache1_expr48_line_340;",
        "begin_line": 546,
        "end_line": 548,
        "comment": "\t\t If not, may have further type-modification annotations to check:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "signature": "int PROBE_START_LINE_341",
        "snippet": "int PROBE_START_LINE_341 = 344;\nClass<?> v_builder_2296_line_341 = builder;",
        "begin_line": 549,
        "end_line": 550,
        "comment": "\t\t We may also have a Builder type to consider..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ext/Java7Support.java",
        "signature": "Java7Support impl",
        "snippet": "Java7Support impl = null;\ntry {\nint PROBE_START_LINE_24 = 24;",
        "begin_line": 22,
        "end_line": 24,
        "comment": "\n * To support Java7-incomplete platforms, we will offer support for JDK 7\n * annotations through this class, loaded dynamically; if loading fails,\n * support will be missing. This class is the non-JDK-7-dependent API,\n * and {@link Java7SupportImpl} is JDK7-dependent implementation of\n * functionality.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ext/Java7Support.java",
        "signature": "int PROBE_START_LINE_25",
        "snippet": "int PROBE_START_LINE_25 = 25;\nClass<?> v_cls_3289_line_25 = cls;",
        "begin_line": 29,
        "end_line": 30,
        "comment": "\n * To support Java7-incomplete platforms, we will offer support for JDK 7\n * annotations through this class, loaded dynamically; if loading fails,\n * support will be missing. This class is the non-JDK-7-dependent API,\n * and {@link Java7SupportImpl} is JDK7-dependent implementation of\n * functionality.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ext/Java7Support.java",
        "signature": "int PROBE_END_LINE_25",
        "snippet": "int PROBE_END_LINE_25 = 25;\nimpl = (Java7Support) java7_support1_expr4_line_25;",
        "begin_line": 32,
        "end_line": 33,
        "comment": "\n * To support Java7-incomplete platforms, we will offer support for JDK 7\n * annotations through this class, loaded dynamically; if loading fails,\n * support will be missing. This class is the non-JDK-7-dependent API,\n * and {@link Java7SupportImpl} is JDK7-dependent implementation of\n * functionality.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.CollectorBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/CollectorBase.java",
        "signature": "int PROBE_START_LINE_19",
        "snippet": "int PROBE_START_LINE_19 = 19;\ncom.fasterxml.jackson.databind.AnnotationIntrospector p_intr_3860_line_19 = intr;",
        "begin_line": 19,
        "end_line": 20,
        "comment": " @since 2.9"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.CollectorBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/introspect/CollectorBase.java",
        "signature": "Annotation ann",
        "snippet": "Annotation ann = anns[i];\nc = c.addOrOverride(ann);",
        "begin_line": 33,
        "end_line": 34,
        "comment": "       Annotation overrides (\"mix over\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "signature": "int PROBE_START_LINE_429",
        "snippet": "int PROBE_START_LINE_429 = 429;\nboolean p_default_state_1096_line_429 = defaultState;",
        "begin_line": 429,
        "end_line": 430,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "signature": "int PROBE_END_LINE_429",
        "snippet": "int PROBE_END_LINE_429 = 429;\n_defaultState = p_default_state_1096_line_429;",
        "begin_line": 431,
        "end_line": 432,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "signature": "int PROBE_START_LINE_430",
        "snippet": "int PROBE_START_LINE_430 = 430;\nint serialization_feature1_expr3_line_430 = ordinal();",
        "begin_line": 433,
        "end_line": 434,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "signature": "int PROBE_END_LINE_430",
        "snippet": "int PROBE_END_LINE_430 = 430;\n_mask = serialization_feature1_expr1_line_430;",
        "begin_line": 437,
        "end_line": 438,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-107/result/src/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
        "signature": "int PROBE_START_LINE_43",
        "snippet": "int PROBE_START_LINE_43 = 43;\nboolean p_for_primitive_4998_line_43 = forPrimitive;",
        "begin_line": 43,
        "end_line": 44,
        "comment": "    \n     * Whether type serialized is primitive (boolean) or wrapper\n     * (java.lang.Boolean); if true, former, if false, latter.\n     "
    }
]