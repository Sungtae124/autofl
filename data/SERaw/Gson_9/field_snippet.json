[
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int PROBE_START_LINE_147",
        "snippet": "int PROBE_START_LINE_147 = 147;\nString[] f_replacement_chars_1_line_147 = REPLACEMENT_CHARS;",
        "begin_line": 147,
        "end_line": 148,
        "comment": "  /*\n   * From RFC 7159, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http:code.google.com/p/google-gson/issues/detail?id=341\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int v_i_2_line_147",
        "snippet": "int v_i_2_line_147 = i;\nString json_writer1_expr4_line_147 = String.format(\"\\\\u%04x\", (int) i);",
        "begin_line": 149,
        "end_line": 150,
        "comment": "  /*\n   * From RFC 7159, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http:code.google.com/p/google-gson/issues/detail?id=341\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int PROBE_END_LINE_147",
        "snippet": "int PROBE_END_LINE_147 = 147;\nf_replacement_chars_1_line_147[v_i_2_line_147] = json_writer1_expr4_line_147;",
        "begin_line": 151,
        "end_line": 152,
        "comment": "  /*\n   * From RFC 7159, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http:code.google.com/p/google-gson/issues/detail?id=341\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int PROBE_START_LINE_149",
        "snippet": "int PROBE_START_LINE_149 = 149;\nString[] f_replacement_chars_1_line_149 = REPLACEMENT_CHARS;",
        "begin_line": 154,
        "end_line": 155,
        "comment": "  /*\n   * From RFC 7159, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http:code.google.com/p/google-gson/issues/detail?id=341\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int PROBE_END_LINE_149",
        "snippet": "int PROBE_END_LINE_149 = 149;\nf_replacement_chars_1_line_149['\"'] = \"\\\\\\\"\";",
        "begin_line": 156,
        "end_line": 157,
        "comment": "  /*\n   * From RFC 7159, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http:code.google.com/p/google-gson/issues/detail?id=341\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int PROBE_START_LINE_150",
        "snippet": "int PROBE_START_LINE_150 = 150;\nString[] f_replacement_chars_1_line_150 = REPLACEMENT_CHARS;",
        "begin_line": 158,
        "end_line": 159,
        "comment": "  /*\n   * From RFC 7159, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http:code.google.com/p/google-gson/issues/detail?id=341\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int PROBE_END_LINE_150",
        "snippet": "int PROBE_END_LINE_150 = 150;\nf_replacement_chars_1_line_150['\\\\'] = \"\\\\\\\\\";",
        "begin_line": 160,
        "end_line": 161,
        "comment": "  /*\n   * From RFC 7159, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http:code.google.com/p/google-gson/issues/detail?id=341\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int PROBE_START_LINE_151",
        "snippet": "int PROBE_START_LINE_151 = 151;\nString[] f_replacement_chars_1_line_151 = REPLACEMENT_CHARS;",
        "begin_line": 162,
        "end_line": 163,
        "comment": "  /*\n   * From RFC 7159, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http:code.google.com/p/google-gson/issues/detail?id=341\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int PROBE_START_LINE_152",
        "snippet": "int PROBE_START_LINE_152 = 152;\nString[] f_replacement_chars_1_line_152 = REPLACEMENT_CHARS;",
        "begin_line": 166,
        "end_line": 167,
        "comment": "  /*\n   * From RFC 7159, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http:code.google.com/p/google-gson/issues/detail?id=341\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int PROBE_END_LINE_152",
        "snippet": "int PROBE_END_LINE_152 = 152;\nf_replacement_chars_1_line_152['\\b'] = \"\\\\b\";",
        "begin_line": 168,
        "end_line": 169,
        "comment": "  /*\n   * From RFC 7159, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http:code.google.com/p/google-gson/issues/detail?id=341\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int PROBE_START_LINE_153",
        "snippet": "int PROBE_START_LINE_153 = 153;\nString[] f_replacement_chars_1_line_153 = REPLACEMENT_CHARS;",
        "begin_line": 170,
        "end_line": 171,
        "comment": "  /*\n   * From RFC 7159, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http:code.google.com/p/google-gson/issues/detail?id=341\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int PROBE_START_LINE_156",
        "snippet": "int PROBE_START_LINE_156 = 156;\nString[] f_replacement_chars_1_line_156 = REPLACEMENT_CHARS;",
        "begin_line": 182,
        "end_line": 183,
        "comment": "  /*\n   * From RFC 7159, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http:code.google.com/p/google-gson/issues/detail?id=341\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int PROBE_END_LINE_157",
        "snippet": "int PROBE_END_LINE_157 = 157;\nf_html_safe_replacement_chars_3_line_157['<'] = \"\\\\u003c\";",
        "begin_line": 189,
        "end_line": 190,
        "comment": "  /*\n   * From RFC 7159, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http:code.google.com/p/google-gson/issues/detail?id=341\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int PROBE_END_LINE_159",
        "snippet": "int PROBE_END_LINE_159 = 159;\nf_html_safe_replacement_chars_3_line_159['&'] = \"\\\\u0026\";",
        "begin_line": 197,
        "end_line": 198,
        "comment": "  /*\n   * From RFC 7159, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http:code.google.com/p/google-gson/issues/detail?id=341\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int PROBE_END_LINE_160",
        "snippet": "int PROBE_END_LINE_160 = 160;\nf_html_safe_replacement_chars_3_line_160['='] = \"\\\\u003d\";",
        "begin_line": 201,
        "end_line": 202,
        "comment": "  /*\n   * From RFC 7159, \"All Unicode characters may be placed within the\n   * quotation marks except for the characters that must be escaped:\n   * quotation mark, reverse solidus, and the control characters\n   * (U+0000 through U+001F).\"\n   *\n   * We also escape '\\u2028' and '\\u2029', which JavaScript interprets as\n   * newline characters. This prevents eval() from failing with a syntax\n   * error. http:code.google.com/p/google-gson/issues/detail?id=341\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int context",
        "snippet": "int context = peek();\nif (context != nonempty && context != empty) {\nthrow new IllegalStateException(\"Nesting problem.\");",
        "begin_line": 403,
        "end_line": 405,
        "comment": "  \n   * Closes the current scope by appending any necessary whitespace and the\n   * given bracket.\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int f_stack_size_5_line_376",
        "snippet": "int f_stack_size_5_line_376 = stackSize;\nint json_writer1_expr52_line_376 = f_stack_size_5_line_376 - 1;",
        "begin_line": 464,
        "end_line": 465,
        "comment": "  \n   * Replace the value on the top of the stack with the given value.\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int p_top_of_stack_23_line_376",
        "snippet": "int p_top_of_stack_23_line_376 = topOfStack;\nint PROBE_END_LINE_376 = 376;",
        "begin_line": 466,
        "end_line": 467,
        "comment": "  \n   * Replace the value on the top of the stack with the given value.\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "String string",
        "snippet": "String string = value.toString();\nif (!lenient\n&& (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\nthrow new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);",
        "begin_line": 620,
        "end_line": 623,
        "comment": "  \n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   "
    },
    {
        "class_name": "com.google.gson.stream.JsonWriter",
        "src_path": "/data/bug_db/subjects/defects4j/Gson-9/result/src/com/google/gson/stream/JsonWriter.java",
        "signature": "int size",
        "snippet": "int size = stackSize;\nif (size > 1 || size == 1 && stack[size - 1] != NONEMPTY_DOCUMENT) {\nthrow new IOException(\"Incomplete document\");",
        "begin_line": 649,
        "end_line": 651,
        "comment": "  \n   * Flushes and closes this writer and the underlying {@link Writer}.\n   *\n   * @throws IOException if the JSON document is incomplete.\n   "
    }
]