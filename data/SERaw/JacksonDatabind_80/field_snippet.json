[
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "int PROBE_END_LINE_70",
        "snippet": "int PROBE_END_LINE_70 = 70;\n_java7Helper = v_x_1915_line_70;",
        "begin_line": 82,
        "end_line": 83,
        "comment": "      here we do not really need any handling; but for extra-safety use try-catch"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
        "signature": "int PROBE_START_LINE_1336",
        "snippet": "int PROBE_START_LINE_1336 = 1336;\ncom.fasterxml.jackson.databind.introspect.Annotated p_annotated_115_line_1336 = annotated;",
        "begin_line": 1336,
        "end_line": 1337,
        "comment": "    \n     * Method that should be used by sub-classes for ALL\n     * annotation access;\n     * overridable so \n     * that sub-classes may, if they choose to, mangle actual access to\n     * block access (\"hide\" annotations) or perhaps change it.\n     *<p>\n     * Default implementation is simply:\n     *<code>\n     *  return annotated.getAnnotation(annoClass);\n     *</code>\n     * \n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "signature": "int PROBE_START_LINE_115",
        "snippet": "int PROBE_START_LINE_115 = 115;\nint serialization_config1_expr3_line_115 = collectFeatureDefaults(SerializationFeature.class);",
        "begin_line": 116,
        "end_line": 117,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "signature": "int PROBE_END_LINE_115",
        "snippet": "int PROBE_END_LINE_115 = 115;\n_serFeatures = serialization_config1_expr3_line_115;",
        "begin_line": 118,
        "end_line": 119,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "signature": "int PROBE_START_LINE_117",
        "snippet": "int PROBE_START_LINE_117 = 117;\ncom.fasterxml.jackson.core.PrettyPrinter f_default_pretty_printer_835_line_117 = DEFAULT_PRETTY_PRINTER;",
        "begin_line": 121,
        "end_line": 122,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "signature": "int PROBE_START_LINE_131",
        "snippet": "int PROBE_START_LINE_131 = 131;\nMapperConfig<?> p_config_2155_line_131 = config;",
        "begin_line": 136,
        "end_line": 137,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "signature": "int PROBE_END_LINE_131",
        "snippet": "int PROBE_END_LINE_131 = 131;\nfinal AnnotationIntrospector ai = std_subtype_resolver1_expr1_line_131;",
        "begin_line": 140,
        "end_line": 141,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "signature": "int PROBE_START_LINE_132",
        "snippet": "int PROBE_START_LINE_132 = 132;\ncom.fasterxml.jackson.databind.JavaType p_base_type_2157_line_132 = baseType;",
        "begin_line": 142,
        "end_line": 143,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "signature": "int PROBE_END_LINE_132",
        "snippet": "int PROBE_END_LINE_132 = 132;\nClass<?> rawBase = std_subtype_resolver1_expr2_line_132;",
        "begin_line": 145,
        "end_line": 146,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "signature": "NamedType prev",
        "snippet": "NamedType prev = collectedSubtypes.get(namedType);\nif (!prev.hasName()) {\ncollectedSubtypes.put(namedType, namedType);",
        "begin_line": 249,
        "end_line": 251,
        "comment": "             if so, no recursion; however, may need to update name?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "signature": "Collection<NamedType> st",
        "snippet": "Collection<NamedType> st = ai.findSubtypes(annotatedType);\nif (st != null && !st.isEmpty()) {\nfor (NamedType subtype : st) {\nAnnotatedClass subtypeClass = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\nsubtype.getType());",
        "begin_line": 258,
        "end_line": 262,
        "comment": "         if it wasn't, add and check subtypes recursively"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "signature": "int PROBE_START_LINE_470",
        "snippet": "int PROBE_START_LINE_470 = 470;\nboolean p_default_state_419_line_470 = defaultState;",
        "begin_line": 470,
        "end_line": 471,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "signature": "int PROBE_END_LINE_470",
        "snippet": "int PROBE_END_LINE_470 = 470;\n_defaultState = p_default_state_419_line_470;",
        "begin_line": 472,
        "end_line": 473,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "signature": "int PROBE_START_LINE_471",
        "snippet": "int PROBE_START_LINE_471 = 471;\nint deserialization_feature1_expr3_line_471 = ordinal();",
        "begin_line": 474,
        "end_line": 475,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "signature": "int PROBE_END_LINE_471",
        "snippet": "int PROBE_END_LINE_471 = 471;\n_mask = deserialization_feature1_expr1_line_471;",
        "begin_line": 478,
        "end_line": 479,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_117",
        "snippet": "int PROBE_START_LINE_117 = 117;\nMapperConfig<?> p_config_1812_line_117 = config;",
        "begin_line": 119,
        "end_line": 120,
        "comment": "    \n     * Alternate constructor used in cases where property information is not needed,\n     * only class info.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_119",
        "snippet": "int PROBE_START_LINE_119 = 123;\nMapperConfig<?> f__config_1817_line_119 = _config;",
        "begin_line": 123,
        "end_line": 124,
        "comment": "    \n     * Alternate constructor used in cases where property information is not needed,\n     * only class info.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "boolean basic_bean_description1_expr3_line_119",
        "snippet": "boolean basic_bean_description1_expr3_line_119 = f__config_1817_line_119 == null;\nint PROBE_END_LINE_119 = 123;",
        "begin_line": 125,
        "end_line": 126,
        "comment": "    \n     * Alternate constructor used in cases where property information is not needed,\n     * only class info.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_67",
        "snippet": "int PROBE_END_LINE_67 = 67;\n\nprivate final static Class<?> CLS_BOOL = f_type_1846_line_67;",
        "begin_line": 79,
        "end_line": 81,
        "comment": "       parts of processing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_68",
        "snippet": "int PROBE_START_LINE_68 = 68;\n\nprivate static final Class<Integer> f_type_1848_line_68 = Integer.TYPE;",
        "begin_line": 82,
        "end_line": 84,
        "comment": "       parts of processing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_68",
        "snippet": "int PROBE_END_LINE_68 = 68;\n\nprivate final static Class<?> CLS_INT = f_type_1848_line_68;",
        "begin_line": 86,
        "end_line": 88,
        "comment": "       parts of processing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_69",
        "snippet": "int PROBE_END_LINE_69 = 69;\n\nprivate final static Class<?> CLS_LONG = f_type_1850_line_69;",
        "begin_line": 93,
        "end_line": 95,
        "comment": "       parts of processing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_78",
        "snippet": "int PROBE_END_LINE_78 = 78;\n\n// note: these are primitive, hence no super types\nprotected final static SimpleType CORE_TYPE_BOOL = new SimpleType(f_cls_bool_2913_line_78);",
        "begin_line": 107,
        "end_line": 110,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_88",
        "snippet": "int PROBE_START_LINE_88 = 94;\n\nprotected static final Class<?> f_cls_comparable_2910_line_94 = CLS_COMPARABLE;",
        "begin_line": 144,
        "end_line": 146,
        "comment": "\t @since 2.7"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_88",
        "snippet": "int PROBE_END_LINE_88 = 94;\n\n/**\n* Cache {@link Comparable} because it is both parameteric (relatively costly to\n* resolve) and mostly useless (no special handling), better handle directly\n*\n* @since 2.7\n*/\nprotected final static SimpleType CORE_TYPE_COMPARABLE = new SimpleType(f_cls_comparable_2910_line_94);",
        "begin_line": 148,
        "end_line": 156,
        "comment": "\t @since 2.7"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_96",
        "snippet": "int PROBE_START_LINE_96 = 102;\n\nprotected static final Class<?> f_cls_enum_2912_line_102 = CLS_ENUM;",
        "begin_line": 158,
        "end_line": 160,
        "comment": "\t\n     * Cache {@link Comparable} because it is both parameteric (relatively costly to\n     * resolve) and mostly useless (no special handling), better handle directly\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "List<JavaType> typeParams",
        "snippet": "List<JavaType> typeParams = bindings.getTypeParameters();\n// ok to have no types (\"raw\")\nJavaType ct;",
        "begin_line": 1165,
        "end_line": 1167,
        "comment": "         ok to have no types (\"raw\")"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "JavaType result",
        "snippet": "JavaType result = _findWellKnownSimple(raw);\nif (result != null) {\nreturn result;",
        "begin_line": 1190,
        "end_line": 1192,
        "comment": "    \n     * Factory method to call when no special {@link JavaType} is needed,\n     * no generic parameters are passed. Default implementation may check\n     * pre-constructed values for \"well-known\" types, but if none found\n     * will simply call {@link #_newSimpleType}\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_1138",
        "snippet": "int PROBE_START_LINE_1138 = 1145;\nClass<?> p_clz_3032_line_1138 = clz;",
        "begin_line": 1234,
        "end_line": 1235,
        "comment": "    \n     * Helper method called to see if requested, non-generic-parameterized\n     * type is one of common, \"well-known\" types, instances of which are\n     * pre-constructed and do not need dynamic caching.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_1143",
        "snippet": "int PROBE_END_LINE_1143 = 1143;\nreturn f_core_type_string_2919_line_1143;",
        "begin_line": 1249,
        "end_line": 1250,
        "comment": "    \n     * Helper method called to see if requested, non-generic-parameterized\n     * type is one of common, \"well-known\" types, instances of which are\n     * pre-constructed and do not need dynamic caching.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "boolean type_factory1_expr28_line_1144",
        "snippet": "boolean type_factory1_expr28_line_1144 = p_clz_3032_line_1144 == f_cls_object_2909_line_1144;\nif (type_factory1_expr28_line_1144)\n{\ncom.fasterxml.jackson.databind.type.SimpleType f_core_type_object_2920_line_1144 = CORE_TYPE_OBJECT;",
        "begin_line": 1255,
        "end_line": 1258,
        "comment": "    \n     * Helper method called to see if requested, non-generic-parameterized\n     * type is one of common, \"well-known\" types, instances of which are\n     * pre-constructed and do not need dynamic caching.\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_1165",
        "snippet": "int PROBE_START_LINE_1165 = 1188;\njava.lang.reflect.Type p_type_3034_line_1165 = type;",
        "begin_line": 1281,
        "end_line": 1282,
        "comment": "    \n     * Factory method that can be used if type information is passed\n     * as Java typing returned from <code>getGenericXxx</code> methods\n     * (usually for a return or argument type).\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "boolean type_factory1_expr29_line_1165",
        "snippet": "boolean type_factory1_expr29_line_1165 = p_type_3034_line_1165 instanceof Class<?>;\nint PROBE_END_LINE_1165 = 1188;",
        "begin_line": 1283,
        "end_line": 1284,
        "comment": "    \n     * Factory method that can be used if type information is passed\n     * as Java typing returned from <code>getGenericXxx</code> methods\n     * (usually for a return or argument type).\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_1167",
        "snippet": "int PROBE_END_LINE_1167 = 1167;\n// Important: remove possible bindings since this is type-erased thingy\nresultType = type_factory1_expr30_line_1167;",
        "begin_line": 1293,
        "end_line": 1295,
        "comment": "\t\t simple class?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "JavaType t",
        "snippet": "JavaType t = mod.modifyType(resultType, type, b, this);\nif (t == null) {\nthrow new IllegalStateException(String.format(\n\"TypeModifier %s (of type %s) return null for type %s\",\nmod, mod.getClass().getName(), resultType));",
        "begin_line": 1330,
        "end_line": 1334,
        "comment": "\t\t/* 21-Feb-2016, nateB/tatu: as per [databind#1129] (applied for 2.7.2),\n         *   we do need to let all kinds of types to be refined, esp. for Scala module.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_1207",
        "snippet": "int PROBE_END_LINE_1207 = 1207;\nreturn v_result_type_3036_line_1207;",
        "begin_line": 1341,
        "end_line": 1342,
        "comment": "\t\t/* 21-Feb-2016, nateB/tatu: as per [databind#1129] (applied for 2.7.2),\n         *   we do need to let all kinds of types to be refined, esp. for Scala module.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "JavaType result",
        "snippet": "JavaType result = type_factory1_expr33_line_1217;\nint PROBE_START_LINE_1218 = 1220;",
        "begin_line": 1356,
        "end_line": 1357,
        "comment": "\t\t Very first thing: small set of core types we know well:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "boolean type_factory1_expr34_line_1218",
        "snippet": "boolean type_factory1_expr34_line_1218 = v_result_3040_line_1218 != null;\nint PROBE_END_LINE_1218 = 1220;",
        "begin_line": 1359,
        "end_line": 1360,
        "comment": "\t\t Very first thing: small set of core types we know well:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_1219",
        "snippet": "int PROBE_END_LINE_1219 = 1219;\nreturn v_result_3040_line_1219;",
        "begin_line": 1364,
        "end_line": 1365,
        "comment": "\t\t Very first thing: small set of core types we know well:"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "signature": "int PROBE_START_LINE_27",
        "snippet": "int PROBE_START_LINE_27 = 30;\n\nprotected static final com.fasterxml.jackson.databind.cfg.ConfigOverride mapper_config_base1_expr1_line_30 = ConfigOverride\n.empty();",
        "begin_line": 27,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "signature": "int PROBE_END_LINE_27",
        "snippet": "int PROBE_END_LINE_27 = 30;\n\n/**\n* @since 2.9\n*/\nprotected final static ConfigOverride EMPTY_OVERRIDE = mapper_config_base1_expr1_line_30;",
        "begin_line": 32,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "signature": "int PROBE_START_LINE_35",
        "snippet": "int PROBE_START_LINE_35 = 35;\nint p_initial_entries_3200_line_35 = initialEntries;",
        "begin_line": 34,
        "end_line": 35,
        "comment": "\n * Helper for simple bounded maps used for reusing lookup values.\n *<p>\n * Note that serialization behavior is such that contents are NOT serialized,\n * on assumption that all use cases are for caching where persistence\n * does not make sense. The only thing serialized is the cache size of Map.\n *<p>\n * NOTE: since version 2.4.2, this is <b>NOT</b> an LRU-based at all; reason\n * being that it is not possible to use JDK components that do LRU _AND_ perform\n * well wrt synchronization on multi-core systems. So we choose efficient synchronization\n * over potentially more efficient handling of entries.\n *<p>\n * And yes, there are efficient LRU implementations such as\n * <a href=\"https:code.google.com/p/concurrentlinkedhashmap/\">concurrentlinkedhashmap</a>;\n * but at this point we really try to keep external deps to minimum. But perhaps\n * a shaded variant may be used one day.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "signature": "int PROBE_END_LINE_35",
        "snippet": "int PROBE_END_LINE_35 = 35;\n// We'll use concurrency level of 4, seems reasonable\n_map = new ConcurrentHashMap<K,V>(p_initial_entries_3200_line_35, 0.8f, 4);",
        "begin_line": 36,
        "end_line": 38,
        "comment": "\n * Helper for simple bounded maps used for reusing lookup values.\n *<p>\n * Note that serialization behavior is such that contents are NOT serialized,\n * on assumption that all use cases are for caching where persistence\n * does not make sense. The only thing serialized is the cache size of Map.\n *<p>\n * NOTE: since version 2.4.2, this is <b>NOT</b> an LRU-based at all; reason\n * being that it is not possible to use JDK components that do LRU _AND_ perform\n * well wrt synchronization on multi-core systems. So we choose efficient synchronization\n * over potentially more efficient handling of entries.\n *<p>\n * And yes, there are efficient LRU implementations such as\n * <a href=\"https:code.google.com/p/concurrentlinkedhashmap/\">concurrentlinkedhashmap</a>;\n * but at this point we really try to keep external deps to minimum. But perhaps\n * a shaded variant may be used one day.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "signature": "int lrumap1_expr5_line_57",
        "snippet": "int lrumap1_expr5_line_57 = f__map_3202_line_57.size();\nint f__max_entries_3203_line_57 = _maxEntries;",
        "begin_line": 63,
        "end_line": 64,
        "comment": "    \n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/jsontype/NamedType.java",
        "signature": "int PROBE_START_LINE_19",
        "snippet": "int PROBE_START_LINE_19 = 19;\nClass<?> p_c_2122_line_19 = c;",
        "begin_line": 19,
        "end_line": 20,
        "comment": "\n * Simple container class for types with optional logical name, used\n * as external identifier\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/jsontype/NamedType.java",
        "signature": "int PROBE_END_LINE_19",
        "snippet": "int PROBE_END_LINE_19 = 19;\n_class = p_c_2122_line_19;",
        "begin_line": 21,
        "end_line": 22,
        "comment": "\n * Simple container class for types with optional logical name, used\n * as external identifier\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/jsontype/NamedType.java",
        "signature": "int PROBE_START_LINE_20",
        "snippet": "int PROBE_START_LINE_20 = 20;\nClass<?> p_c_2122_line_20 = c;",
        "begin_line": 23,
        "end_line": 24,
        "comment": "\n * Simple container class for types with optional logical name, used\n * as external identifier\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/jsontype/NamedType.java",
        "signature": "String named_type1_expr2_line_20",
        "snippet": "String named_type1_expr2_line_20 = p_c_2122_line_20.getName();\nint named_type1_expr1_line_20 = named_type1_expr2_line_20.hashCode();",
        "begin_line": 25,
        "end_line": 26,
        "comment": "\n * Simple container class for types with optional logical name, used\n * as external identifier\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/jsontype/NamedType.java",
        "signature": "int PROBE_END_LINE_20",
        "snippet": "int PROBE_END_LINE_20 = 20;\n_hashCode = named_type1_expr1_line_20;",
        "begin_line": 27,
        "end_line": 28,
        "comment": "\n * Simple container class for types with optional logical name, used\n * as external identifier\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "signature": "int PROBE_START_LINE_84",
        "snippet": "int PROBE_START_LINE_84 = 85;\ncom.fasterxml.jackson.databind.deser.Deserializers[] p_all_additional_deserializers_1106_line_84 = allAdditionalDeserializers;",
        "begin_line": 88,
        "end_line": 89,
        "comment": "    \n     * Copy-constructor that will create an instance that contains defined\n     * set of additional deserializer providers.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "signature": "boolean deserializer_factory_config1_expr9_line_84",
        "snippet": "boolean deserializer_factory_config1_expr9_line_84 = p_all_additional_deserializers_1106_line_84 == null;\nboolean deserializer_factory_config1_expr8_line_84 = (deserializer_factory_config1_expr9_line_84);",
        "begin_line": 90,
        "end_line": 91,
        "comment": "    \n     * Copy-constructor that will create an instance that contains defined\n     * set of additional deserializer providers.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.BeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/BeanDescription.java",
        "signature": "int PROBE_START_LINE_37",
        "snippet": "int PROBE_START_LINE_37 = 37;\ncom.fasterxml.jackson.databind.JavaType p_type_121_line_37 = type;",
        "begin_line": 37,
        "end_line": 38,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
        "signature": "int PROBE_START_LINE_21",
        "snippet": "int PROBE_START_LINE_21 = 21;\n\nstatic final char[] uuidserializer1_expr1_line_21 = \"0123456789abcdef\".toCharArray();",
        "begin_line": 21,
        "end_line": 23,
        "comment": "\n * Specialized {@link JsonSerializer} to output {@link java.util.UUID}s.\n * Beyond optimized access and writing of textual representation (which\n * is the default handling in most cases), it will alternatively\n * allow serialization using raw binary output (as 16-byte block)\n * if underlying data format has efficient means to access that.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "signature": "int PROBE_END_LINE_23",
        "snippet": "int PROBE_END_LINE_23 = 29;\n\n/**\n* Special placeholder value that indicates that name to use should be\n* based on the standard heuristics. This can be different from returning\n* null, as null means \"no information available, whereas this value\n* indicates explicit defaulting.\n*/\npublic final static PropertyName USE_DEFAULT = new PropertyName(f___use_default_819_line_29, null);",
        "begin_line": 27,
        "end_line": 35,
        "comment": "\n * Simple value class used for containing names of properties as defined\n * by annotations (and possibly other configuration sources).\n * \n * @since 2.1\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
        "signature": "int PROBE_START_LINE_36",
        "snippet": "int PROBE_START_LINE_36 = 36;\ncom.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver p_overrides_2047_line_36 = overrides;",
        "begin_line": 36,
        "end_line": 37,
        "comment": "    \n     * Simple mix-in targets defined locally.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
        "signature": "int PROBE_START_LINE_92",
        "snippet": "int PROBE_START_LINE_92 = 92;\ncom.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver f__overrides_2048_line_92 = _overrides;",
        "begin_line": 95,
        "end_line": 96,
        "comment": "    \n     * Mutant factory method that constructs a new instance that has no locally\n     * defined mix-in/target mappings.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
        "signature": "int PROBE_START_LINE_67",
        "snippet": "int PROBE_START_LINE_67 = 67;\nMap<Class<?>, com.fasterxml.jackson.databind.cfg.MutableConfigOverride> p_overrides_1061_line_67 = overrides;",
        "begin_line": 69,
        "end_line": 70,
        "comment": "                 !!! TODO: change to (ALWAYS, ALWAYS)?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
        "signature": "int PROBE_END_LINE_67",
        "snippet": "int PROBE_END_LINE_67 = 67;\n_overrides = p_overrides_1061_line_67;",
        "begin_line": 71,
        "end_line": 72,
        "comment": "                 !!! TODO: change to (ALWAYS, ALWAYS)?"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeBase.java",
        "signature": "int PROBE_START_LINE_17",
        "snippet": "int PROBE_START_LINE_17 = 17;\n\nprivate static final com.fasterxml.jackson.databind.type.TypeBindings type_base1_expr1_line_17 = TypeBindings\n.emptyBindings();",
        "begin_line": 18,
        "end_line": 21,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_START_LINE_30",
        "snippet": "int PROBE_START_LINE_30 = 30;\nHashMap<Class<?>, Object> v_sers_2637_line_30 = sers;",
        "begin_line": 32,
        "end_line": 33,
        "comment": "    \n     * Method called by {@link BasicSerializerFactory} to access\n     * all serializers this class provides.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_30",
        "snippet": "int PROBE_END_LINE_30 = 30;\n// First things that 'toString()' can handle\nv_sers_2637_line_30.put(java.net.URL.class, new ToStringSerializer(java.net.URL.class));",
        "begin_line": 34,
        "end_line": 36,
        "comment": "    \n     * Method called by {@link BasicSerializerFactory} to access\n     * all serializers this class provides.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_31",
        "snippet": "int PROBE_END_LINE_31 = 31;\nv_sers_2637_line_31.put(java.net.URI.class, new ToStringSerializer(java.net.URI.class));",
        "begin_line": 39,
        "end_line": 40,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_33",
        "snippet": "int PROBE_END_LINE_33 = 33;\nv_sers_2637_line_33.put(Currency.class, new ToStringSerializer(Currency.class));",
        "begin_line": 44,
        "end_line": 45,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_34",
        "snippet": "int PROBE_END_LINE_34 = 34;\nv_sers_2637_line_34.put(UUID.class, new UUIDSerializer());",
        "begin_line": 48,
        "end_line": 49,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_START_LINE_36",
        "snippet": "int PROBE_START_LINE_36 = 36;\nHashMap<Class<?>, Object> v_sers_2637_line_36 = sers;",
        "begin_line": 54,
        "end_line": 55,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_START_LINE_39",
        "snippet": "int PROBE_START_LINE_39 = 39;\nHashMap<Class<?>, Object> v_sers_2637_line_39 = sers;",
        "begin_line": 59,
        "end_line": 60,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_39",
        "snippet": "int PROBE_END_LINE_39 = 39;\n// then atomic types (note: AtomicReference defined elsewhere)\nv_sers_2637_line_39.put(AtomicBoolean.class, AtomicBooleanSerializer.class);",
        "begin_line": 61,
        "end_line": 63,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_START_LINE_40",
        "snippet": "int PROBE_START_LINE_40 = 40;\nHashMap<Class<?>, Object> v_sers_2637_line_40 = sers;",
        "begin_line": 64,
        "end_line": 65,
        "comment": "\t\t then atomic types (note: AtomicReference defined elsewhere)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "signature": "int PROBE_START_LINE_49",
        "snippet": "int PROBE_START_LINE_49 = 50;\ncom.fasterxml.jackson.databind.ser.Serializers[] p_all_additional_serializers_1245_line_49 = allAdditionalSerializers;",
        "begin_line": 51,
        "end_line": 52,
        "comment": "    \n     * List of modifiers that can change the way {@link BeanSerializer} instances\n     * are configured and constructed.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "signature": "boolean serializer_factory_config1_expr6_line_49",
        "snippet": "boolean serializer_factory_config1_expr6_line_49 = p_all_additional_serializers_1245_line_49 == null;\nboolean serializer_factory_config1_expr5_line_49 = (serializer_factory_config1_expr6_line_49);",
        "begin_line": 53,
        "end_line": 54,
        "comment": "    \n     * List of modifiers that can change the way {@link BeanSerializer} instances\n     * are configured and constructed.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_59",
        "snippet": "int PROBE_START_LINE_59 = 59;\nHashMap<String, Class<? extends java.util.Map>> f__map_fallbacks_1260_line_59 = _mapFallbacks;",
        "begin_line": 62,
        "end_line": 63,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "String basic_deserializer_factory1_expr10_line_59",
        "snippet": "String basic_deserializer_factory1_expr10_line_59 = Map.class.getName();\nint PROBE_END_LINE_59 = 59;",
        "begin_line": 64,
        "end_line": 65,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_61",
        "snippet": "int PROBE_START_LINE_61 = 61;\nHashMap<String, Class<? extends java.util.Map>> f__map_fallbacks_1260_line_61 = _mapFallbacks;",
        "begin_line": 72,
        "end_line": 73,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_63",
        "snippet": "int PROBE_START_LINE_63 = 63;\nHashMap<String, Class<? extends java.util.Map>> f__map_fallbacks_1260_line_63 = _mapFallbacks;",
        "begin_line": 78,
        "end_line": 79,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "String basic_deserializer_factory1_expr22_line_63",
        "snippet": "String basic_deserializer_factory1_expr22_line_63 = java.util.NavigableMap.class.getName();\nint PROBE_END_LINE_63 = 63;",
        "begin_line": 80,
        "end_line": 81,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_78",
        "snippet": "int PROBE_START_LINE_78 = 78;\nHashMap<String, Class<? extends java.util.Collection>> f__collection_fallbacks_1261_line_78 = _collectionFallbacks;",
        "begin_line": 109,
        "end_line": 110,
        "comment": "    /* We do some defaulting for abstract Collection classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Collection will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "String basic_deserializer_factory1_expr39_line_78",
        "snippet": "String basic_deserializer_factory1_expr39_line_78 = Set.class.getName();\nint PROBE_END_LINE_78 = 78;",
        "begin_line": 111,
        "end_line": 112,
        "comment": "    /* We do some defaulting for abstract Collection classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Collection will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_126",
        "snippet": "int PROBE_START_LINE_126 = 126;\ncom.fasterxml.jackson.databind.JavaType p_type_1668_line_126 = type;",
        "begin_line": 127,
        "end_line": 128,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_126",
        "snippet": "int PROBE_END_LINE_126 = 126;\n_type = p_type_1668_line_126;",
        "begin_line": 129,
        "end_line": 130,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_127",
        "snippet": "int PROBE_START_LINE_127 = 127;\nClass<?> p_raw_type_1669_line_127 = rawType;",
        "begin_line": 131,
        "end_line": 132,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_127",
        "snippet": "int PROBE_END_LINE_127 = 127;\n_class = p_raw_type_1669_line_127;",
        "begin_line": 133,
        "end_line": 134,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_128",
        "snippet": "int PROBE_START_LINE_128 = 128;\ncom.fasterxml.jackson.databind.util.Annotations p_class_annotations_1672_line_128 = classAnnotations;",
        "begin_line": 135,
        "end_line": 136,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
        "signature": "int PROBE_START_LINE_42",
        "snippet": "int PROBE_START_LINE_42 = 42;\nBoolean p_use_timestamp_2541_line_42 = useTimestamp;",
        "begin_line": 42,
        "end_line": 43,
        "comment": "    \n     * Specific format to use, if not default format: non null value\n     * also indicates that serialization is to be done as JSON String,\n     * not numeric timestamp, unless {@link #_useTimestamp} is true.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
        "signature": "int PROBE_END_LINE_42",
        "snippet": "int PROBE_END_LINE_42 = 42;\n_useTimestamp = p_use_timestamp_2541_line_42;",
        "begin_line": 44,
        "end_line": 45,
        "comment": "    \n     * Specific format to use, if not default format: non null value\n     * also indicates that serialization is to be done as JSON String,\n     * not numeric timestamp, unless {@link #_useTimestamp} is true.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
        "signature": "int PROBE_END_LINE_29",
        "snippet": "int PROBE_END_LINE_29 = 34;\n\n/**\n* Default singleton instance that construct \"standard\" node instances:\n* given that this class is stateless, a globally shared singleton\n* can be used.\n*/\npublic final static JsonNodeFactory instance = f_decimals_normalized_2185_line_34;",
        "begin_line": 33,
        "end_line": 40,
        "comment": "     with 2.2"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_70",
        "snippet": "int PROBE_START_LINE_70 = 70;\nHashMap<String, JsonSerializer<?>> v_concrete_2215_line_70 = concrete;",
        "begin_line": 71,
        "end_line": 72,
        "comment": "    \n     * Actually it may not make much sense to eagerly instantiate all\n     * kinds of serializers: so this Map actually contains class references,\n     * not instances\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "String basic_serializer_factory1_expr4_line_70",
        "snippet": "String basic_serializer_factory1_expr4_line_70 = String.class.getName();\nint PROBE_END_LINE_70 = 70;",
        "begin_line": 73,
        "end_line": 74,
        "comment": "    \n     * Actually it may not make much sense to eagerly instantiate all\n     * kinds of serializers: so this Map actually contains class references,\n     * not instances\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_71",
        "snippet": "int PROBE_START_LINE_71 = 71;\nToStringSerializer f_instance_2217_line_71 = ToStringSerializer.instance;",
        "begin_line": 79,
        "end_line": 80,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_72",
        "snippet": "int PROBE_START_LINE_72 = 72;\nHashMap<String, JsonSerializer<?>> v_concrete_2215_line_72 = concrete;",
        "begin_line": 83,
        "end_line": 84,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_72",
        "snippet": "int PROBE_END_LINE_72 = 72;\nv_concrete_2215_line_72.put(basic_serializer_factory1_expr8_line_72, v_sls_2216_line_72);",
        "begin_line": 87,
        "end_line": 88,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_73",
        "snippet": "int PROBE_START_LINE_73 = 73;\nHashMap<String, JsonSerializer<?>> v_concrete_2215_line_73 = concrete;",
        "begin_line": 89,
        "end_line": 90,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "String basic_serializer_factory1_expr11_line_73",
        "snippet": "String basic_serializer_factory1_expr11_line_73 = StringBuilder.class.getName();\ncom.fasterxml.jackson.databind.ser.std.ToStringSerializer v_sls_2216_line_73 = sls;",
        "begin_line": 91,
        "end_line": 92,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_73",
        "snippet": "int PROBE_END_LINE_73 = 73;\nv_concrete_2215_line_73.put(basic_serializer_factory1_expr11_line_73, v_sls_2216_line_73);",
        "begin_line": 93,
        "end_line": 94,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_74",
        "snippet": "int PROBE_START_LINE_74 = 74;\nHashMap<String, JsonSerializer<?>> v_concrete_2215_line_74 = concrete;",
        "begin_line": 95,
        "end_line": 96,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "String basic_serializer_factory1_expr14_line_74",
        "snippet": "String basic_serializer_factory1_expr14_line_74 = Character.class.getName();\ncom.fasterxml.jackson.databind.ser.std.ToStringSerializer v_sls_2216_line_74 = sls;",
        "begin_line": 97,
        "end_line": 98,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_74",
        "snippet": "int PROBE_END_LINE_74 = 74;\nv_concrete_2215_line_74.put(basic_serializer_factory1_expr14_line_74, v_sls_2216_line_74);",
        "begin_line": 99,
        "end_line": 100,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_75",
        "snippet": "int PROBE_START_LINE_75 = 75;\nHashMap<String, JsonSerializer<?>> v_concrete_2215_line_75 = concrete;",
        "begin_line": 101,
        "end_line": 102,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_75",
        "snippet": "int PROBE_END_LINE_75 = 75;\nv_concrete_2215_line_75.put(basic_serializer_factory1_expr17_line_75, v_sls_2216_line_75);",
        "begin_line": 106,
        "end_line": 107,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_78",
        "snippet": "int PROBE_START_LINE_78 = 78;\nHashMap<String, JsonSerializer<?>> v_concrete_2215_line_78 = concrete;",
        "begin_line": 109,
        "end_line": 110,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "String basic_serializer_factory1_expr34_line_84",
        "snippet": "String basic_serializer_factory1_expr34_line_84 = BigDecimal.class.getName();\nint PROBE_END_LINE_84 = 84;",
        "begin_line": 134,
        "end_line": 135,
        "comment": "\t\t Other numbers, more complicated"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java",
        "signature": "int PROBE_START_LINE_29",
        "snippet": "int PROBE_START_LINE_29 = 29;\nString p_msg_2472_line_29 = msg;",
        "begin_line": 29,
        "end_line": 30,
        "comment": "\n * Special bogus \"serializer\" that will throw\n * {@link JsonMappingException} if its {@link #serialize}\n * gets invoked. Most commonly registered as handler for unknown types,\n * as well as for catching unintended usage (like trying to use null\n * as Map/Object key).\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "signature": "int PROBE_START_LINE_42",
        "snippet": "int PROBE_START_LINE_42 = 45;\n\nprotected static final com.fasterxml.jackson.annotation.JsonInclude.Value mapper_config1_expr1_line_45 = JsonInclude.Value\n.empty();",
        "begin_line": 45,
        "end_line": 48,
        "comment": "\n * Interface that defines functionality accessible through both\n * serialization and deserialization configuration objects;\n * accessors to mode-independent configuration settings\n * and such.\n * In addition, shared features are defined\n * in {@link MapperFeature}.\n *<p>\n * Small part of implementation is included here by aggregating\n * {@link BaseSettings} instance that contains configuration\n * that is shared between different types of instances.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "signature": "int PROBE_END_LINE_42",
        "snippet": "int PROBE_END_LINE_42 = 45;\n\n/**\n* @since 2.7\n*/\nprotected final static JsonInclude.Value EMPTY_INCLUDE = mapper_config1_expr1_line_45;",
        "begin_line": 50,
        "end_line": 55,
        "comment": "\n * Interface that defines functionality accessible through both\n * serialization and deserialization configuration objects;\n * accessors to mode-independent configuration settings\n * and such.\n * In addition, shared features are defined\n * in {@link MapperFeature}.\n *<p>\n * Small part of implementation is included here by aggregating\n * {@link BaseSettings} instance that contains configuration\n * that is shared between different types of instances.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "signature": "int PROBE_END_LINE_104",
        "snippet": "int PROBE_END_LINE_104 = 104;\nreturn v_flags_1133_line_104;",
        "begin_line": 141,
        "end_line": 142,
        "comment": "    \n     * Method that calculates bit set (flags) of all features that\n     * are enabled by default.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/MappingJsonFactory.java",
        "signature": "int PROBE_START_LINE_30",
        "snippet": "int PROBE_START_LINE_30 = 32;\ncom.fasterxml.jackson.databind.ObjectMapper p_mapper_475_line_30 = mapper;",
        "begin_line": 30,
        "end_line": 31,
        "comment": "\n * Sub-class of {@link JsonFactory} that will create a proper\n * {@link ObjectCodec} to allow seam-less conversions between\n * JSON content and Java objects (POJOs).\n * The only addition to regular {@link JsonFactory} currently\n * is that {@link ObjectMapper} is constructed and passed as\n * the codec to use.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/MappingJsonFactory.java",
        "signature": "boolean mapping_json_factory1_expr2_line_30",
        "snippet": "boolean mapping_json_factory1_expr2_line_30 = p_mapper_475_line_30 == null;\nint PROBE_END_LINE_30 = 32;",
        "begin_line": 32,
        "end_line": 33,
        "comment": "\n * Sub-class of {@link JsonFactory} that will create a proper\n * {@link ObjectCodec} to allow seam-less conversions between\n * JSON content and Java objects (POJOs).\n * The only addition to regular {@link JsonFactory} currently\n * is that {@link ObjectMapper} is constructed and passed as\n * the codec to use.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeParser.java",
        "signature": "int PROBE_START_LINE_20",
        "snippet": "int PROBE_START_LINE_20 = 20;\ncom.fasterxml.jackson.databind.type.TypeFactory p_f_3076_line_20 = f;",
        "begin_line": 20,
        "end_line": 21,
        "comment": "\n * Simple recursive-descent parser for parsing canonical {@link JavaType}\n * representations and constructing type instances.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "signature": "int PROBE_START_LINE_82",
        "snippet": "int PROBE_START_LINE_82 = 84;\nClass<?> p_raw_2820_line_82 = raw;",
        "begin_line": 82,
        "end_line": 83,
        "comment": "    \n     * Method used by core Jackson classes: NOT to be used by application code:\n     * it does NOT properly handle inspection of super-types, so neither parent\n     * Classes nor implemented Interfaces are accessible with resulting type\n     * instance.\n     *<p>\n     * NOTE: public only because it is called by <code>ObjectMapper</code> which is\n     * not in same package\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/ClassStack.java",
        "signature": "int PROBE_START_LINE_25",
        "snippet": "int PROBE_START_LINE_25 = 25;\ncom.fasterxml.jackson.databind.type.ClassStack p_parent_2790_line_25 = parent;",
        "begin_line": 25,
        "end_line": 26,
        "comment": "\n * Simple helper class used to keep track of 'call stack' for classes being referenced\n * (as well as unbound variables)\n *\n * @since 2.7\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/ClassStack.java",
        "signature": "int PROBE_END_LINE_25",
        "snippet": "int PROBE_END_LINE_25 = 25;\n_parent = p_parent_2790_line_25;",
        "begin_line": 27,
        "end_line": 28,
        "comment": "\n * Simple helper class used to keep track of 'call stack' for classes being referenced\n * (as well as unbound variables)\n *\n * @since 2.7\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
        "signature": "int PROBE_START_LINE_79",
        "snippet": "int PROBE_START_LINE_79 = 79;\ncom.fasterxml.jackson.databind.cfg.ConfigOverride.Empty f_instance_1060_line_79 = Empty.INSTANCE;",
        "begin_line": 79,
        "end_line": 80,
        "comment": "    \n     * Accessor for immutable \"empty\" instance that has no configuration overrides defined.\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_START_LINE_26",
        "snippet": "int PROBE_START_LINE_26 = 26;\nMap<String, JsonSerializer<?>> p_all_deserializers_2584_line_26 = allDeserializers;",
        "begin_line": 28,
        "end_line": 29,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "String number_serializers1_expr2_line_26",
        "snippet": "String number_serializers1_expr2_line_26 = Integer.class.getName();\nint PROBE_END_LINE_26 = 26;",
        "begin_line": 30,
        "end_line": 31,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_START_LINE_27",
        "snippet": "int PROBE_START_LINE_27 = 27;\nMap<String, JsonSerializer<?>> p_all_deserializers_2584_line_27 = allDeserializers;",
        "begin_line": 33,
        "end_line": 34,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_END_LINE_27",
        "snippet": "int PROBE_END_LINE_27 = 27;\np_all_deserializers_2584_line_27.put(number_serializers1_expr7_line_27, new IntegerSerializer(Integer.TYPE));",
        "begin_line": 37,
        "end_line": 38,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_START_LINE_28",
        "snippet": "int PROBE_START_LINE_28 = 28;\nMap<String, JsonSerializer<?>> p_all_deserializers_2584_line_28 = allDeserializers;",
        "begin_line": 39,
        "end_line": 40,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "String number_serializers1_expr10_line_28",
        "snippet": "String number_serializers1_expr10_line_28 = Long.class.getName();\nint PROBE_END_LINE_28 = 28;",
        "begin_line": 41,
        "end_line": 42,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_START_LINE_32",
        "snippet": "int PROBE_START_LINE_32 = 32;\nMap<String, JsonSerializer<?>> p_all_deserializers_2584_line_32 = allDeserializers;",
        "begin_line": 57,
        "end_line": 58,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "Class<Byte> f_type_2586_line_32",
        "snippet": "Class<Byte> f_type_2586_line_32 = Byte.TYPE;\nString number_serializers1_expr21_line_32 = f_type_2586_line_32.getName();",
        "begin_line": 59,
        "end_line": 60,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_END_LINE_32",
        "snippet": "int PROBE_END_LINE_32 = 32;\np_all_deserializers_2584_line_32.put(number_serializers1_expr21_line_32, f_instance_2585_line_32);",
        "begin_line": 62,
        "end_line": 63,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "boolean number_serializers1_expr44_line_60",
        "snippet": "boolean number_serializers1_expr44_line_60 = p_number_type_2593_line_60 == f_int_2598_line_60;\nboolean number_serializers1_expr43_line_60 = (number_serializers1_expr44_line_60);",
        "begin_line": 131,
        "end_line": 132,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_START_LINE_104",
        "snippet": "int PROBE_START_LINE_104 = 104;\nint deserialization_config1_expr2_line_104 = collectFeatureDefaults(DeserializationFeature.class);",
        "begin_line": 104,
        "end_line": 105,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_END_LINE_104",
        "snippet": "int PROBE_END_LINE_104 = 104;\n_deserFeatures = deserialization_config1_expr2_line_104;",
        "begin_line": 106,
        "end_line": 107,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_START_LINE_105",
        "snippet": "int PROBE_START_LINE_105 = 105;\ncom.fasterxml.jackson.databind.node.JsonNodeFactory f_instance_164_line_105 = JsonNodeFactory.instance;",
        "begin_line": 108,
        "end_line": 109,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_END_LINE_105",
        "snippet": "int PROBE_END_LINE_105 = 105;\n_nodeFactory = f_instance_164_line_105;",
        "begin_line": 110,
        "end_line": 111,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "signature": "int PROBE_START_LINE_485",
        "snippet": "int PROBE_START_LINE_485 = 485;\nboolean p_default_state_471_line_485 = defaultState;",
        "begin_line": 485,
        "end_line": 486,
        "comment": "    \n     * Setting that determines what happens if an attempt is made to explicitly\n     * \"merge\" value of a property, where value does not support merging; either\n     * merging is skipped and new value is created (<code>true</code>) or\n     * an exception is thrown (false).\n     *<p>\n     * Feature is disabled by default since non-mergeable property types are ignored\n     * even if defaults call for merging, and usually explicit per-type or per-property\n     * settings for such types should result in an exception.\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "signature": "int PROBE_END_LINE_485",
        "snippet": "int PROBE_END_LINE_485 = 485;\n_defaultState = p_default_state_471_line_485;",
        "begin_line": 487,
        "end_line": 488,
        "comment": "    \n     * Setting that determines what happens if an attempt is made to explicitly\n     * \"merge\" value of a property, where value does not support merging; either\n     * merging is skipped and new value is created (<code>true</code>) or\n     * an exception is thrown (false).\n     *<p>\n     * Feature is disabled by default since non-mergeable property types are ignored\n     * even if defaults call for merging, and usually explicit per-type or per-property\n     * settings for such types should result in an exception.\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "signature": "int PROBE_START_LINE_486",
        "snippet": "int PROBE_START_LINE_486 = 486;\nint mapper_feature1_expr3_line_486 = ordinal();",
        "begin_line": 489,
        "end_line": 490,
        "comment": "    \n     * Setting that determines what happens if an attempt is made to explicitly\n     * \"merge\" value of a property, where value does not support merging; either\n     * merging is skipped and new value is created (<code>true</code>) or\n     * an exception is thrown (false).\n     *<p>\n     * Feature is disabled by default since non-mergeable property types are ignored\n     * even if defaults call for merging, and usually explicit per-type or per-property\n     * settings for such types should result in an exception.\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "signature": "int PROBE_END_LINE_486",
        "snippet": "int PROBE_END_LINE_486 = 486;\n_mask = mapper_feature1_expr1_line_486;",
        "begin_line": 493,
        "end_line": 494,
        "comment": "    \n     * Setting that determines what happens if an attempt is made to explicitly\n     * \"merge\" value of a property, where value does not support merging; either\n     * merging is skipped and new value is created (<code>true</code>) or\n     * an exception is thrown (false).\n     *<p>\n     * Feature is disabled by default since non-mergeable property types are ignored\n     * even if defaults call for merging, and usually explicit per-type or per-property\n     * settings for such types should result in an exception.\n     *\n     * @since 2.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_21",
        "snippet": "int PROBE_START_LINE_21 = 21;\n\nprivate static final String[] f_no_strings_2866_line_21 = NO_STRINGS;",
        "begin_line": 21,
        "end_line": 23,
        "comment": "\n * Helper class used for resolving type parameters for given class\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_54",
        "snippet": "int PROBE_START_LINE_54 = 54;\nString[] p_names_2869_line_54 = names;",
        "begin_line": 62,
        "end_line": 63,
        "comment": "    ********************************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "boolean type_bindings1_expr6_line_54",
        "snippet": "boolean type_bindings1_expr6_line_54 = p_names_2869_line_54 == null;\nboolean type_bindings1_expr5_line_54 = (type_bindings1_expr6_line_54);",
        "begin_line": 64,
        "end_line": 65,
        "comment": "    ********************************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "String[] f_no_strings_2866_line_54",
        "snippet": "String[] f_no_strings_2866_line_54 = null;\nif (type_bindings1_expr5_line_54) {\nf_no_strings_2866_line_54 = NO_STRINGS;",
        "begin_line": 66,
        "end_line": 68,
        "comment": "    ********************************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int len",
        "snippet": "int len = (_unboundVariables == null) ? 0 : _unboundVariables.length;\nString[] names =  (len == 0)\n? new String[1] : Arrays.copyOf(_unboundVariables, len+1);",
        "begin_line": 246,
        "end_line": 248,
        "comment": "    \n     * Method for creating an instance that has same bindings as this object,\n     * plus an indicator for additional type variable that may be unbound within\n     * this context; this is needed to resolve recursive self-references.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
        "signature": "int PROBE_START_LINE_26",
        "snippet": "int PROBE_START_LINE_26 = 26;\nClass<?> v_cls_1656_line_26 = cls;",
        "begin_line": 26,
        "end_line": 27,
        "comment": "         Trigger loading of annotations that only JDK 7 has..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_START_LINE_26",
        "snippet": "int PROBE_START_LINE_26 = 26;\nObject p_d_1748_line_26 = d;",
        "begin_line": 28,
        "end_line": 29,
        "comment": "    \n     * Optional data to carry along\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_END_LINE_70",
        "snippet": "int PROBE_END_LINE_70 = 70;\nreturn f_no_annotations_1747_line_70;",
        "begin_line": 83,
        "end_line": 84,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_START_LINE_83",
        "snippet": "int PROBE_START_LINE_83 = 83;\nObject f__data_1749_line_83 = _data;",
        "begin_line": 97,
        "end_line": 98,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_START_LINE_95",
        "snippet": "int PROBE_START_LINE_95 = 95;\nClass<?> p_type_1758_line_95 = type;",
        "begin_line": 115,
        "end_line": 116,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_END_LINE_95",
        "snippet": "int PROBE_END_LINE_95 = 95;\n_type = p_type_1758_line_95;",
        "begin_line": 117,
        "end_line": 118,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_END_LINE_96",
        "snippet": "int PROBE_END_LINE_96 = 96;\n_value = p_value_1759_line_96;",
        "begin_line": 121,
        "end_line": 122,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_START_LINE_111",
        "snippet": "int PROBE_START_LINE_111 = 111;\njava.lang.annotation.Annotation p_ann_1762_line_111 = ann;",
        "begin_line": 141,
        "end_line": 142,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_START_LINE_135",
        "snippet": "int PROBE_START_LINE_135 = 135;\nHashMap<Class<?>, java.lang.annotation.Annotation> f__annotations_1770_line_135 = _annotations;",
        "begin_line": 188,
        "end_line": 189,
        "comment": "\t\t\t true override? Just replace in-place, return"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_END_LINE_135",
        "snippet": "int PROBE_END_LINE_135 = 135;\nf__annotations_1770_line_135.put(p_type_1_1766_line_135, p_value_1_1767_line_135);",
        "begin_line": 192,
        "end_line": 193,
        "comment": "\t\t\t true override? Just replace in-place, return"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_START_LINE_143",
        "snippet": "int PROBE_START_LINE_143 = 143;\nIterator<java.util.Map.Entry<Class<?>, java.lang.annotation.Annotation>> v_it_1771_line_143 = it;",
        "begin_line": 218,
        "end_line": 219,
        "comment": "\t\t\t true override? Just replace in-place, return"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_END_LINE_143",
        "snippet": "int PROBE_END_LINE_143 = 143;\nMap.Entry<Class<?>,Annotation> en1 = annotation_collector1_expr22_line_143, en2 = annotation_collector1_expr23_line_143;",
        "begin_line": 222,
        "end_line": 223,
        "comment": "\t\t\t true override? Just replace in-place, return"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
        "signature": "int PROBE_END_LINE_144",
        "snippet": "int PROBE_END_LINE_144 = 145;\nreturn new TwoAnnotations(annotation_collector1_expr25_line_144, annotation_collector1_expr26_line_144,\nen2.getKey(), en2.getValue());",
        "begin_line": 228,
        "end_line": 230,
        "comment": "\t\t\t true override? Just replace in-place, return"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_START_LINE_551",
        "snippet": "int PROBE_START_LINE_551 = 551;\nClass<T> p_cls_3149_line_551 = (Class<T>) (cls);",
        "begin_line": 571,
        "end_line": 572,
        "comment": "    \n     * Method that can be called to try to create an instantiate of\n     * specified type. Instantiation is done using default no-argument\n     * constructor.\n     *\n     * @param canFixAccess Whether it is possible to try to change access\n     *   rights of the default constructor (in case it is not publicly\n     *   accessible) or not.\n     *\n     * @throws IllegalArgumentException If instantiation fails for any reason;\n     *    except for cases where constructor throws an unchecked exception\n     *    (which will be passed as is)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_END_LINE_551",
        "snippet": "int PROBE_END_LINE_551 = 551;\nConstructor<T> ctor = class_util1_expr9_line_551;",
        "begin_line": 576,
        "end_line": 577,
        "comment": "    \n     * Method that can be called to try to create an instantiate of\n     * specified type. Instantiation is done using default no-argument\n     * constructor.\n     *\n     * @param canFixAccess Whether it is possible to try to change access\n     *   rights of the default constructor (in case it is not publicly\n     *   accessible) or not.\n     *\n     * @throws IllegalArgumentException If instantiation fails for any reason;\n     *    except for cases where constructor throws an unchecked exception\n     *    (which will be passed as is)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_START_LINE_576",
        "snippet": "int PROBE_START_LINE_576 = 576;\nConstructor<T> v_ctor_3154_line_576 = (Constructor<T>) (ctor);",
        "begin_line": 624,
        "end_line": 625,
        "comment": "\t\t\t\t Has to be public..."
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "signature": "int PROBE_END_LINE_1039",
        "snippet": "int PROBE_END_LINE_1039 = 1039;\nreturn class_util1_expr18_line_1039;",
        "begin_line": 1104,
        "end_line": 1105,
        "comment": "    \n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_START_LINE_79",
        "snippet": "int PROBE_START_LINE_79 = 79;\nClass<?> p_raw_423_line_79 = raw;",
        "begin_line": 79,
        "end_line": 80,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_END_LINE_79",
        "snippet": "int PROBE_END_LINE_79 = 79;\n_class = p_raw_423_line_79;",
        "begin_line": 81,
        "end_line": 82,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_START_LINE_80",
        "snippet": "int PROBE_START_LINE_80 = 80;\nClass<?> p_raw_423_line_80 = raw;",
        "begin_line": 83,
        "end_line": 84,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "signature": "int PROBE_END_LINE_124",
        "snippet": "int PROBE_END_LINE_124 = 130;\n\n/**\n* Serializer that gets called for values of types for which no\n* serializers can be constructed.\n*<p>\n* The default serializer will simply thrown an exception.\n*/\nprotected JsonSerializer<Object> _unknownTypeSerializer = f_default_unknown_serializer_912_line_130;",
        "begin_line": 128,
        "end_line": 136,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "signature": "int PROBE_END_LINE_139",
        "snippet": "int PROBE_END_LINE_139 = 143;\n\n/**\n* Serializer used to output a null value. Default implementation\n* writes nulls using {@link JsonGenerator#writeNull}.\n*/\nprotected JsonSerializer<Object> _nullValueSerializer = f_instance_915_line_143;",
        "begin_line": 149,
        "end_line": 155,
        "comment": "    \n     * Serializer used to output non-null keys of Maps (which will get\n     * output as JSON Objects), if not null; if null, us the standard\n     * default key serializer.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
        "signature": "int PROBE_START_LINE_93",
        "snippet": "int PROBE_START_LINE_93 = 93;\nMap<?, ?> p_shared_1086_line_93 = shared;",
        "begin_line": 103,
        "end_line": 104,
        "comment": "        ********************************************************\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "Set<String> v_s_1446_line_50",
        "snippet": "Set<String> v_s_1446_line_50 = s;\nint PROBE_END_LINE_50 = 50;",
        "begin_line": 50,
        "end_line": 51,
        "comment": "    \n     * Set of well-known \"nasty classes\", deserialization of which is considered dangerous\n     * and should (and is) prevented by default.\n     *\n     * @since 2.8.9\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_51",
        "snippet": "int PROBE_START_LINE_51 = 51;\nSet<String> v_s_1446_line_51 = s;",
        "begin_line": 55,
        "end_line": 56,
        "comment": "         (and wrt [databind#1599]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_END_LINE_51",
        "snippet": "int PROBE_END_LINE_51 = 51;\nv_s_1446_line_51.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");",
        "begin_line": 57,
        "end_line": 58,
        "comment": "         (and wrt [databind#1599]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_52",
        "snippet": "int PROBE_START_LINE_52 = 52;\nSet<String> v_s_1446_line_52 = s;",
        "begin_line": 59,
        "end_line": 60,
        "comment": "         (and wrt [databind#1599]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_54",
        "snippet": "int PROBE_START_LINE_54 = 54;\nSet<String> v_s_1446_line_54 = s;",
        "begin_line": 67,
        "end_line": 68,
        "comment": "         (and wrt [databind#1599]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_57",
        "snippet": "int PROBE_START_LINE_57 = 57;\nSet<String> v_s_1446_line_57 = s;",
        "begin_line": 79,
        "end_line": 80,
        "comment": "         (and wrt [databind#1599]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_58",
        "snippet": "int PROBE_START_LINE_58 = 58;\nSet<String> v_s_1446_line_58 = s;",
        "begin_line": 83,
        "end_line": 84,
        "comment": "         (and wrt [databind#1599]"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
        "signature": "int PROBE_START_LINE_59",
        "snippet": "int PROBE_START_LINE_59 = 59;\nClass<T> p_t_2672_line_59 = (Class<T>) (t);",
        "begin_line": 59,
        "end_line": 60,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_START_LINE_156",
        "snippet": "int PROBE_START_LINE_156 = 158;\ncom.fasterxml.jackson.databind.deser.DeserializerFactory p_df_232_line_156 = df;",
        "begin_line": 156,
        "end_line": 157,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "boolean deserialization_context1_expr1_line_156",
        "snippet": "boolean deserialization_context1_expr1_line_156 = p_df_232_line_156 == null;\nint PROBE_END_LINE_156 = 158;",
        "begin_line": 158,
        "end_line": 159,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_START_LINE_159",
        "snippet": "int PROBE_START_LINE_159 = 159;\ncom.fasterxml.jackson.databind.deser.DeserializerFactory p_df_232_line_159 = df;",
        "begin_line": 163,
        "end_line": 164,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_END_LINE_159",
        "snippet": "int PROBE_END_LINE_159 = 159;\n_factory = p_df_232_line_159;",
        "begin_line": 165,
        "end_line": 166,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_START_LINE_160",
        "snippet": "int PROBE_START_LINE_160 = 162;\ncom.fasterxml.jackson.databind.deser.DeserializerCache p_cache_233_line_160 = cache;",
        "begin_line": 167,
        "end_line": 168,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "boolean deserialization_context1_expr2_line_160",
        "snippet": "boolean deserialization_context1_expr2_line_160 = p_cache_233_line_160 == null;\nint PROBE_END_LINE_160 = 162;",
        "begin_line": 169,
        "end_line": 170,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
        "signature": "int PROBE_START_LINE_202",
        "snippet": "int PROBE_START_LINE_202 = 202;\ncom.fasterxml.jackson.annotation.JsonAutoDetect.Visibility p_getter_2082_line_202 = getter;",
        "begin_line": 205,
        "end_line": 206,
        "comment": "        \n         * Constructor that allows directly specifying minimum visibility levels to use\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
        "signature": "int PROBE_END_LINE_202",
        "snippet": "int PROBE_END_LINE_202 = 202;\n_getterMinLevel = p_getter_2082_line_202;",
        "begin_line": 207,
        "end_line": 208,
        "comment": "        \n         * Constructor that allows directly specifying minimum visibility levels to use\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_START_LINE_138",
        "snippet": "int PROBE_START_LINE_138 = 138;\ncom.fasterxml.jackson.databind.introspect.ClassIntrospector p_ci_1025_line_138 = ci;",
        "begin_line": 140,
        "end_line": 141,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_END_LINE_138",
        "snippet": "int PROBE_END_LINE_138 = 138;\n_classIntrospector = p_ci_1025_line_138;",
        "begin_line": 142,
        "end_line": 143,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_START_LINE_139",
        "snippet": "int PROBE_START_LINE_139 = 139;\ncom.fasterxml.jackson.databind.AnnotationIntrospector p_ai_1026_line_139 = ai;",
        "begin_line": 144,
        "end_line": 145,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_END_LINE_139",
        "snippet": "int PROBE_END_LINE_139 = 139;\n_annotationIntrospector = p_ai_1026_line_139;",
        "begin_line": 146,
        "end_line": 147,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_START_LINE_140",
        "snippet": "int PROBE_START_LINE_140 = 140;\ncom.fasterxml.jackson.databind.PropertyNamingStrategy p_pns_1027_line_140 = pns;",
        "begin_line": 148,
        "end_line": 149,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_START_LINE_142",
        "snippet": "int PROBE_START_LINE_142 = 142;\nTypeResolverBuilder<?> p_typer_1029_line_142 = typer;",
        "begin_line": 156,
        "end_line": 157,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_START_LINE_143",
        "snippet": "int PROBE_START_LINE_143 = 143;\njava.text.DateFormat p_date_format_1030_line_143 = dateFormat;",
        "begin_line": 160,
        "end_line": 161,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "RootNameLookup rootNames",
        "snippet": "RootNameLookup rootNames = new RootNameLookup();\nint PROBE_START_LINE_559 = 559;",
        "begin_line": 562,
        "end_line": 563,
        "comment": "\t\t/* 02-Mar-2009, tatu: Important: we MUST default to using\n         *   the mapping factory, otherwise tree serialization will\n         *   have problems with POJONodes.\n         * 03-Jan-2010, tatu: and obviously we also must pass 'this',\n         *    to create actual linking.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_END_LINE_559",
        "snippet": "int PROBE_END_LINE_559 = 559;\n// and default type factory is shared one\n_typeFactory = object_mapper1_expr14_line_559;",
        "begin_line": 565,
        "end_line": 567,
        "comment": "\t\t/* 02-Mar-2009, tatu: Important: we MUST default to using\n         *   the mapping factory, otherwise tree serialization will\n         *   have problems with POJONodes.\n         * 03-Jan-2010, tatu: and obviously we also must pass 'this',\n         *    to create actual linking.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_END_LINE_562",
        "snippet": "int PROBE_END_LINE_562 = 562;\n_mixIns = v_mixins_501_line_562;",
        "begin_line": 572,
        "end_line": 573,
        "comment": "\t\t and default type factory is shared one"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_START_LINE_565",
        "snippet": "int PROBE_START_LINE_565 = 566;\ncom.fasterxml.jackson.databind.cfg.BaseSettings v_base_503_line_565 = base;",
        "begin_line": 582,
        "end_line": 583,
        "comment": "\t\t and default type factory is shared one"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_END_LINE_567",
        "snippet": "int PROBE_END_LINE_567 = 568;\n_deserializationConfig = new DeserializationConfig(v_base_503_line_567,\n_subtypeResolver, mixins, rootNames, _configOverrides);",
        "begin_line": 589,
        "end_line": 591,
        "comment": "\t\t and default type factory is shared one"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_START_LINE_25",
        "snippet": "int PROBE_START_LINE_25 = 25;\n\nprivate static final com.fasterxml.jackson.databind.util.Annotations annotated_class_resolver1_expr1_line_25 = AnnotationCollector\n.emptyAnnotations();",
        "begin_line": 25,
        "end_line": 28,
        "comment": "\n * Helper class that contains logic for resolving annotations to construct\n * {@link AnnotatedClass} instances.\n *\n * @since 2.9\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_END_LINE_48",
        "snippet": "int PROBE_END_LINE_48 = 48;\n_config = p_config_1710_line_48;",
        "begin_line": 57,
        "end_line": 58,
        "comment": "\n * Helper class that contains logic for resolving annotations to construct\n * {@link AnnotatedClass} instances.\n *\n * @since 2.9\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_START_LINE_50",
        "snippet": "int PROBE_START_LINE_50 = 50;\nClass<?> p_cls_1711_line_50 = cls;",
        "begin_line": 60,
        "end_line": 61,
        "comment": "\n * Helper class that contains logic for resolving annotations to construct\n * {@link AnnotatedClass} instances.\n *\n * @since 2.9\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "boolean annotated_class_resolver1_expr3_line_53",
        "snippet": "boolean annotated_class_resolver1_expr3_line_53 = p_config_1710_line_53 == null;\nint PROBE_END_LINE_53 = 60;",
        "begin_line": 75,
        "end_line": 76,
        "comment": "\n * Helper class that contains logic for resolving annotations to construct\n * {@link AnnotatedClass} instances.\n *\n * @since 2.9\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_START_LINE_57",
        "snippet": "int PROBE_START_LINE_57 = 58;\nMapperConfig<?> p_config_1710_line_57 = config;",
        "begin_line": 81,
        "end_line": 82,
        "comment": "\n * Helper class that contains logic for resolving annotations to construct\n * {@link AnnotatedClass} instances.\n *\n * @since 2.9\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_START_LINE_59",
        "snippet": "int PROBE_START_LINE_59 = 59;\nMapperConfig<?> f__config_1713_line_59 = _config;",
        "begin_line": 89,
        "end_line": 90,
        "comment": "\n * Helper class that contains logic for resolving annotations to construct\n * {@link AnnotatedClass} instances.\n *\n * @since 2.9\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_START_LINE_82",
        "snippet": "int PROBE_START_LINE_82 = 82;\nMapperConfig<?> p_config_1728_line_82 = config;",
        "begin_line": 124,
        "end_line": 125,
        "comment": "\n * Helper class that contains logic for resolving annotations to construct\n * {@link AnnotatedClass} instances.\n *\n * @since 2.9\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_END_LINE_82",
        "snippet": "int PROBE_END_LINE_82 = 82;\nreturn annotated_class_resolver1_expr9_line_82;",
        "begin_line": 130,
        "end_line": 131,
        "comment": "\n * Helper class that contains logic for resolving annotations to construct\n * {@link AnnotatedClass} instances.\n *\n * @since 2.9\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "List<JavaType> superTypes",
        "snippet": "List<JavaType> superTypes = ClassUtil.findSuperTypes(_type, null, false);\nAnnotations classAnn = resolveClassAnnotations(superTypes);",
        "begin_line": 154,
        "end_line": 155,
        "comment": "    \n     * Internal helper class used for resolving a small set of \"primordial\" types for which\n     * we do not accept any annotation information or overrides. \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_END_LINE_105",
        "snippet": "int PROBE_END_LINE_105 = 105;\nList<JavaType> superTypes = annotated_class_resolver1_expr15_line_105;",
        "begin_line": 164,
        "end_line": 165,
        "comment": "    \n     * Internal helper class used for resolving a small set of \"primordial\" types for which\n     * we do not accept any annotation information or overrides. \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_END_LINE_107",
        "snippet": "int PROBE_END_LINE_107 = 108;\nreturn new AnnotatedClass(null, f__class_1715_line_107, v_super_types_1734_line_107, f__primary_mixin_1719_line_107, v_class_ann_1735_line_107,\n_bindings, _intr, _config, _config.getTypeFactory());",
        "begin_line": 176,
        "end_line": 178,
        "comment": "    \n     * Internal helper class used for resolving a small set of \"primordial\" types for which\n     * we do not accept any annotation information or overrides. \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
        "signature": "int PROBE_START_LINE_125",
        "snippet": "int PROBE_START_LINE_125 = 127;\ncom.fasterxml.jackson.databind.AnnotationIntrospector f__intr_1718_line_125 = _intr;",
        "begin_line": 194,
        "end_line": 195,
        "comment": "    \n     * Initialization method that will recursively collect Jackson\n     * annotations for this class and all super classes and\n     * interfaces.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ext/Java7Support.java",
        "signature": "Java7Support impl",
        "snippet": "Java7Support impl = null;\ntry {\nint PROBE_START_LINE_24 = 24;",
        "begin_line": 22,
        "end_line": 24,
        "comment": "\n * To support Java7-incomplete platforms, we will offer support for JDK 7\n * annotations through this class, loaded dynamically; if loading fails,\n * support will be missing. This class is the non-JDK-7-dependent API,\n * and {@link Java7SupportImpl} is JDK7-dependent implementation of\n * functionality.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ext/Java7Support.java",
        "signature": "int PROBE_START_LINE_25",
        "snippet": "int PROBE_START_LINE_25 = 25;\nClass<?> v_cls_1649_line_25 = cls;",
        "begin_line": 29,
        "end_line": 30,
        "comment": "\n * To support Java7-incomplete platforms, we will offer support for JDK 7\n * annotations through this class, loaded dynamically; if loading fails,\n * support will be missing. This class is the non-JDK-7-dependent API,\n * and {@link Java7SupportImpl} is JDK7-dependent implementation of\n * functionality.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ext/Java7Support.java",
        "signature": "int PROBE_END_LINE_25",
        "snippet": "int PROBE_END_LINE_25 = 25;\nimpl = (Java7Support) java7_support1_expr4_line_25;",
        "begin_line": 32,
        "end_line": 33,
        "comment": "\n * To support Java7-incomplete platforms, we will offer support for JDK 7\n * annotations through this class, loaded dynamically; if loading fails,\n * support will be missing. This class is the non-JDK-7-dependent API,\n * and {@link Java7SupportImpl} is JDK7-dependent implementation of\n * functionality.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_32",
        "snippet": "int PROBE_START_LINE_32 = 33;\ncom.fasterxml.jackson.databind.type.SimpleType basic_class_introspector1_expr2_line_32 = SimpleType\n.constructUnsafe(String.class);",
        "begin_line": 32,
        "end_line": 34,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     *\n     * @since 2.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_47",
        "snippet": "int PROBE_START_LINE_47 = 48;\nClass<Long> f_type_1850_line_47 = Long.TYPE;",
        "begin_line": 67,
        "end_line": 68,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     *\n     * @since 2.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "signature": "int PROBE_START_LINE_429",
        "snippet": "int PROBE_START_LINE_429 = 429;\nboolean p_default_state_907_line_429 = defaultState;",
        "begin_line": 429,
        "end_line": 430,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "signature": "int PROBE_END_LINE_429",
        "snippet": "int PROBE_END_LINE_429 = 429;\n_defaultState = p_default_state_907_line_429;",
        "begin_line": 431,
        "end_line": 432,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "signature": "int PROBE_START_LINE_430",
        "snippet": "int PROBE_START_LINE_430 = 430;\nint serialization_feature1_expr3_line_430 = ordinal();",
        "begin_line": 433,
        "end_line": 434,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "signature": "int PROBE_END_LINE_430",
        "snippet": "int PROBE_END_LINE_430 = 430;\n_mask = serialization_feature1_expr1_line_430;",
        "begin_line": 437,
        "end_line": 438,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
        "signature": "int PROBE_START_LINE_43",
        "snippet": "int PROBE_START_LINE_43 = 43;\nboolean p_for_primitive_2497_line_43 = forPrimitive;",
        "begin_line": 43,
        "end_line": 44,
        "comment": "    \n     * Whether type serialized is primitive (boolean) or wrapper\n     * (java.lang.Boolean); if true, former, if false, latter.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "signature": "int PROBE_START_LINE_69",
        "snippet": "int PROBE_START_LINE_69 = 69;\njava.util.TimeZone std_date_format1_expr2_line_69 = TimeZone.getTimeZone(\"UTC\");",
        "begin_line": 71,
        "end_line": 72,
        "comment": "    \n     * By default we use UTC for everything, with Jackson 2.7 and later\n     * (2.6 and earlier relied on GMT)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "signature": "int PROBE_END_LINE_96",
        "snippet": "int PROBE_END_LINE_96 = 96;\nDATE_FORMAT_PLAIN = new SimpleDateFormat(f_date_format_str_plain_3227_line_96, f_default_locale_3218_line_96);",
        "begin_line": 134,
        "end_line": 135,
        "comment": "        /* Another important thing: let's force use of default timezone for\n         * baseline DataFormat objects\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "signature": "int PROBE_START_LINE_97",
        "snippet": "int PROBE_START_LINE_97 = 97;\njava.text.DateFormat f_date_format_plain_3226_line_97 = DATE_FORMAT_PLAIN;",
        "begin_line": 136,
        "end_line": 137,
        "comment": "        /* Another important thing: let's force use of default timezone for\n         * baseline DataFormat objects\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "signature": "int PROBE_START_LINE_37",
        "snippet": "int PROBE_START_LINE_37 = 37;\nClass<? extends Number> p_raw_type_2575_line_37 = rawType;",
        "begin_line": 36,
        "end_line": 37,
        "comment": "    \n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-80/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "signature": "boolean number_serializer1_expr6_line_37",
        "snippet": "boolean number_serializer1_expr6_line_37 = p_raw_type_2575_line_37 == BigInteger.class;\nboolean number_serializer1_expr5_line_37 = (number_serializer1_expr6_line_37);",
        "begin_line": 38,
        "end_line": 39,
        "comment": "    \n     * @since 2.5\n     "
    }
]