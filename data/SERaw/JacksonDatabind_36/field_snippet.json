[
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "signature": "Java7Support x",
        "snippet": "Java7Support x = null;\ntry {\nint PROBE_START_LINE_62 = 62;",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\n * {@link AnnotationIntrospector} implementation that handles standard\n * Jackson annotations.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationConfig.java",
        "signature": "int PROBE_START_LINE_48",
        "snippet": "int PROBE_START_LINE_48 = 48;\n\nprotected static final com.fasterxml.jackson.annotation.JsonInclude.Value serialization_config1_expr2_line_48 = JsonInclude.Value\n.empty();",
        "begin_line": 48,
        "end_line": 51,
        "comment": "     since 2.6"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "signature": "int PROBE_START_LINE_413",
        "snippet": "int PROBE_START_LINE_413 = 413;\nboolean p_default_state_338_line_413 = defaultState;",
        "begin_line": 413,
        "end_line": 414,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "signature": "int PROBE_END_LINE_413",
        "snippet": "int PROBE_END_LINE_413 = 413;\n_defaultState = p_default_state_338_line_413;",
        "begin_line": 415,
        "end_line": 416,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "signature": "int PROBE_START_LINE_414",
        "snippet": "int PROBE_START_LINE_414 = 414;\nint deserialization_feature1_expr3_line_414 = ordinal();",
        "begin_line": 417,
        "end_line": 418,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationFeature.java",
        "signature": "int PROBE_END_LINE_414",
        "snippet": "int PROBE_END_LINE_414 = 414;\n_mask = deserialization_feature1_expr1_line_414;",
        "begin_line": 421,
        "end_line": 422,
        "comment": "    \n     * Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     * \n     * @since 2.1\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "signature": "int PROBE_START_LINE_100",
        "snippet": "int PROBE_START_LINE_100 = 100;\nMapperConfig<?> p_config_1598_line_100 = config;",
        "begin_line": 103,
        "end_line": 104,
        "comment": "    \n     * Alternate constructor used in cases where property information is not needed,\n     * only class info.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_48",
        "snippet": "int PROBE_START_LINE_48 = 48;\n\nprotected static final com.fasterxml.jackson.databind.type.TypeBindings type_factory1_expr3_line_48 = TypeBindings\n.emptyBindings();",
        "begin_line": 48,
        "end_line": 51,
        "comment": "    \n     * Globally shared singleton. Not accessed directly; non-core\n     * code should use per-ObjectMapper instance (via configuration objects).\n     * Core Jackson code uses {@link #defaultInstance} for accessing it.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_67",
        "snippet": "int PROBE_END_LINE_67 = 67;\n\nprivate final static Class<?> CLS_BOOL = f_type_1633_line_67;",
        "begin_line": 78,
        "end_line": 80,
        "comment": "       parts of processing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_68",
        "snippet": "int PROBE_START_LINE_68 = 68;\n\nprivate static final Class<Integer> f_type_1636_line_68 = Integer.TYPE;",
        "begin_line": 81,
        "end_line": 83,
        "comment": "       parts of processing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_68",
        "snippet": "int PROBE_END_LINE_68 = 68;\n\nprivate final static Class<?> CLS_INT = f_type_1636_line_68;",
        "begin_line": 85,
        "end_line": 87,
        "comment": "       parts of processing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_69",
        "snippet": "int PROBE_END_LINE_69 = 69;\n\nprivate final static Class<?> CLS_LONG = f_type_1639_line_69;",
        "begin_line": 92,
        "end_line": 94,
        "comment": "       parts of processing"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_78",
        "snippet": "int PROBE_START_LINE_78 = 78;\n\nprotected static final Class<?> f_cls_bool_2606_line_78 = CLS_BOOL;",
        "begin_line": 102,
        "end_line": 104,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_79",
        "snippet": "int PROBE_START_LINE_79 = 79;\n\nprotected static final Class<?> f_cls_int_2607_line_79 = CLS_INT;",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\t note: these are primitive, hence no super types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_80",
        "snippet": "int PROBE_START_LINE_80 = 80;\n\nprotected static final Class<?> f_cls_long_2608_line_80 = CLS_LONG;",
        "begin_line": 117,
        "end_line": 119,
        "comment": "\t note: these are primitive, hence no super types"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_START_LINE_88",
        "snippet": "int PROBE_START_LINE_88 = 94;\n\nprotected static final Class<?> f_cls_comparable_2603_line_94 = CLS_COMPARABLE;",
        "begin_line": 143,
        "end_line": 145,
        "comment": "\t @since 2.7"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_88",
        "snippet": "int PROBE_END_LINE_88 = 94;\n\n/**\n* Cache {@link Comparable} because it is both parameteric (relatively costly to\n* resolve) and mostly useless (no special handling), better handle directly\n*\n* @since 2.7\n*/\nprotected final static SimpleType CORE_TYPE_COMPARABLE = new SimpleType(f_cls_comparable_2603_line_94);",
        "begin_line": 147,
        "end_line": 155,
        "comment": "\t @since 2.7"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "signature": "int PROBE_END_LINE_104",
        "snippet": "int PROBE_END_LINE_104 = 110;\n\n/**\n* Cache {@link Class} because it is nominally parametric, but has no really\n* useful information.\n*\n* @since 2.7\n*/\nprotected final static SimpleType CORE_TYPE_CLASS = new SimpleType(f_cls_class_2604_line_110);",
        "begin_line": 175,
        "end_line": 183,
        "comment": "\t\n     * Cache {@link Enum} because it is parametric AND self-referential (costly to\n     * resolve) and useless in itself (no special handling).\n     *\n     * @since 2.7\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "signature": "int PROBE_START_LINE_31",
        "snippet": "int PROBE_START_LINE_31 = 31;\n\nprivate static final int mapper_config_base1_expr1_line_31 = collectFeatureDefaults(MapperFeature.class);",
        "begin_line": 31,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
        "signature": "int PROBE_START_LINE_96",
        "snippet": "int PROBE_START_LINE_96 = 96;\ncom.fasterxml.jackson.databind.introspect.SimpleMixInResolver p_mixins_1048_line_96 = mixins;",
        "begin_line": 102,
        "end_line": 103,
        "comment": "    \n     * Constructor used when creating a new instance (compared to\n     * that of creating fluent copies)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "signature": "int PROBE_START_LINE_35",
        "snippet": "int PROBE_START_LINE_35 = 35;\nint p_initial_entries_2764_line_35 = initialEntries;",
        "begin_line": 34,
        "end_line": 35,
        "comment": "\n * Helper for simple bounded maps used for reusing lookup values.\n *<p>\n * Note that serialization behavior is such that contents are NOT serialized,\n * on assumption that all use cases are for caching where persistence\n * does not make sense. The only thing serialized is the cache size of Map.\n *<p>\n * NOTE: since version 2.4.2, this is <b>NOT</b> an LRU-based at all; reason\n * being that it is not possible to use JDK components that do LRU _AND_ perform\n * well wrt synchronization on multi-core systems. So we choose efficient synchronization\n * over potentially more efficient handling of entries.\n *<p>\n * And yes, there are efficient LRU implementations such as\n * <a href=\"https:code.google.com/p/concurrentlinkedhashmap/\">concurrentlinkedhashmap</a>;\n * but at this point we really try to keep external deps to minimum. But perhaps\n * a shaded variant may be used one day.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/LRUMap.java",
        "signature": "int PROBE_END_LINE_35",
        "snippet": "int PROBE_END_LINE_35 = 35;\n// We'll use concurrency level of 4, seems reasonable\n_map = new ConcurrentHashMap<K,V>(p_initial_entries_2764_line_35, 0.8f, 4);",
        "begin_line": 36,
        "end_line": 38,
        "comment": "\n * Helper for simple bounded maps used for reusing lookup values.\n *<p>\n * Note that serialization behavior is such that contents are NOT serialized,\n * on assumption that all use cases are for caching where persistence\n * does not make sense. The only thing serialized is the cache size of Map.\n *<p>\n * NOTE: since version 2.4.2, this is <b>NOT</b> an LRU-based at all; reason\n * being that it is not possible to use JDK components that do LRU _AND_ perform\n * well wrt synchronization on multi-core systems. So we choose efficient synchronization\n * over potentially more efficient handling of entries.\n *<p>\n * And yes, there are efficient LRU implementations such as\n * <a href=\"https:code.google.com/p/concurrentlinkedhashmap/\">concurrentlinkedhashmap</a>;\n * but at this point we really try to keep external deps to minimum. But perhaps\n * a shaded variant may be used one day.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "signature": "int PROBE_START_LINE_84",
        "snippet": "int PROBE_START_LINE_84 = 85;\ncom.fasterxml.jackson.databind.deser.Deserializers[] p_all_additional_deserializers_992_line_84 = allAdditionalDeserializers;",
        "begin_line": 88,
        "end_line": 89,
        "comment": "    \n     * Copy-constructor that will create an instance that contains defined\n     * set of additional deserializer providers.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
        "signature": "boolean deserializer_factory_config1_expr9_line_84",
        "snippet": "boolean deserializer_factory_config1_expr9_line_84 = p_all_additional_deserializers_992_line_84 == null;\nboolean deserializer_factory_config1_expr8_line_84 = (deserializer_factory_config1_expr9_line_84);",
        "begin_line": 90,
        "end_line": 91,
        "comment": "    \n     * Copy-constructor that will create an instance that contains defined\n     * set of additional deserializer providers.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.BeanDescription",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/BeanDescription.java",
        "signature": "int PROBE_START_LINE_43",
        "snippet": "int PROBE_START_LINE_43 = 43;\ncom.fasterxml.jackson.databind.JavaType p_type_110_line_43 = type;",
        "begin_line": 43,
        "end_line": 44,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
        "signature": "int PROBE_START_LINE_21",
        "snippet": "int PROBE_START_LINE_21 = 21;\n\nstatic final char[] uuidserializer1_expr1_line_21 = \"0123456789abcdef\".toCharArray();",
        "begin_line": 21,
        "end_line": 23,
        "comment": "\n * Specialized {@link JsonSerializer} to output {@link java.util.UUID}s.\n * Beyond optimized access and writing of textual representation (which\n * is the default handling in most cases), it will alternatively\n * allow serialization using raw binary output (as 16-byte block)\n * if underlying data format has efficient means to access that.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.PropertyName",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/PropertyName.java",
        "signature": "int PROBE_END_LINE_22",
        "snippet": "int PROBE_END_LINE_22 = 28;\n\n/**\n* Special placeholder value that indicates that name to use should be\n* based on the standard heuristics. This can be different from returning\n* null, as null means \"no information available, whereas this value\n* indicates explicit defaulting.\n*/\npublic final static PropertyName USE_DEFAULT = new PropertyName(f___use_default_721_line_28, null);",
        "begin_line": 26,
        "end_line": 34,
        "comment": "\n * Simple value class used for containing names of properties as defined\n * by annotations (and possibly other configuration sources).\n * \n * @since 2.1\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
        "signature": "int PROBE_START_LINE_36",
        "snippet": "int PROBE_START_LINE_36 = 36;\ncom.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver p_overrides_1815_line_36 = overrides;",
        "begin_line": 36,
        "end_line": 37,
        "comment": "    \n     * Simple mix-in targets defined locally.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBase.java",
        "signature": "int PROBE_START_LINE_18",
        "snippet": "int PROBE_START_LINE_18 = 18;\n\nprivate static final com.fasterxml.jackson.databind.type.TypeBindings type_base1_expr1_line_18 = TypeBindings\n.emptyBindings();",
        "begin_line": 19,
        "end_line": 22,
        "comment": ""
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_START_LINE_30",
        "snippet": "int PROBE_START_LINE_30 = 30;\nToStringSerializer f_instance_1956_line_30 = ToStringSerializer.instance;",
        "begin_line": 32,
        "end_line": 33,
        "comment": "    \n     * Method called by {@link BasicSerializerFactory} to access\n     * all serializers this class provides.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_30",
        "snippet": "int PROBE_END_LINE_30 = 30;\n// First things that 'toString()' can handle\nfinal ToStringSerializer sls = f_instance_1956_line_30;",
        "begin_line": 34,
        "end_line": 36,
        "comment": "    \n     * Method called by {@link BasicSerializerFactory} to access\n     * all serializers this class provides.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_START_LINE_32",
        "snippet": "int PROBE_START_LINE_32 = 32;\nHashMap<Class<?>, Object> v_sers_2359_line_32 = (HashMap<Class<?>, Object>) (sers);",
        "begin_line": 38,
        "end_line": 39,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_32",
        "snippet": "int PROBE_END_LINE_32 = 32;\nv_sers_2359_line_32.put(java.net.URL.class, v_sls_2360_line_32);",
        "begin_line": 41,
        "end_line": 42,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_START_LINE_33",
        "snippet": "int PROBE_START_LINE_33 = 33;\nHashMap<Class<?>, Object> v_sers_2359_line_33 = (HashMap<Class<?>, Object>) (sers);",
        "begin_line": 43,
        "end_line": 44,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_33",
        "snippet": "int PROBE_END_LINE_33 = 33;\nv_sers_2359_line_33.put(java.net.URI.class, v_sls_2360_line_33);",
        "begin_line": 46,
        "end_line": 47,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_START_LINE_35",
        "snippet": "int PROBE_START_LINE_35 = 35;\nHashMap<Class<?>, Object> v_sers_2359_line_35 = (HashMap<Class<?>, Object>) (sers);",
        "begin_line": 49,
        "end_line": 50,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
        "signature": "int PROBE_END_LINE_35",
        "snippet": "int PROBE_END_LINE_35 = 35;\nv_sers_2359_line_35.put(Currency.class, v_sls_2360_line_35);",
        "begin_line": 52,
        "end_line": 53,
        "comment": "\t\t First things that 'toString()' can handle"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "signature": "int PROBE_START_LINE_49",
        "snippet": "int PROBE_START_LINE_49 = 50;\ncom.fasterxml.jackson.databind.ser.Serializers[] p_all_additional_serializers_1104_line_49 = allAdditionalSerializers;",
        "begin_line": 51,
        "end_line": 52,
        "comment": "    \n     * List of modifiers that can change the way {@link BeanSerializer} instances\n     * are configured and constructed.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
        "signature": "boolean serializer_factory_config1_expr6_line_49",
        "snippet": "boolean serializer_factory_config1_expr6_line_49 = p_all_additional_serializers_1104_line_49 == null;\nboolean serializer_factory_config1_expr5_line_49 = (serializer_factory_config1_expr6_line_49);",
        "begin_line": 53,
        "end_line": 54,
        "comment": "    \n     * List of modifiers that can change the way {@link BeanSerializer} instances\n     * are configured and constructed.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_58",
        "snippet": "int PROBE_START_LINE_58 = 58;\nHashMap<String, Class<? extends java.util.Map>> f__map_fallbacks_1119_line_58 = (HashMap<String, Class<? extends java.util.Map>>) (_mapFallbacks);",
        "begin_line": 61,
        "end_line": 62,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "String basic_deserializer_factory1_expr10_line_58",
        "snippet": "String basic_deserializer_factory1_expr10_line_58 = Map.class.getName();\nint PROBE_END_LINE_58 = 58;",
        "begin_line": 63,
        "end_line": 64,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_60",
        "snippet": "int PROBE_START_LINE_60 = 60;\nHashMap<String, Class<? extends java.util.Map>> f__map_fallbacks_1119_line_60 = (HashMap<String, Class<? extends java.util.Map>>) (_mapFallbacks);",
        "begin_line": 71,
        "end_line": 72,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_62",
        "snippet": "int PROBE_START_LINE_62 = 62;\nHashMap<String, Class<? extends java.util.Map>> f__map_fallbacks_1119_line_62 = (HashMap<String, Class<? extends java.util.Map>>) (_mapFallbacks);",
        "begin_line": 77,
        "end_line": 78,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "String basic_deserializer_factory1_expr22_line_62",
        "snippet": "String basic_deserializer_factory1_expr22_line_62 = java.util.NavigableMap.class.getName();\nint PROBE_END_LINE_62 = 62;",
        "begin_line": 79,
        "end_line": 80,
        "comment": "    /* We do some defaulting for abstract Map classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Maps will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "int PROBE_START_LINE_77",
        "snippet": "int PROBE_START_LINE_77 = 77;\nHashMap<String, Class<? extends java.util.Collection>> f__collection_fallbacks_1120_line_77 = (HashMap<String, Class<? extends java.util.Collection>>) (_collectionFallbacks);",
        "begin_line": 108,
        "end_line": 109,
        "comment": "    /* We do some defaulting for abstract Collection classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Collection will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "signature": "String basic_deserializer_factory1_expr39_line_77",
        "snippet": "String basic_deserializer_factory1_expr39_line_77 = Set.class.getName();\nint PROBE_END_LINE_77 = 77;",
        "begin_line": 110,
        "end_line": 111,
        "comment": "    /* We do some defaulting for abstract Collection classes and\n     * interfaces, to avoid having to use exact types or annotations in\n     * cases where the most common concrete Collection will do.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_142",
        "snippet": "int PROBE_START_LINE_142 = 142;\ncom.fasterxml.jackson.databind.JavaType p_type_1502_line_142 = type;",
        "begin_line": 143,
        "end_line": 144,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_142",
        "snippet": "int PROBE_END_LINE_142 = 142;\n_type = p_type_1502_line_142;",
        "begin_line": 145,
        "end_line": 146,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_143",
        "snippet": "int PROBE_START_LINE_143 = 143;\nClass<?> p_raw_type_1503_line_143 = rawType;",
        "begin_line": 147,
        "end_line": 148,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_END_LINE_143",
        "snippet": "int PROBE_END_LINE_143 = 143;\n_class = p_raw_type_1503_line_143;",
        "begin_line": 149,
        "end_line": 150,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
        "signature": "int PROBE_START_LINE_144",
        "snippet": "int PROBE_START_LINE_144 = 144;\ncom.fasterxml.jackson.databind.type.TypeBindings p_bindings_1504_line_144 = bindings;",
        "begin_line": 151,
        "end_line": 152,
        "comment": "    \n     * Constructor will not do any initializations, to allow for\n     * configuring instances differently depending on use cases\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
        "signature": "int PROBE_START_LINE_43",
        "snippet": "int PROBE_START_LINE_43 = 43;\nBoolean p_use_timestamp_2255_line_43 = useTimestamp;",
        "begin_line": 43,
        "end_line": 44,
        "comment": "    \n     * Specific format to use, if not default format: non null value\n     * also indicates that serialization is to be done as JSON String,\n     * not numeric timestamp, unless {@link #_useTimestamp} is true.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
        "signature": "int PROBE_END_LINE_43",
        "snippet": "int PROBE_END_LINE_43 = 43;\n_useTimestamp = p_use_timestamp_2255_line_43;",
        "begin_line": 45,
        "end_line": 46,
        "comment": "    \n     * Specific format to use, if not default format: non null value\n     * also indicates that serialization is to be done as JSON String,\n     * not numeric timestamp, unless {@link #_useTimestamp} is true.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
        "signature": "int PROBE_END_LINE_29",
        "snippet": "int PROBE_END_LINE_29 = 34;\n\n/**\n* Default singleton instance that construct \"standard\" node instances:\n* given that this class is stateless, a globally shared singleton\n* can be used.\n*/\npublic final static JsonNodeFactory instance = f_decimals_normalized_1925_line_34;",
        "begin_line": 33,
        "end_line": 40,
        "comment": "     with 2.2"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_70",
        "snippet": "int PROBE_START_LINE_70 = 70;\nHashMap<String, JsonSerializer<?>> v_concrete_1954_line_70 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 71,
        "end_line": 72,
        "comment": "    \n     * Actually it may not make much sense to eagerly instantiate all\n     * kinds of serializers: so this Map actually contains class references,\n     * not instances\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "String basic_serializer_factory1_expr4_line_70",
        "snippet": "String basic_serializer_factory1_expr4_line_70 = String.class.getName();\nint PROBE_END_LINE_70 = 70;",
        "begin_line": 73,
        "end_line": 74,
        "comment": "    \n     * Actually it may not make much sense to eagerly instantiate all\n     * kinds of serializers: so this Map actually contains class references,\n     * not instances\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_71",
        "snippet": "int PROBE_START_LINE_71 = 71;\nToStringSerializer f_instance_1956_line_71 = ToStringSerializer.instance;",
        "begin_line": 79,
        "end_line": 80,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_72",
        "snippet": "int PROBE_START_LINE_72 = 72;\nHashMap<String, JsonSerializer<?>> v_concrete_1954_line_72 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 83,
        "end_line": 84,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_72",
        "snippet": "int PROBE_END_LINE_72 = 72;\nv_concrete_1954_line_72.put(basic_serializer_factory1_expr8_line_72, v_sls_1955_line_72);",
        "begin_line": 87,
        "end_line": 88,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_73",
        "snippet": "int PROBE_START_LINE_73 = 73;\nHashMap<String, JsonSerializer<?>> v_concrete_1954_line_73 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 89,
        "end_line": 90,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "String basic_serializer_factory1_expr11_line_73",
        "snippet": "String basic_serializer_factory1_expr11_line_73 = StringBuilder.class.getName();\ncom.fasterxml.jackson.databind.ser.std.ToStringSerializer v_sls_1955_line_73 = sls;",
        "begin_line": 91,
        "end_line": 92,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_74",
        "snippet": "int PROBE_START_LINE_74 = 74;\nHashMap<String, JsonSerializer<?>> v_concrete_1954_line_74 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 95,
        "end_line": 96,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_74",
        "snippet": "int PROBE_END_LINE_74 = 74;\nv_concrete_1954_line_74.put(basic_serializer_factory1_expr14_line_74, v_sls_1955_line_74);",
        "begin_line": 99,
        "end_line": 100,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_75",
        "snippet": "int PROBE_START_LINE_75 = 75;\nHashMap<String, JsonSerializer<?>> v_concrete_1954_line_75 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 101,
        "end_line": 102,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "Class<Character> f_type_1957_line_75",
        "snippet": "Class<Character> f_type_1957_line_75 = Character.TYPE;\nString basic_serializer_factory1_expr17_line_75 = f_type_1957_line_75.getName();",
        "begin_line": 103,
        "end_line": 104,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_75",
        "snippet": "int PROBE_END_LINE_75 = 75;\nv_concrete_1954_line_75.put(basic_serializer_factory1_expr17_line_75, v_sls_1955_line_75);",
        "begin_line": 106,
        "end_line": 107,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_78",
        "snippet": "int PROBE_START_LINE_78 = 78;\nHashMap<String, JsonSerializer<?>> v_concrete_1954_line_78 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 109,
        "end_line": 110,
        "comment": "\t\t/* String and string-like types (note: date types explicitly\n         * not included -- can use either textual or numeric serialization)\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_START_LINE_79",
        "snippet": "int PROBE_START_LINE_79 = 79;\nHashMap<String, JsonSerializer<?>> v_concrete_1954_line_79 = (HashMap<String, JsonSerializer<?>>) (concrete);",
        "begin_line": 114,
        "end_line": 115,
        "comment": "\t\t Primitives/wrappers for primitives (primitives needed for Beans)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "Class<Boolean> f_type_1633_line_79",
        "snippet": "Class<Boolean> f_type_1633_line_79 = Boolean.TYPE;\nString basic_serializer_factory1_expr20_line_79 = f_type_1633_line_79.getName();",
        "begin_line": 116,
        "end_line": 117,
        "comment": "\t\t Primitives/wrappers for primitives (primitives needed for Beans)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_79",
        "snippet": "int PROBE_END_LINE_79 = 79;\nv_concrete_1954_line_79.put(basic_serializer_factory1_expr20_line_79, new BooleanSerializer(true));",
        "begin_line": 118,
        "end_line": 119,
        "comment": "\t\t Primitives/wrappers for primitives (primitives needed for Beans)"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "signature": "int PROBE_END_LINE_88",
        "snippet": "int PROBE_END_LINE_88 = 88;\n// Other discrete non-container types:\n// First, Date/Time zoo:\nv_concrete_1954_line_88.put(basic_serializer_factory1_expr39_line_88, f_instance_1958_line_88);",
        "begin_line": 142,
        "end_line": 145,
        "comment": "\t\t Other numbers, more complicated"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java",
        "signature": "int PROBE_START_LINE_29",
        "snippet": "int PROBE_START_LINE_29 = 29;\nString p_msg_2204_line_29 = msg;",
        "begin_line": 29,
        "end_line": 30,
        "comment": "\n * Special bogus \"serializer\" that will throw\n * {@link JsonGenerationException} if its {@link #serialize}\n * gets invoked. Most commonly registered as handler for unknown types,\n * as well as for catching unintended usage (like trying to use null\n * as Map/Object key).\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "signature": "int PROBE_START_LINE_42",
        "snippet": "int PROBE_START_LINE_42 = 45;\n\nprotected static final com.fasterxml.jackson.annotation.JsonInclude.Value mapper_config1_expr1_line_45 = JsonInclude.Value\n.empty();",
        "begin_line": 44,
        "end_line": 47,
        "comment": "\n * Interface that defines functionality accessible through both\n * serialization and deserialization configuration objects;\n * accessors to mode-independent configuration settings\n * and such.\n * In addition, shared features are defined\n * in {@link MapperFeature}.\n *<p>\n * Small part of implementation is included here by aggregating\n * {@link BaseSettings} instance that contains configuration\n * that is shared between different types of instances.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "signature": "int PROBE_END_LINE_42",
        "snippet": "int PROBE_END_LINE_42 = 45;\n\n/**\n* @since 2.7\n*/\nprotected final static JsonInclude.Value EMPTY_INCLUDE = mapper_config1_expr1_line_45;",
        "begin_line": 49,
        "end_line": 54,
        "comment": "\n * Interface that defines functionality accessible through both\n * serialization and deserialization configuration objects;\n * accessors to mode-independent configuration settings\n * and such.\n * In addition, shared features are defined\n * in {@link MapperFeature}.\n *<p>\n * Small part of implementation is included here by aggregating\n * {@link BaseSettings} instance that contains configuration\n * that is shared between different types of instances.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
        "signature": "int PROBE_END_LINE_104",
        "snippet": "int PROBE_END_LINE_104 = 104;\nreturn v_flags_1019_line_104;",
        "begin_line": 140,
        "end_line": 141,
        "comment": "    \n     * Method that calculates bit set (flags) of all features that\n     * are enabled by default.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MappingJsonFactory.java",
        "signature": "int PROBE_START_LINE_31",
        "snippet": "int PROBE_START_LINE_31 = 33;\ncom.fasterxml.jackson.databind.ObjectMapper p_mapper_393_line_31 = mapper;",
        "begin_line": 31,
        "end_line": 32,
        "comment": "     generated for Jackson 2.1.0"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MappingJsonFactory.java",
        "signature": "boolean mapping_json_factory1_expr2_line_31",
        "snippet": "boolean mapping_json_factory1_expr2_line_31 = p_mapper_393_line_31 == null;\nint PROBE_END_LINE_31 = 33;",
        "begin_line": 33,
        "end_line": 34,
        "comment": "     generated for Jackson 2.1.0"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeParser.java",
        "signature": "int PROBE_START_LINE_19",
        "snippet": "int PROBE_START_LINE_19 = 19;\ncom.fasterxml.jackson.databind.type.TypeFactory p_f_2752_line_19 = f;",
        "begin_line": 19,
        "end_line": 20,
        "comment": "\n * Simple recursive-descent parser for parsing canonical {@link JavaType}\n * representations and constructing type instances.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/SimpleType.java",
        "signature": "int PROBE_START_LINE_71",
        "snippet": "int PROBE_START_LINE_71 = 73;\nClass<?> p_raw_2520_line_71 = raw;",
        "begin_line": 71,
        "end_line": 72,
        "comment": "    \n     * Method used by core Jackson classes: NOT to be used by application code.\n     *<p>\n     * NOTE: public only because it is called by <code>ObjectMapper</code> which is\n     * not in same package\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_START_LINE_29",
        "snippet": "int PROBE_START_LINE_29 = 29;\nMap<String, JsonSerializer<?>> p_all_deserializers_2306_line_29 = (Map<String, JsonSerializer<?>>) (allDeserializers);",
        "begin_line": 31,
        "end_line": 32,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "String number_serializers1_expr3_line_29",
        "snippet": "String number_serializers1_expr3_line_29 = Integer.class.getName();\nJsonSerializer<?> v_int_s_2307_line_29 = intS;",
        "begin_line": 33,
        "end_line": 34,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_END_LINE_29",
        "snippet": "int PROBE_END_LINE_29 = 29;\np_all_deserializers_2306_line_29.put(number_serializers1_expr3_line_29, v_int_s_2307_line_29);",
        "begin_line": 35,
        "end_line": 36,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "Class<Integer> f_type_1636_line_30",
        "snippet": "Class<Integer> f_type_1636_line_30 = Integer.TYPE;\nString number_serializers1_expr6_line_30 = f_type_1636_line_30.getName();",
        "begin_line": 39,
        "end_line": 40,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_END_LINE_30",
        "snippet": "int PROBE_END_LINE_30 = 30;\np_all_deserializers_2306_line_30.put(number_serializers1_expr6_line_30, v_int_s_2307_line_30);",
        "begin_line": 42,
        "end_line": 43,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "String number_serializers1_expr13_line_33",
        "snippet": "String number_serializers1_expr13_line_33 = Byte.class.getName();\ncom.fasterxml.jackson.databind.ser.std.NumberSerializers.IntLikeSerializer f_instance_2309_line_33 = IntLikeSerializer.instance;",
        "begin_line": 59,
        "end_line": 60,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "int PROBE_END_LINE_33",
        "snippet": "int PROBE_END_LINE_33 = 33;\np_all_deserializers_2306_line_33.put(number_serializers1_expr13_line_33, f_instance_2309_line_33);",
        "begin_line": 61,
        "end_line": 62,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "Class<Byte> f_type_2310_line_34",
        "snippet": "Class<Byte> f_type_2310_line_34 = Byte.TYPE;\nString number_serializers1_expr16_line_34 = f_type_2310_line_34.getName();",
        "begin_line": 65,
        "end_line": 66,
        "comment": "\n * Container class for serializers used for handling standard JDK-provided\n * types.\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "boolean number_serializers1_expr36_line_62",
        "snippet": "boolean number_serializers1_expr36_line_62 = p_number_type_2318_line_62 == f_int_2323_line_62;\nboolean number_serializers1_expr35_line_62 = (number_serializers1_expr36_line_62);",
        "begin_line": 139,
        "end_line": 140,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "signature": "AnnotatedMember m",
        "snippet": "AnnotatedMember m = property.getMember();\nif (m != null) {\nJsonFormat.Value format = prov.getAnnotationIntrospector()\n.findFormat(m);",
        "begin_line": 167,
        "end_line": 170,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_START_LINE_110",
        "snippet": "int PROBE_START_LINE_110 = 110;\nint deserialization_config1_expr2_line_110 = collectFeatureDefaults(DeserializationFeature.class);",
        "begin_line": 110,
        "end_line": 111,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_END_LINE_110",
        "snippet": "int PROBE_END_LINE_110 = 110;\n_deserFeatures = deserialization_config1_expr2_line_110;",
        "begin_line": 112,
        "end_line": 113,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_START_LINE_111",
        "snippet": "int PROBE_START_LINE_111 = 111;\ncom.fasterxml.jackson.databind.node.JsonNodeFactory f_instance_140_line_111 = JsonNodeFactory.instance;",
        "begin_line": 114,
        "end_line": 115,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "signature": "int PROBE_END_LINE_111",
        "snippet": "int PROBE_END_LINE_111 = 111;\n_nodeFactory = f_instance_140_line_111;",
        "begin_line": 116,
        "end_line": 117,
        "comment": "    \n     * Constructor used by ObjectMapper to create default configuration object instance.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "signature": "int PROBE_START_LINE_396",
        "snippet": "int PROBE_START_LINE_396 = 396;\nboolean p_default_state_389_line_396 = defaultState;",
        "begin_line": 396,
        "end_line": 397,
        "comment": "    \n     * Feature that determines whether multiple registrations of same module\n     * should be ignored or not; if enabled, only the first registration call\n     * results in module being called, and possible duplicate calls are silently\n     * ignored; if disabled, no checking is done and all registration calls are\n     * dispatched to module.\n     *<p>\n     * Definition of \"same module\" is based on using {@link Module#getTypeId()};\n     * modules with same non-null <code>type id</code> are considered same for\n     * purposes of duplicate registration. This also avoids having to keep track\n     * of actual module instances; only ids will be kept track of (and only if\n     * this feature is enabled).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "signature": "int PROBE_END_LINE_396",
        "snippet": "int PROBE_END_LINE_396 = 396;\n_defaultState = p_default_state_389_line_396;",
        "begin_line": 398,
        "end_line": 399,
        "comment": "    \n     * Feature that determines whether multiple registrations of same module\n     * should be ignored or not; if enabled, only the first registration call\n     * results in module being called, and possible duplicate calls are silently\n     * ignored; if disabled, no checking is done and all registration calls are\n     * dispatched to module.\n     *<p>\n     * Definition of \"same module\" is based on using {@link Module#getTypeId()};\n     * modules with same non-null <code>type id</code> are considered same for\n     * purposes of duplicate registration. This also avoids having to keep track\n     * of actual module instances; only ids will be kept track of (and only if\n     * this feature is enabled).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "signature": "int PROBE_START_LINE_397",
        "snippet": "int PROBE_START_LINE_397 = 397;\nint mapper_feature1_expr3_line_397 = ordinal();",
        "begin_line": 400,
        "end_line": 401,
        "comment": "    \n     * Feature that determines whether multiple registrations of same module\n     * should be ignored or not; if enabled, only the first registration call\n     * results in module being called, and possible duplicate calls are silently\n     * ignored; if disabled, no checking is done and all registration calls are\n     * dispatched to module.\n     *<p>\n     * Definition of \"same module\" is based on using {@link Module#getTypeId()};\n     * modules with same non-null <code>type id</code> are considered same for\n     * purposes of duplicate registration. This also avoids having to keep track\n     * of actual module instances; only ids will be kept track of (and only if\n     * this feature is enabled).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.MapperFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/MapperFeature.java",
        "signature": "int PROBE_END_LINE_397",
        "snippet": "int PROBE_END_LINE_397 = 397;\n_mask = mapper_feature1_expr1_line_397;",
        "begin_line": 404,
        "end_line": 405,
        "comment": "    \n     * Feature that determines whether multiple registrations of same module\n     * should be ignored or not; if enabled, only the first registration call\n     * results in module being called, and possible duplicate calls are silently\n     * ignored; if disabled, no checking is done and all registration calls are\n     * dispatched to module.\n     *<p>\n     * Definition of \"same module\" is based on using {@link Module#getTypeId()};\n     * modules with same non-null <code>type id</code> are considered same for\n     * purposes of duplicate registration. This also avoids having to keep track\n     * of actual module instances; only ids will be kept track of (and only if\n     * this feature is enabled).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_20",
        "snippet": "int PROBE_START_LINE_20 = 20;\n\nprivate static final String[] f_no_strings_2563_line_20 = NO_STRINGS;",
        "begin_line": 20,
        "end_line": 22,
        "comment": "\n * Helper class used for resolving type parameters for given class\n "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "int PROBE_START_LINE_53",
        "snippet": "int PROBE_START_LINE_53 = 53;\nString[] p_names_2566_line_53 = names;",
        "begin_line": 61,
        "end_line": 62,
        "comment": "    ********************************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "boolean type_bindings1_expr6_line_53",
        "snippet": "boolean type_bindings1_expr6_line_53 = p_names_2566_line_53 == null;\nboolean type_bindings1_expr5_line_53 = (type_bindings1_expr6_line_53);",
        "begin_line": 63,
        "end_line": 64,
        "comment": "    ********************************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "signature": "String[] f_no_strings_2563_line_53",
        "snippet": "String[] f_no_strings_2563_line_53 = null;\nif (type_bindings1_expr5_line_53) {\nf_no_strings_2563_line_53 = NO_STRINGS;",
        "begin_line": 65,
        "end_line": 67,
        "comment": "    ********************************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_START_LINE_79",
        "snippet": "int PROBE_START_LINE_79 = 79;\nClass<?> p_raw_342_line_79 = raw;",
        "begin_line": 79,
        "end_line": 80,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_END_LINE_79",
        "snippet": "int PROBE_END_LINE_79 = 79;\n_class = p_raw_342_line_79;",
        "begin_line": 81,
        "end_line": 82,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.JavaType",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/JavaType.java",
        "signature": "int PROBE_START_LINE_80",
        "snippet": "int PROBE_START_LINE_80 = 80;\nClass<?> p_raw_342_line_80 = raw;",
        "begin_line": 83,
        "end_line": 84,
        "comment": "    \n     * @param raw \"Raw\" (type-erased) class for this type\n     * @param additionalHash Additional hash code to use, in addition\n     *   to hash code of the class name \n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "signature": "int PROBE_END_LINE_121",
        "snippet": "int PROBE_END_LINE_121 = 127;\n\n/**\n* Serializer that gets called for values of types for which no\n* serializers can be constructed.\n*<p>\n* The default serializer will simply thrown an exception.\n*/\nprotected JsonSerializer<Object> _unknownTypeSerializer = f_default_unknown_serializer_838_line_127;",
        "begin_line": 125,
        "end_line": 133,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializerProvider.java",
        "signature": "int PROBE_END_LINE_136",
        "snippet": "int PROBE_END_LINE_136 = 140;\n\n/**\n* Serializer used to output a null value. Default implementation\n* writes nulls using {@link JsonGenerator#writeNull}.\n*/\nprotected JsonSerializer<Object> _nullValueSerializer = f_instance_841_line_140;",
        "begin_line": 146,
        "end_line": 152,
        "comment": "    \n     * Serializer used to output non-null keys of Maps (which will get\n     * output as JSON Objects), if not null; if null, us the standard\n     * default key serializer.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
        "signature": "int PROBE_START_LINE_93",
        "snippet": "int PROBE_START_LINE_93 = 93;\nMap<?, ?> p_shared_972_line_93 = shared;",
        "begin_line": 103,
        "end_line": 104,
        "comment": "        ********************************************************\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
        "signature": "int PROBE_START_LINE_59",
        "snippet": "int PROBE_START_LINE_59 = 59;\nClass<T> p_t_2395_line_59 = (Class<T>) (t);",
        "begin_line": 59,
        "end_line": 60,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_START_LINE_155",
        "snippet": "int PROBE_START_LINE_155 = 157;\ncom.fasterxml.jackson.databind.deser.DeserializerFactory p_df_229_line_155 = df;",
        "begin_line": 155,
        "end_line": 156,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "boolean deserialization_context1_expr1_line_155",
        "snippet": "boolean deserialization_context1_expr1_line_155 = p_df_229_line_155 == null;\nint PROBE_END_LINE_155 = 157;",
        "begin_line": 157,
        "end_line": 158,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_START_LINE_158",
        "snippet": "int PROBE_START_LINE_158 = 158;\ncom.fasterxml.jackson.databind.deser.DeserializerFactory p_df_229_line_158 = df;",
        "begin_line": 162,
        "end_line": 163,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_END_LINE_158",
        "snippet": "int PROBE_END_LINE_158 = 158;\n_factory = p_df_229_line_158;",
        "begin_line": 164,
        "end_line": 165,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/DeserializationContext.java",
        "signature": "int PROBE_START_LINE_159",
        "snippet": "int PROBE_START_LINE_159 = 159;\ncom.fasterxml.jackson.databind.deser.DeserializerCache p_cache_230_line_159 = cache;",
        "begin_line": 166,
        "end_line": 167,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
        "signature": "int PROBE_END_LINE_178",
        "snippet": "int PROBE_END_LINE_178 = 178;\nreturn f_default_1843_line_178; }\n\n/**\n* Constructor used for building instance that has minumum visibility\n* levels as indicated by given annotation instance\n*\n* @param ann Annotations to use for determining minimum visibility levels\n*/\npublic Std(JsonAutoDetect ann)\n{\nint PROBE_START_LINE_189 = 189;",
        "begin_line": 187,
        "end_line": 198,
        "comment": "\t\t\n         * This is the canonical base instance, configured with default\n         * visibility values\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_START_LINE_151",
        "snippet": "int PROBE_START_LINE_151 = 151;\ncom.fasterxml.jackson.databind.introspect.ClassIntrospector p_ci_924_line_151 = ci;",
        "begin_line": 153,
        "end_line": 154,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_END_LINE_151",
        "snippet": "int PROBE_END_LINE_151 = 151;\n_classIntrospector = p_ci_924_line_151;",
        "begin_line": 155,
        "end_line": 156,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_START_LINE_152",
        "snippet": "int PROBE_START_LINE_152 = 152;\ncom.fasterxml.jackson.databind.AnnotationIntrospector p_ai_925_line_152 = ai;",
        "begin_line": 157,
        "end_line": 158,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_END_LINE_152",
        "snippet": "int PROBE_END_LINE_152 = 152;\n_annotationIntrospector = p_ai_925_line_152;",
        "begin_line": 159,
        "end_line": 160,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_START_LINE_153",
        "snippet": "int PROBE_START_LINE_153 = 153;\nVisibilityChecker<?> p_vc_926_line_153 = vc;",
        "begin_line": 161,
        "end_line": 162,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_END_LINE_155",
        "snippet": "int PROBE_END_LINE_155 = 155;\n_typeFactory = p_tf_928_line_155;",
        "begin_line": 171,
        "end_line": 172,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
        "signature": "int PROBE_START_LINE_156",
        "snippet": "int PROBE_START_LINE_156 = 156;\nTypeResolverBuilder<?> p_typer_929_line_156 = typer;",
        "begin_line": 173,
        "end_line": 174,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_END_LINE_265",
        "snippet": "int PROBE_END_LINE_265 = 265;\n\nprotected final static VisibilityChecker<?> STD_VISIBILITY_CHECKER = object_mapper1_expr3_line_265;",
        "begin_line": 271,
        "end_line": 273,
        "comment": "     16-May-2009, tatu: Ditto ^^^"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_END_LINE_529",
        "snippet": "int PROBE_END_LINE_529 = 529;\n// and default type factory is shared one\n_typeFactory = object_mapper1_expr16_line_529;",
        "begin_line": 542,
        "end_line": 544,
        "comment": "\t\t/* 02-Mar-2009, tatu: Important: we MUST default to using\n         *   the mapping factory, otherwise tree serialization will\n         *   have problems with POJONodes.\n         * 03-Jan-2010, tatu: and obviously we also must pass 'this',\n         *    to create actual linking.\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "SimpleMixInResolver mixins",
        "snippet": "SimpleMixInResolver mixins = new SimpleMixInResolver(null);\nint PROBE_START_LINE_532 = 532;",
        "begin_line": 546,
        "end_line": 547,
        "comment": "\t\t and default type factory is shared one"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_START_LINE_534",
        "snippet": "int PROBE_START_LINE_534 = 534;\ncom.fasterxml.jackson.databind.cfg.BaseSettings f_default_base_409_line_534 = DEFAULT_BASE;",
        "begin_line": 552,
        "end_line": 553,
        "comment": "\t\t and default type factory is shared one"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ObjectMapper.java",
        "signature": "int PROBE_END_LINE_535",
        "snippet": "int PROBE_END_LINE_535 = 536;\n_serializationConfig = new SerializationConfig(v_base_423_line_535,\n_subtypeResolver, mixins, rootNames);",
        "begin_line": 561,
        "end_line": 563,
        "comment": "\t\t and default type factory is shared one"
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_33",
        "snippet": "int PROBE_START_LINE_33 = 33;\nAnnotatedClass basic_class_introspector1_expr1_line_33 = AnnotatedClass.constructWithoutSuperTypes(String.class,\nnull);",
        "begin_line": 33,
        "end_line": 35,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_34",
        "snippet": "int PROBE_START_LINE_34 = 34;\ncom.fasterxml.jackson.databind.type.SimpleType basic_class_introspector1_expr4_line_34 = SimpleType\n.constructUnsafe(String.class);",
        "begin_line": 38,
        "end_line": 40,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_END_LINE_34",
        "snippet": "int PROBE_END_LINE_34 = 34;\nSTRING_DESC = basic_class_introspector1_expr3_line_34;",
        "begin_line": 44,
        "end_line": 45,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_START_LINE_38",
        "snippet": "int PROBE_START_LINE_38 = 38;\nClass<Boolean> f_type_1633_line_38 = Boolean.TYPE;",
        "begin_line": 49,
        "end_line": 50,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
        "signature": "int PROBE_END_LINE_43",
        "snippet": "int PROBE_END_LINE_43 = 43;\nAnnotatedClass ac = basic_class_introspector1_expr9_line_43;",
        "begin_line": 71,
        "end_line": 72,
        "comment": "    /* We keep a small set of pre-constructed descriptions to use for\n     * common non-structured values, such as Numbers and Strings.\n     * This is strictly performance optimization to reduce what is\n     * usually one-time cost, but seems useful for some cases considering\n     * simplicity.\n     * \n     * @since 2.4\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "signature": "int PROBE_START_LINE_412",
        "snippet": "int PROBE_START_LINE_412 = 412;\nboolean p_default_state_833_line_412 = defaultState;",
        "begin_line": 412,
        "end_line": 413,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "signature": "int PROBE_END_LINE_412",
        "snippet": "int PROBE_END_LINE_412 = 412;\n_defaultState = p_default_state_833_line_412;",
        "begin_line": 414,
        "end_line": 415,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "signature": "int PROBE_START_LINE_413",
        "snippet": "int PROBE_START_LINE_413 = 413;\nint serialization_feature1_expr3_line_413 = ordinal();",
        "begin_line": 416,
        "end_line": 417,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/SerializationFeature.java",
        "signature": "int PROBE_END_LINE_413",
        "snippet": "int PROBE_END_LINE_413 = 413;\n_mask = serialization_feature1_expr1_line_413;",
        "begin_line": 420,
        "end_line": 421,
        "comment": "    \n     * Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * \"same\") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
        "signature": "int PROBE_START_LINE_36",
        "snippet": "int PROBE_START_LINE_36 = 36;\nboolean p_for_primitive_2229_line_36 = forPrimitive;",
        "begin_line": 36,
        "end_line": 37,
        "comment": "    \n     * Whether type serialized is primitive (boolean) or wrapper\n     * (java.lang.Boolean); if true, former, if false, latter.\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "signature": "int PROBE_START_LINE_69",
        "snippet": "int PROBE_START_LINE_69 = 69;\njava.util.TimeZone std_date_format1_expr2_line_69 = TimeZone.getTimeZone(\"UTC\");",
        "begin_line": 71,
        "end_line": 72,
        "comment": "    \n     * By default we use UTC for everything, with Jackson 2.7 and later\n     * (2.6 and earlier relied on GMT)\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "signature": "int PROBE_END_LINE_96",
        "snippet": "int PROBE_END_LINE_96 = 96;\nDATE_FORMAT_PLAIN = new SimpleDateFormat(f_date_format_str_plain_2791_line_96, f_default_locale_2782_line_96);",
        "begin_line": 134,
        "end_line": 135,
        "comment": "        /* Another important thing: let's force use of default timezone for\n         * baseline DataFormat objects\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "signature": "int PROBE_START_LINE_97",
        "snippet": "int PROBE_START_LINE_97 = 97;\njava.text.DateFormat f_date_format_plain_2790_line_97 = DATE_FORMAT_PLAIN;",
        "begin_line": 136,
        "end_line": 137,
        "comment": "        /* Another important thing: let's force use of default timezone for\n         * baseline DataFormat objects\n         "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "signature": "int PROBE_END_LINE_135",
        "snippet": "int PROBE_END_LINE_135 = 135;\n_locale = f_default_locale_2782_line_135;",
        "begin_line": 180,
        "end_line": 181,
        "comment": "    ********************************************************\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "signature": "int PROBE_START_LINE_37",
        "snippet": "int PROBE_START_LINE_37 = 37;\nClass<? extends Number> p_raw_type_2297_line_37 = rawType;",
        "begin_line": 36,
        "end_line": 37,
        "comment": "    \n     * @since 2.5\n     "
    },
    {
        "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
        "src_path": "/data/bug_db/subjects/defects4j/JacksonDatabind-36/result/src/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "signature": "boolean number_serializer1_expr6_line_37",
        "snippet": "boolean number_serializer1_expr6_line_37 = p_raw_type_2297_line_37 == BigInteger.class;\nboolean number_serializer1_expr5_line_37 = (number_serializer1_expr6_line_37);",
        "begin_line": 38,
        "end_line": 39,
        "comment": "    \n     * @since 2.5\n     "
    }
]