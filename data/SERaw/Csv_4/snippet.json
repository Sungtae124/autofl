[
    {
        "name": "org.apache.commons.csv.Quote.unknown#24",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Quote.java",
        "class_name": "org.apache.commons.csv.Quote",
        "signature": "org.apache.commons.csv.Quote.unknown(...)",
        "snippet": "public enum Quote {",
        "begin_line": 24,
        "end_line": 24,
        "comment": "\n * Defines quote behavior when printing.\n *\n * @version $Id$\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Quote.unknown#29",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Quote.java",
        "class_name": "org.apache.commons.csv.Quote",
        "signature": "org.apache.commons.csv.Quote.unknown(...)",
        "snippet": "ALL,",
        "begin_line": 29,
        "end_line": 29,
        "comment": "    \n     * Quotes all fields.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Quote.unknown#35",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Quote.java",
        "class_name": "org.apache.commons.csv.Quote",
        "signature": "org.apache.commons.csv.Quote.unknown(...)",
        "snippet": "MINIMAL,",
        "begin_line": 35,
        "end_line": 35,
        "comment": "    \n     * Quotes fields which contain special characters such as a delimiter, quote character or any of the characters in\n     * line separator.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Quote.unknown#40",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Quote.java",
        "class_name": "org.apache.commons.csv.Quote",
        "signature": "org.apache.commons.csv.Quote.unknown(...)",
        "snippet": "NON_NUMERIC,",
        "begin_line": 40,
        "end_line": 40,
        "comment": "    \n     * Quotes all non-numeric fields.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Quote.unknown#47",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Quote.java",
        "class_name": "org.apache.commons.csv.Quote",
        "signature": "org.apache.commons.csv.Quote.unknown(...)",
        "snippet": "NONE",
        "begin_line": 47,
        "end_line": 47,
        "comment": "    \n     * Never quotes fields. When the delimiter occurs in data, it is preceded by the current escape character. If the\n     * escape character is not set, printing will throw an exception if any characters that require escaping are\n     * encountered.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#174",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "* <li>withQuoteChar('\"')</li>",
        "begin_line": 174,
        "end_line": 174,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#186",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "",
        "begin_line": 186,
        "end_line": 186,
        "comment": "\t\n     * Standard comma separated format, as for {@link #RFC4180} but allowing empty lines.\n     * <h3>RFC 4180:</h3>\n     * <ul>\n     * <li>withDelimiter(',')</li>\n     * <li>withQuoteChar('\"')</li>\n     * <li>withRecordSeparator(CRLF)</li>\n     * </ul>\n     * <h3>Additional:</h3>\n     * <ul>\n     * <li>withIgnoreEmptyLines(true)</li>\n     * </ul>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#205",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "int PROBE_START_LINE_188 = 205;",
        "begin_line": 205,
        "end_line": 205,
        "comment": "\t\n     * Comma separated format as defined by <a href=\"http:tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n     * <h3>RFC 4180:</h3>\n     * <ul>\n     * <li>withDelimiter(',')</li>\n     * <li>withQuoteChar('\"')</li>\n     * <li>withRecordSeparator(CRLF)</li>\n     * </ul>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#208",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "",
        "begin_line": 208,
        "end_line": 208,
        "comment": "\t\n     * Comma separated format as defined by <a href=\"http:tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n     * <h3>RFC 4180:</h3>\n     * <ul>\n     * <li>withDelimiter(',')</li>\n     * <li>withQuoteChar('\"')</li>\n     * <li>withRecordSeparator(CRLF)</li>\n     * </ul>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#221",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "* CSVFormat fmt = CSVFormat.newBuilder(EXCEL).withDelimiter(';');",
        "begin_line": 221,
        "end_line": 221,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#238",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "",
        "begin_line": 238,
        "end_line": 238,
        "comment": "     Tab-delimited format, with quote; leading and trailing spaces ignored. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#250",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": ".withEscape(BACKSLASH)",
        "begin_line": 250,
        "end_line": 250,
        "comment": "    \n     * Default MySQL format used by the <tt>SELECT INTO OUTFILE</tt> and <tt>LOAD DATA INFILE</tt> operations. This is\n     * a tab-delimited format with a LF character as the line separator. Values are not quoted and special characters\n     * are escaped with '\\'.\n     *\n     * @see <a href=\"http:dev.mysql.com/doc/refman/5.1/en/load-data.html\">\n     *      http:dev.mysql.com/doc/refman/5.1/en/load-data.html</a>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#296",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "int PROBE_END_LINE_250 = 250;",
        "begin_line": 296,
        "end_line": 296,
        "comment": "    \n     * Returns true if the given character is a line break character.\n     *\n     * @param c\n     *            the character to check, may be null\n     *\n     * @return true if <code>c</code> is a line break character (and not null)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#297",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "return csvformat1_expr14_line_250;",
        "begin_line": 297,
        "end_line": 297,
        "comment": "    \n     * Returns true if the given character is a line break character.\n     *\n     * @param c\n     *            the character to check, may be null\n     *\n     * @return true if <code>c</code> is a line break character (and not null)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#300",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "/**",
        "begin_line": 300,
        "end_line": 300,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#301",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "* Creates a new CSV format with the specified delimiter.",
        "begin_line": 301,
        "end_line": 301,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#302",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "*",
        "begin_line": 302,
        "end_line": 302,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#303",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "* @param delimiter",
        "begin_line": 303,
        "end_line": 303,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#304",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "*            the char used for value separation, must not be a line break character",
        "begin_line": 304,
        "end_line": 304,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#305",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "* @return a new CSV format.",
        "begin_line": 305,
        "end_line": 305,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#306",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "* @throws IllegalArgumentException if the delimiter is a line break character",
        "begin_line": 306,
        "end_line": 306,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#307",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "*/",
        "begin_line": 307,
        "end_line": 307,
        "comment": "    \n     * Creates a new CSV format with the specified delimiter.\n     *\n     * @param delimiter\n     *            the char used for value separation, must not be a line break character\n     * @return a new CSV format.\n     * @throws IllegalArgumentException if the delimiter is a line break character\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#308",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "public static CSVFormat newFormat(final char delimiter) {",
        "begin_line": 308,
        "end_line": 308,
        "comment": "    \n     * Creates a new CSV format with the specified delimiter.\n     *\n     * @param delimiter\n     *            the char used for value separation, must not be a line break character\n     * @return a new CSV format.\n     * @throws IllegalArgumentException if the delimiter is a line break character\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#309",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, false);",
        "begin_line": 309,
        "end_line": 309,
        "comment": "    \n     * Creates a new CSV format with the specified delimiter.\n     *\n     * @param delimiter\n     *            the char used for value separation, must not be a line break character\n     * @return a new CSV format.\n     * @throws IllegalArgumentException if the delimiter is a line break character\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#310",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "}",
        "begin_line": 310,
        "end_line": 310,
        "comment": "    \n     * Creates a new CSV format with the specified delimiter.\n     *\n     * @param delimiter\n     *            the char used for value separation, must not be a line break character\n     * @return a new CSV format.\n     * @throws IllegalArgumentException if the delimiter is a line break character\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#311",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "",
        "begin_line": 311,
        "end_line": 311,
        "comment": "    \n     * Creates a new CSV format with the specified delimiter.\n     *\n     * @param delimiter\n     *            the char used for value separation, must not be a line break character\n     * @return a new CSV format.\n     * @throws IllegalArgumentException if the delimiter is a line break character\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#396",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "this.header = csvformat1_expr29_line_309;",
        "begin_line": 396,
        "end_line": 396,
        "comment": "     package protected to give access without needing a synthetic accessor",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#405",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "if (this == obj) {",
        "begin_line": 405,
        "end_line": 405,
        "comment": "     package protected to give access without needing a synthetic accessor",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#414",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "",
        "begin_line": 414,
        "end_line": 414,
        "comment": "     package protected to give access without needing a synthetic accessor",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#423",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "if (other.quoteChar != null) {",
        "begin_line": 423,
        "end_line": 423,
        "comment": "     package protected to give access without needing a synthetic accessor",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#433",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "} else if (!commentStart.equals(other.commentStart)) {",
        "begin_line": 433,
        "end_line": 433,
        "comment": "     package protected to give access without needing a synthetic accessor",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#443",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "if (!Arrays.equals(header, other.header)) {",
        "begin_line": 443,
        "end_line": 443,
        "comment": "     package protected to give access without needing a synthetic accessor",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#469",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "public String format(final Object... values) {",
        "begin_line": 469,
        "end_line": 469,
        "comment": "    \n     * Formats the specified values.\n     *\n     * @param values\n     *            the values to format\n     * @return the formatted values\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#616",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "@Override",
        "begin_line": 616,
        "end_line": 616,
        "comment": "    \n     * Returns whether to skip the header record.\n     *\n     * @return whether to skip the header record.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#621",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "",
        "begin_line": 621,
        "end_line": 621,
        "comment": "    \n     * Returns whether to skip the header record.\n     *\n     * @return whether to skip the header record.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#626",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "result = prime * result + ((escape == null) ? 0 : escape.hashCode());",
        "begin_line": 626,
        "end_line": 626,
        "comment": "    \n     * Returns whether to skip the header record.\n     *\n     * @return whether to skip the header record.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#631",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "return result;",
        "begin_line": 631,
        "end_line": 631,
        "comment": "    \n     * Returns whether to skip the header record.\n     *\n     * @return whether to skip the header record.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#636",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "*",
        "begin_line": 636,
        "end_line": 636,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#641",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "public boolean isCommentingEnabled() {",
        "begin_line": 641,
        "end_line": 641,
        "comment": "    \n     * Specifies whether comments are supported by this format.\n     *\n     * Note that the comment introducer character is only recognized at the start of a line.\n     *\n     * @return <tt>true</tt> is comments are supported, <tt>false</tt> otherwise\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#645",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "/**",
        "begin_line": 645,
        "end_line": 645,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#652",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "}",
        "begin_line": 652,
        "end_line": 652,
        "comment": "    \n     * Returns whether escape are being processed.\n     *\n     * @return {@code true} if escapes are processed\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#698",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "sb.append(' ');",
        "begin_line": 698,
        "end_line": 698,
        "comment": "    \n     * Parses the specified content.\n     *\n     * <p>\n     * See also the various static parse methods on {@link CSVParser}.\n     * </p>\n     *\n     * @param in\n     *            the input stream\n     * @return a parser over a stream of {@link CSVRecord}s.\n     * @throws IOException\n     *             If an I/O error occurs\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#701",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "if (isCommentingEnabled()) {",
        "begin_line": 701,
        "end_line": 701,
        "comment": "    \n     * Parses the specified content.\n     *\n     * <p>\n     * See also the various static parse methods on {@link CSVParser}.\n     * </p>\n     *\n     * @param in\n     *            the input stream\n     * @return a parser over a stream of {@link CSVRecord}s.\n     * @throws IOException\n     *             If an I/O error occurs\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#715",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "}",
        "begin_line": 715,
        "end_line": 715,
        "comment": "    \n     * Parses the specified content.\n     *\n     * <p>\n     * See also the various static parse methods on {@link CSVParser}.\n     * </p>\n     *\n     * @param in\n     *            the input stream\n     * @return a parser over a stream of {@link CSVRecord}s.\n     * @throws IOException\n     *             If an I/O error occurs\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#728",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "* Verifies the consistency of the parameters and throws an IllegalStateException if necessary.",
        "begin_line": 728,
        "end_line": 728,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#731",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "*/",
        "begin_line": 731,
        "end_line": 731,
        "comment": "    \n     * Verifies the consistency of the parameters and throws an IllegalStateException if necessary.\n     *\n     * @throws IllegalStateException\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#766",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "Character f_comment_start_30_line_626 = commentStart;",
        "begin_line": 766,
        "end_line": 766,
        "comment": "    \n     * Verifies the consistency of the parameters and throws an IllegalStateException if necessary.\n     *\n     * @throws IllegalStateException\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#779",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "}",
        "begin_line": 779,
        "end_line": 779,
        "comment": "    \n     * Verifies the consistency of the parameters and throws an IllegalStateException if necessary.\n     *\n     * @throws IllegalStateException\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#826",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "int PROBE_START_LINE_645 = 651;",
        "begin_line": 826,
        "end_line": 826,
        "comment": "    \n     * Verifies the consistency of the parameters and throws an IllegalStateException if necessary.\n     *\n     * @throws IllegalStateException\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#829",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "int PROBE_END_LINE_645 = 651;",
        "begin_line": 829,
        "end_line": 829,
        "comment": "    \n     * Verifies the consistency of the parameters and throws an IllegalStateException if necessary.\n     *\n     * @throws IllegalStateException\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#855",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "* Sets the comment start marker of the format to the specified character.",
        "begin_line": 855,
        "end_line": 855,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVFormat.unknown#867",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVFormat.java",
        "class_name": "org.apache.commons.csv.CSVFormat",
        "signature": "org.apache.commons.csv.CSVFormat.unknown(...)",
        "snippet": "throw new IllegalArgumentException(\"The comment start character cannot be a line break\");",
        "begin_line": 867,
        "end_line": 867,
        "comment": "    \n     * Sets the comment start marker of the format to the specified character.\n     *\n     * Note that the comment start character is only recognized at the start of a line.\n     *\n     * @param commentStart\n     *            the comment start marker, use {@code null} to disable\n     * @return A new CSVFormat that is equal to this one but with the specified character as the comment start marker\n     * @throws IllegalArgumentException\n     *             thrown if the specified character is a line break\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Token.unknown#29",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Token.java",
        "class_name": "org.apache.commons.csv.Token",
        "signature": "org.apache.commons.csv.Token.unknown(...)",
        "snippet": "final class Token {",
        "begin_line": 29,
        "end_line": 29,
        "comment": "\n * Internal token representation.\n * <p/>\n * It is used as contract between the lexer and the parser.\n *\n * @version $Id$\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Token.unknown#34",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Token.java",
        "class_name": "org.apache.commons.csv.Token",
        "signature": "org.apache.commons.csv.Token.unknown(...)",
        "snippet": "enum Type {",
        "begin_line": 34,
        "end_line": 34,
        "comment": "     length of the initial token (content-)buffer ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Token.unknown#36",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Token.java",
        "class_name": "org.apache.commons.csv.Token",
        "signature": "org.apache.commons.csv.Token.unknown(...)",
        "snippet": "INVALID,",
        "begin_line": 36,
        "end_line": 36,
        "comment": "         Token has no valid content, i.e. is in its initialized state. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Token.unknown#39",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Token.java",
        "class_name": "org.apache.commons.csv.Token",
        "signature": "org.apache.commons.csv.Token.unknown(...)",
        "snippet": "TOKEN,",
        "begin_line": 39,
        "end_line": 39,
        "comment": "         Token with content, at beginning or in the middle of a line. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Token.unknown#42",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Token.java",
        "class_name": "org.apache.commons.csv.Token",
        "signature": "org.apache.commons.csv.Token.unknown(...)",
        "snippet": "EOF,",
        "begin_line": 42,
        "end_line": 42,
        "comment": "         Token (which can have content) when the end of file is reached. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Token.unknown#45",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Token.java",
        "class_name": "org.apache.commons.csv.Token",
        "signature": "org.apache.commons.csv.Token.unknown(...)",
        "snippet": "EORECORD,",
        "begin_line": 45,
        "end_line": 45,
        "comment": "         Token with content when the end of a line is reached. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Token.unknown#48",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Token.java",
        "class_name": "org.apache.commons.csv.Token",
        "signature": "org.apache.commons.csv.Token.unknown(...)",
        "snippet": "COMMENT",
        "begin_line": 48,
        "end_line": 48,
        "comment": "         Token is a comment line. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Token.unknown#52",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Token.java",
        "class_name": "org.apache.commons.csv.Token",
        "signature": "org.apache.commons.csv.Token.unknown(...)",
        "snippet": "",
        "begin_line": 52,
        "end_line": 52,
        "comment": "         Token is a comment line. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Token.unknown#55",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Token.java",
        "class_name": "org.apache.commons.csv.Token",
        "signature": "org.apache.commons.csv.Token.unknown(...)",
        "snippet": "int PROBE_END_LINE_51 = 52;",
        "begin_line": 55,
        "end_line": 55,
        "comment": "         Token is a comment line. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Lexer.unknown#61",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Lexer.java",
        "class_name": "org.apache.commons.csv.Lexer",
        "signature": "org.apache.commons.csv.Lexer.unknown(...)",
        "snippet": "Lexer(final CSVFormat format, final ExtendedBufferedReader in) {",
        "begin_line": 61,
        "end_line": 61,
        "comment": "     INTERNAL API. but ctor needs to be called dynamically by PerformanceTest class ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Lexer.unknown#62",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Lexer.java",
        "class_name": "org.apache.commons.csv.Lexer",
        "signature": "org.apache.commons.csv.Lexer.unknown(...)",
        "snippet": "int PROBE_START_LINE_62 = 62;",
        "begin_line": 62,
        "end_line": 62,
        "comment": "     INTERNAL API. but ctor needs to be called dynamically by PerformanceTest class ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Lexer.unknown#63",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Lexer.java",
        "class_name": "org.apache.commons.csv.Lexer",
        "signature": "org.apache.commons.csv.Lexer.unknown(...)",
        "snippet": "org.apache.commons.csv.ExtendedBufferedReader p_in_81_line_62 = in;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "     INTERNAL API. but ctor needs to be called dynamically by PerformanceTest class ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Lexer.unknown#64",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Lexer.java",
        "class_name": "org.apache.commons.csv.Lexer",
        "signature": "org.apache.commons.csv.Lexer.unknown(...)",
        "snippet": "int PROBE_END_LINE_62 = 62;",
        "begin_line": 64,
        "end_line": 64,
        "comment": "     INTERNAL API. but ctor needs to be called dynamically by PerformanceTest class ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Lexer.unknown#65",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Lexer.java",
        "class_name": "org.apache.commons.csv.Lexer",
        "signature": "org.apache.commons.csv.Lexer.unknown(...)",
        "snippet": "this.in = p_in_81_line_62;",
        "begin_line": 65,
        "end_line": 65,
        "comment": "     INTERNAL API. but ctor needs to be called dynamically by PerformanceTest class ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Lexer.unknown#66",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Lexer.java",
        "class_name": "org.apache.commons.csv.Lexer",
        "signature": "org.apache.commons.csv.Lexer.unknown(...)",
        "snippet": "int PROBE_START_LINE_63 = 63;",
        "begin_line": 66,
        "end_line": 66,
        "comment": "     INTERNAL API. but ctor needs to be called dynamically by PerformanceTest class ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Lexer.unknown#67",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Lexer.java",
        "class_name": "org.apache.commons.csv.Lexer",
        "signature": "org.apache.commons.csv.Lexer.unknown(...)",
        "snippet": "org.apache.commons.csv.CSVFormat p_format_80_line_63 = format;",
        "begin_line": 67,
        "end_line": 67,
        "comment": "     INTERNAL API. but ctor needs to be called dynamically by PerformanceTest class ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Lexer.unknown#68",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Lexer.java",
        "class_name": "org.apache.commons.csv.Lexer",
        "signature": "org.apache.commons.csv.Lexer.unknown(...)",
        "snippet": "char lexer1_expr3_line_63 = p_format_80_line_63.getDelimiter();",
        "begin_line": 68,
        "end_line": 68,
        "comment": "     INTERNAL API. but ctor needs to be called dynamically by PerformanceTest class ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Lexer.unknown#69",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Lexer.java",
        "class_name": "org.apache.commons.csv.Lexer",
        "signature": "org.apache.commons.csv.Lexer.unknown(...)",
        "snippet": "int PROBE_END_LINE_63 = 63;",
        "begin_line": 69,
        "end_line": 69,
        "comment": "     INTERNAL API. but ctor needs to be called dynamically by PerformanceTest class ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Lexer.unknown#291",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Lexer.java",
        "class_name": "org.apache.commons.csv.Lexer",
        "signature": "org.apache.commons.csv.Lexer.unknown(...)",
        "snippet": "c = in.read();",
        "begin_line": 291,
        "end_line": 291,
        "comment": "                     token finish mark (encapsulator) reached: ignore whitespace till delimiter",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Constants.unknown#36",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Constants.java",
        "class_name": "org.apache.commons.csv.Constants",
        "signature": "org.apache.commons.csv.Constants.unknown(...)",
        "snippet": "int PROBE_START_LINE_36 = 36;",
        "begin_line": 36,
        "end_line": 36,
        "comment": "    \n     * Starts a comment, the remainder of the line is the comment.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#169",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "int PROBE_START_LINE_169 = 169;",
        "begin_line": 169,
        "end_line": 169,
        "comment": "    \n     * Creates a parser for the given {@link String}.\n     *\n     * @param string\n     *            a CSV string. Must not be null.\n     * @param format\n     *            the CSVFormat used for CSV parsing. Must not be null.\n     * @return a new parser\n     * @throws IllegalArgumentException\n     *             If the parameters of the format are inconsistent or if either string or format are null.\n     * @throws IOException\n     *             If an I/O error occurs\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#170",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "String p_string_59_line_169 = string;",
        "begin_line": 170,
        "end_line": 170,
        "comment": "    \n     * Creates a parser for the given {@link String}.\n     *\n     * @param string\n     *            a CSV string. Must not be null.\n     * @param format\n     *            the CSVFormat used for CSV parsing. Must not be null.\n     * @return a new parser\n     * @throws IllegalArgumentException\n     *             If the parameters of the format are inconsistent or if either string or format are null.\n     * @throws IOException\n     *             If an I/O error occurs\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#172",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "Assertions.notNull(p_string_59_line_169, \"string\");",
        "begin_line": 172,
        "end_line": 172,
        "comment": "    \n     * Creates a parser for the given {@link String}.\n     *\n     * @param string\n     *            a CSV string. Must not be null.\n     * @param format\n     *            the CSVFormat used for CSV parsing. Must not be null.\n     * @return a new parser\n     * @throws IllegalArgumentException\n     *             If the parameters of the format are inconsistent or if either string or format are null.\n     * @throws IOException\n     *             If an I/O error occurs\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#214",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "// the following objects are shared to reduce garbage",
        "begin_line": 214,
        "end_line": 214,
        "comment": "     the following objects are shared to reduce garbage",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#218",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "/** A mapping of column names to column indices */",
        "begin_line": 218,
        "end_line": 218,
        "comment": "     A mapping of column names to column indices ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#237",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "*",
        "begin_line": 237,
        "end_line": 237,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#238",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "* @param reader",
        "begin_line": 238,
        "end_line": 238,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#239",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "*            a Reader containing CSV-formatted input. Must not be null.",
        "begin_line": 239,
        "end_line": 239,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#241",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "*            the CSVFormat used for CSV parsing. Must not be null.",
        "begin_line": 241,
        "end_line": 241,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#242",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "* @throws IllegalArgumentException",
        "begin_line": 242,
        "end_line": 242,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#243",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "*             If the parameters of the format are inconsistent or if either reader or format are null.",
        "begin_line": 243,
        "end_line": 243,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#244",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "* @throws IOException",
        "begin_line": 244,
        "end_line": 244,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#245",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "*             If an I/O error occurs",
        "begin_line": 245,
        "end_line": 245,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#288",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "*",
        "begin_line": 288,
        "end_line": 288,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#325",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "* <p/>",
        "begin_line": 325,
        "end_line": 325,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#326",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "* ATTENTION: If your CSV input has multi-line values, the returned number does not correspond to the line number.",
        "begin_line": 326,
        "end_line": 326,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#327",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "*",
        "begin_line": 327,
        "end_line": 327,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.CSVParser.unknown#351",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/CSVParser.java",
        "class_name": "org.apache.commons.csv.CSVParser",
        "signature": "org.apache.commons.csv.CSVParser.unknown(...)",
        "snippet": "}",
        "begin_line": 351,
        "end_line": 351,
        "comment": "    \n     * Parses the CSV input according to the given format and returns the content as a list of\n     * {@link CSVRecord CSVRecords}.\n     * <p/>\n     * The returned content starts at the current parse-position in the stream.\n     *\n     * @return list of {@link CSVRecord CSVRecords}, may be empty\n     * @throws IOException\n     *             on parse error or input read-failure\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Assertions.unknown#32",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Assertions.java",
        "class_name": "org.apache.commons.csv.Assertions",
        "signature": "org.apache.commons.csv.Assertions.unknown(...)",
        "snippet": "int PROBE_START_LINE_32 = 34;",
        "begin_line": 32,
        "end_line": 32,
        "comment": "         can not be instantiated",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.Assertions.unknown#35",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/Assertions.java",
        "class_name": "org.apache.commons.csv.Assertions",
        "signature": "org.apache.commons.csv.Assertions.unknown(...)",
        "snippet": "int PROBE_END_LINE_32 = 34;",
        "begin_line": 35,
        "end_line": 35,
        "comment": "         can not be instantiated",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.ExtendedBufferedReader.unknown#40",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/ExtendedBufferedReader.java",
        "class_name": "org.apache.commons.csv.ExtendedBufferedReader",
        "signature": "org.apache.commons.csv.ExtendedBufferedReader.unknown(...)",
        "snippet": "",
        "begin_line": 40,
        "end_line": 40,
        "comment": "\n * A special buffered reader which supports sophisticated read access.\n * <p>\n * In particular the reader supports a look-ahead option, which allows you to see the next char returned by\n * {@link #read()}.\n *\n * @version $Id$\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.ExtendedBufferedReader.unknown#43",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/ExtendedBufferedReader.java",
        "class_name": "org.apache.commons.csv.ExtendedBufferedReader",
        "signature": "org.apache.commons.csv.ExtendedBufferedReader.unknown(...)",
        "snippet": "int PROBE_END_LINE_39 = 40;",
        "begin_line": 43,
        "end_line": 43,
        "comment": "\n * A special buffered reader which supports sophisticated read access.\n * <p>\n * In particular the reader supports a look-ahead option, which allows you to see the next char returned by\n * {@link #read()}.\n *\n * @version $Id$\n ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.ExtendedBufferedReader.unknown#51",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/ExtendedBufferedReader.java",
        "class_name": "org.apache.commons.csv.ExtendedBufferedReader",
        "signature": "org.apache.commons.csv.ExtendedBufferedReader.unknown(...)",
        "snippet": "private boolean closed;",
        "begin_line": 51,
        "end_line": 51,
        "comment": "     The count of EOLs (CR/LF/CRLF) seen so far ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    },
    {
        "name": "org.apache.commons.csv.ExtendedBufferedReader.unknown#52",
        "is_bug": true,
        "src_path": "/data/bug_db/subjects/defects4j/Csv-4/result/src/org/apache/commons/csv/ExtendedBufferedReader.java",
        "class_name": "org.apache.commons.csv.ExtendedBufferedReader",
        "signature": "org.apache.commons.csv.ExtendedBufferedReader.unknown(...)",
        "snippet": "",
        "begin_line": 52,
        "end_line": 52,
        "comment": "     The count of EOLs (CR/LF/CRLF) seen so far ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 0
    }
]