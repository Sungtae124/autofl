{
    "lang/lang_npe_1": [
        "src.main.java.org.apache.commons.lang3.ClassLoaderUtils.Objects.toString(classLoader)"
    ],
    "lang/lang_npe_2": [
        "src.main.java.org.apache.commons.lang3.mutable.MutableObject.Objects.equals(this.value, that.value)"
    ],
    "lang/lang_npe_3": [],
    "lang/lang_npe_4": [],
    "lang/lang_npe_5": [
        "src.main.java.org.apache.commons.lang3.time.DurationUtils.zeroIfNull(duration).getNano()"
    ],
    "lang/lang_npe_6": [
        "src.main.java.org.apache.commons.lang3.ArrayUtils.toPrimitive(array, false)",
        "src.main.java.org.apache.commons.lang3.ArrayUtils.BooleanUtils.and(null, null)",
        "src.main.java.org.apache.commons.lang3.ArrayUtils.and(ArrayUtils.toPrimitive(array)",
        "src.main.java.org.apache.commons.lang3.ArrayUtils.BooleanUtils.or(Boolean.TRUE, null)",
        "src.main.java.org.apache.commons.lang3.ArrayUtils.BooleanUtils.or(Boolean.FALSE, null)",
        "src.main.java.org.apache.commons.lang3.ArrayUtils.or(ArrayUtils.toPrimitive(array)",
        "src.main.java.org.apache.commons.lang3.ArrayUtils.BooleanUtils.xor(Boolean.TRUE, Boolean.TRUE)",
        "src.main.java.org.apache.commons.lang3.ArrayUtils.BooleanUtils.xor(Boolean.FALSE, Boolean.FALSE)",
        "src.main.java.org.apache.commons.lang3.ArrayUtils.BooleanUtils.xor(Boolean.TRUE, Boolean.FALSE)",
        "src.main.java.org.apache.commons.lang3.ArrayUtils.BooleanUtils.xor(Boolean.TRUE, Boolean.FALSE, Boolean.FALSE)",
        "src.main.java.org.apache.commons.lang3.ArrayUtils.BooleanUtils.xor(Boolean.FALSE, null)",
        "src.main.java.org.apache.commons.lang3.ArrayUtils.BooleanUtils.xor(Boolean.TRUE, null)",
        "src.main.java.org.apache.commons.lang3.ArrayUtils.xor(ArrayUtils.toPrimitive(array)"
    ],
    "lang/lang_npe_7": [
        "src.main.java.org.apache.commons.lang3.stream.Streams.stream(nullSafeStream(stream)"
    ],
    "lang/lang_npe_8": [
        "src.main.java.org.apache.commons.lang3.CharSequenceUtils.toCharArray(final)",
        "src.main.java.org.apache.commons.lang3.CharSequenceUtils.((String)"
    ],
    "lang/lang_npe_9": [
        "src.main.java.org.apache.commons.lang3.reflect.MemberUtils.compare(final, final)",
        "src.main.java.org.apache.commons.lang3.reflect.MemberUtils.m1.toString()",
        "src.main.java.org.apache.commons.lang3.reflect.MemberUtils.if(parameterTypeName!=)"
    ],
    "lang/lang_npe_10": [],
    "lang/lang_npe_11": [
        "src.main.java.org.apache.commons.lang3.StringUtils.//(Assuming)"
    ],
    "lang/lang_npe_12": [],
    "lang/lang_npe_13": [
        "src.main.java.org.apache.commons.lang3.StringUtils.StringUtils.replacePattern(null, *, *)",
        "src.main.java.org.apache.commons.lang3.StringUtils.StringUtils.replacePattern(\"any\", null, *)",
        "src.main.java.org.apache.commons.lang3.StringUtils.StringUtils.replacePattern(\"any\", *, null)",
        "src.main.java.org.apache.commons.lang3.StringUtils.StringUtils.replacePattern(\"\", \"\", \"zzz\")",
        "src.main.java.org.apache.commons.lang3.StringUtils.StringUtils.replacePattern(\"\", \".*\", \"zzz\")",
        "src.main.java.org.apache.commons.lang3.StringUtils.StringUtils.replacePattern(\"\", \".+\", \"zzz\")",
        "src.main.java.org.apache.commons.lang3.StringUtils.StringUtils.replacePattern(\"<__>\\n<__>\", \"<.*>\", \"z\")",
        "src.main.java.org.apache.commons.lang3.StringUtils.StringUtils.replacePattern(\"ABCabc123\", \"[a-z]\", \"_\")",
        "src.main.java.org.apache.commons.lang3.StringUtils.StringUtils.replacePattern(\"ABCabc123\", \"[^A-Z0-9]+\", \"_\")",
        "src.main.java.org.apache.commons.lang3.StringUtils.StringUtils.replacePattern(\"ABCabc123\", \"[^A-Z0-9]+\", \"\")",
        "src.main.java.org.apache.commons.lang3.StringUtils.StringUtils.replacePattern(\"Lorem, \"()",
        "src.main.java.org.apache.commons.lang3.StringUtils.StringUtils.removePattern(null, *)",
        "src.main.java.org.apache.commons.lang3.StringUtils.StringUtils.removePattern(\"any\", null)",
        "src.main.java.org.apache.commons.lang3.StringUtils.StringUtils.removePattern(\"A<__>\\n<__>B\", \"<.*>\")",
        "src.main.java.org.apache.commons.lang3.StringUtils.StringUtils.removePattern(\"ABCabc123\", \"[a-z]\")"
    ],
    "math/math_npe_1": [
        "src.main.java.org.apache.commons.math.util.MathUtils.if(y.length)"
    ],
    "math/math_npe_2": [
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.PolynomialFunction(double)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.evaluate(double[], double)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.differentiate(double[])",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.add(Complex)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.divide(Complex)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.if(isNaN()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.multiply(Complex)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.if(isNaN()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.subtract(Complex)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.if(isNaN()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.pow(Complex)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.add(final)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.setSubMatrix(final, final, final)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.Array2DRowFieldMatrix(final, final, final)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.Array2DRowRealMatrix(final)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copyIn(final)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.setSubMatrix(final, final, final)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.setSubMatrix(double[][], int, int)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.load(double[])",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.load(URL)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.load(File)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.ArrayDataAdapter(double[])",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.load(URL)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(DescriptiveStatistics, DescriptiveStatistics)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(FirstMoment, FirstMoment)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.dest.setData(source.getDataRef()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(FourthMoment, FourthMoment)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.ThirdMoment.copy(source, dest)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(GeometricMean, GeometricMean)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.dest.setData(source.getDataRef()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(Kurtosis, Kurtosis)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.dest.setData(source.getDataRef()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(Mean, Mean)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.dest.setData(source.getDataRef()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(SecondMoment, SecondMoment)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.FirstMoment.copy(source, dest)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(final, SemiVariance)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.dest.setData(source.getDataRef()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(Skewness, Skewness)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.dest.setData(source.getDataRef()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(StandardDeviation, StandardDeviation)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.dest.setData(source.getDataRef()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(ThirdMoment, ThirdMoment)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.SecondMoment.copy(source, dest)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(Variance, Variance)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.dest.setData(source.getDataRef()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(Max, Max)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.dest.setData(source.getDataRef()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(Min, Min)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.dest.setData(source.getDataRef()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(Percentile, Percentile)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.dest.setData(source.getDataRef()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(Product, Product)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.dest.setData(source.getDataRef()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(Sum, Sum)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.dest.setData(source.getDataRef()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(SumOfLogs, SumOfLogs)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.dest.setData(source.getDataRef()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(SumOfSquares, SumOfSquares)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.dest.setData(source.getDataRef()",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(SummaryStatistics, SummaryStatistics)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.synchronized(source)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.synchronized(source)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.checkRectangular(long[][])",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.for(int)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.checkNotNull(Object)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.ResizableDoubleArray(ResizableDoubleArray)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(original, this)",
        "src.main.java.org.apache.commons.math.analysis.polynomials.PolynomialFunction.copy(ResizableDoubleArray, ResizableDoubleArray)"
    ],
    "math/math_npe_3": [],
    "collections/collections_npe_1": [
        "src.main.java.org.apache.commons.collections4.map.CompositeMap.(intersect.size()"
    ],
    "collections/collections_npe_2": [
        "src.main.java.org.apache.commons.collections4.set.CompositeSet.for(final)",
        "src.main.java.org.apache.commons.collections4.set.CompositeSet.(CollectionUtils.isEmpty(coll)",
        "src.main.java.org.apache.commons.collections4.set.CompositeSet.(intersects.size()",
        "src.main.java.org.apache.commons.collections4.set.CompositeSet.(CollectionUtils.intersection(existingSet, set)"
    ],
    "collections/collections_npe_3": [
        "src.main.java.org.apache.commons.collections4.collection.CompositeCollection.for(final)",
        "src.main.java.org.apache.commons.collections4.collection.CompositeCollection.(CollectionUtils.isEmpty(coll)"
    ],
    "commons-io/commons-io_npe_1": [],
    "commons-io/commons-io_npe_2": [
        "main.java.org.apache.commons.io.IOCase.(checkRegionMatches(str, i, search)"
    ],
    "commons-io/commons-io_npe_3": [
        "main.java.org.apache.commons.io.filefilter.CanExecuteFileFilter.toFileVisitResult(file)",
        "main.java.org.apache.commons.io.filefilter.CanExecuteFileFilter.toFileVisitResult(file)",
        "main.java.org.apache.commons.io.filefilter.CanExecuteFileFilter.toFileVisitResult(file)",
        "main.java.org.apache.commons.io.filefilter.CanExecuteFileFilter.toFileVisitResult(file)",
        "main.java.org.apache.commons.io.filefilter.CanExecuteFileFilter.if(file.isDirectory()",
        "main.java.org.apache.commons.io.filefilter.CanExecuteFileFilter.toFileVisitResult(true)",
        "main.java.org.apache.commons.io.filefilter.CanExecuteFileFilter.toFileVisitResult(file)",
        "main.java.org.apache.commons.io.filefilter.CanExecuteFileFilter.get(()",
        "main.java.org.apache.commons.io.filefilter.CanExecuteFileFilter.accept(file)"
    ],
    "commons-io/commons-io_npe_4": [],
    "commons-io/commons-io_npe_5": [
        "main.java.org.apache.commons.io.filefilter.RegexFileFilter.toFileVisitResult(result)"
    ],
    "commons-io/commons-io_npe_6": [
        "main.java.org.apache.commons.io.build.AbstractStreamBuilder.getCharset()"
    ],
    "commons-io/commons-io_npe_7": [
        "main.java.org.apache.commons.io.input.ReaderInputStream.getCharsetEncoder()"
    ],
    "commons-io/commons-io_npe_8": [],
    "commons-io/commons-io_npe_9": [
        "main.java.org.apache.commons.io.output.WriterOutputStream.WriterOutputStream(final, final, final, final)",
        "main.java.org.apache.commons.io.output.WriterOutputStream..onMalformedInput(CodingErrorAction.REPLACE)",
        "main.java.org.apache.commons.io.output.WriterOutputStream.WriterOutputStream(final, final, final, final)",
        "main.java.org.apache.commons.io.output.WriterOutputStream.Charsets.toCharset(charsetName)"
    ],
    "commons-io/commons-io_npe_10": [
        "main.java.org.apache.commons.io.input.CharSequenceInputStream.Charsets.toCharset(charset)",
        "main.java.org.apache.commons.io.input.CharSequenceInputStream.getCharsetEncoder()"
    ],
    "commons-io/commons-io_npe_11": [
        "main.java.org.apache.commons.io.input.ReaderInputStream..onMalformedInput(CodingErrorAction.REPLACE)",
        "main.java.org.apache.commons.io.input.ReaderInputStream.Charsets.toCharset(charsetName)",
        "main.java.org.apache.commons.io.input.ReaderInputStream.getCharsetEncoder()"
    ],
    "commons-io/commons-io_npe_12": [],
    "commons-io/commons-io_npe_13": [
        "main.java.org.apache.commons.io.filefilter.NameFileFilter.toFileVisitResult(acceptBaseName(Objects.toString(file.getFileName()",
        "main.java.org.apache.commons.io.filefilter.NameFileFilter.accept(file)",
        "main.java.org.apache.commons.io.filefilter.NameFileFilter.toFileVisitResult(accept(fileName)",
        "main.java.org.apache.commons.io.filefilter.NameFileFilter.toFileVisitResult(accept(Objects.toString(file.getFileName()",
        "main.java.org.apache.commons.io.filefilter.NameFileFilter.toFileVisitResult(accept(Objects.toString(file.getFileName()",
        "main.java.org.apache.commons.io.filefilter.NameFileFilter.(FilenameUtils.wildcardMatch(Objects.toString(file.getFileName()"
    ],
    "commons-io/commons-io_npe_14": [
        "main.java.org.apache.commons.io.IOUtils.contentEquals(final, final)"
    ],
    "commons-io/commons-io_npe_15": [],
    "commons-io/commons-io_npe_16": [],
    "commons-io/commons-io_npe_17": [],
    "commons-io/commons-io_npe_18": [],
    "commons-io/commons-io_npe_19": [
        "main.java.org.apache.commons.io.IOUtils.bufferedInput2.read()"
    ],
    "defects4j/Chart-2": [
        "source.org.jfree.data.general.DatasetUtilities.(!Double.isNaN(value)",
        "source.org.jfree.data.general.DatasetUtilities.if(!Double.isNaN(lvalue)",
        "source.org.jfree.data.general.DatasetUtilities.(!Double.isNaN(value)",
        "source.org.jfree.data.general.DatasetUtilities.if(!Double.isNaN(lvalue)"
    ],
    "defects4j/Chart-4": [],
    "defects4j/Chart-14": [],
    "defects4j/Chart-16": [],
    "defects4j/Cli-5": [
        "src.java.org.apache.commons.cli.Util.if(str.startsWith(\"--\")"
    ],
    "defects4j/Cli-30": [
        "src.main.java.org.apache.commons.cli.DefaultParser.(!cmd.hasOption(option)",
        "src.main.java.org.apache.commons.cli.DefaultParser.(!cmd.hasOption(option)"
    ],
    "defects4j/Closure-2": [
        "com.google.javascript.jscomp.TypeCheck.for(String)"
    ],
    "defects4j/Closure-171": [],
    "defects4j/Codec-5": [],
    "defects4j/Codec-13": [],
    "defects4j/Codec-17": [
        "src.main.java.org.apache.commons.codec.binary.StringUtils.newString(bytes, Charsets.ISO_8859_1)"
    ],
    "defects4j/Csv-4": [],
    "defects4j/Csv-9": [
        "src.main.java.org.apache.commons.csv.CSVRecord.for(final, Integer>)"
    ],
    "defects4j/Csv-11": [],
    "defects4j/Gson-6": [],
    "defects4j/Gson-9": [
        "gson.src.main.java.com.google.gson.internal.bind.JsonTreeWriter.nullValue()",
        "gson.src.main.java.com.google.gson.internal.bind.JsonTreeWriter.JsonPrimitive(value)",
        "gson.src.main.java.com.google.gson.internal.bind.JsonTreeWriter.value(Boolean)",
        "gson.src.main.java.com.google.gson.internal.bind.JsonTreeWriter.nullValue()"
    ],
    "defects4j/JacksonCore-8": [],
    "defects4j/JacksonDatabind-3": [],
    "defects4j/JacksonDatabind-13": [],
    "defects4j/JacksonDatabind-36": [
        "src.main.java.com.fasterxml.jackson.databind.util.StdDateFormat.setLenient(boolean)"
    ],
    "defects4j/JacksonDatabind-80": [],
    "defects4j/JacksonDatabind-93": [
        "src.main.java.com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.(!raw.isInterface()"
    ],
    "defects4j/JacksonDatabind-95": [
        "src.main.java.com.fasterxml.jackson.databind.type.TypeFactory._factory._fromClass(null, base, TypeBindings.emptyBindings()"
    ],
    "defects4j/JacksonDatabind-107": [],
    "defects4j/Jsoup-8": [
        "src.main.java.org.jsoup.nodes.Node.NodeTraversor(new, getOutputSettings()",
        "src.main.java.org.jsoup.nodes.Node.getOutputSettings()",
        "src.main.java.org.jsoup.nodes.Node.ownerDocument()"
    ],
    "defects4j/Jsoup-22": [
        "src.main.java.org.jsoup.nodes.Element.Collections.emptyList()",
        "src.main.java.org.jsoup.nodes.Element.Elements(int)"
    ],
    "defects4j/Jsoup-26": [
        "src.main.java.org.jsoup.safety.Cleaner.(dirtyDocument.body()"
    ],
    "defects4j/Jsoup-66": [
        "src.main.java.org.jsoup.nodes.Element.NodeList(Element, int)"
    ],
    "defects4j/Jsoup-89": [],
    "defects4j/Lang-20": [],
    "defects4j/Lang-33": [],
    "defects4j/Lang-39": [],
    "defects4j/Lang-47": [],
    "defects4j/Lang-57": [
        "java.org.apache.commons.lang.LocaleUtils.availableLocaleList().contains(locale)"
    ],
    "defects4j/Math-4": [],
    "defects4j/Math-70": [
        "src.main.java.org.apache.commons.math.analysis.solvers.BisectionSolver.solve(f, min, max)"
    ],
    "defects4j/Math-79": [],
    "defects4j/Mockito-18": [],
    "defects4j/Mockito-38": [
        "src.org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool.StringDescription.toString(m).equals(arg)"
    ]
}